// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  MARGUS-X1
// DateTime: 10/3/2015 2:56:28 AM
// UserName: margus
// Input file <fast.y - 10/3/2015 2:53:56 AM>

// options: babel lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Microsoft.Fast.AST
{
internal enum Tokens {
    error=1,EOF=2,CONTAINS=3,IS_EMPTY_LANG=4,IS_EMPTY_TRANS=5,TYPECHECK=6,
    GEN_CSHARP=7,EQ_LANG=8,EQ_TRANS=9,COMPOSE=10,RESTRICT_INP=11,RESTRICT_OUT=12,
    INTERSECT=13,DIFFERENCE=14,UNION=15,DOMAIN=16,PRE_IMAGE=17,COMPLEMENT=18,
    MINIMIZE=19,ID=20,NUMBER=21,COMMENT=22,STRING=23,CHAR=24,
    PUBLIC=25,ENUM=26,CONST=27,FUN=28,ALPHABET=29,LANG=30,
    TRANS=31,DEF=32,TREE=33,PRINT=34,ASSERT_TRUE=35,ASSERT_FALSE=36,
    ASSIGN=37,RIGHT_ARROW=38,WHERE=39,GIVEN=40,TO=41,APPLY=42,
    GET_WITNESS=43,LBRACKET=44,RBRACKET=45,LBRACE=46,RBRACE=47,LPAR=48,
    RPAR=49,COMMA=50,COLON=51,AND=52,NOT=53,IMPLIES=54,
    OR=55,LT=56,GT=57,LE=58,GE=59,EQ=60,
    NE=61,PLUS=62,MINUS=63,TIMES=64,DIV=65,MOD=66,
    SHL=67,SHR=68,BVAND=69,BVNOT=70,BVXOR=71,BAR=72,
    ITE=73,TRUE=74,FALSE=75,BADCHAR=76};

// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<object,FastLexLocation> {
  private FastLexLocation __yylloc = new FastLexLocation();
  public override FastLexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }

  protected abstract int CurrentSc { get; set; }
  //
  // Override the virtual EolState property if the scanner state is more
  // complicated then a simple copy of the current start state ordinal
  //
  public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

// Interface class for 'colorizing' scanners
public interface IColorScan {
  void SetSource(string source, int offset);
  int GetNext(ref int state, out int start, out int end);
}

// Utility class for encapsulating token information
internal class ScanObj {
  public int token;
  public object yylval;
  public FastLexLocation yylloc;
  public ScanObj( int t, object val, FastLexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

internal partial class FastPgmParser: ShiftReduceParser<object, FastLexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[127];
  private static State[] states = new State[315];
  private static string[] nonTerms = new string[] {
      "fast_pgm", "$accept", "fast_defs", "fast_def", "nothing", "enum_def", 
      "const_def", "fun_def", "alphabet_def", "lang_def", "trans_def", "def_def", 
      "tree_def", "query_expr", "bool_query_expr", "enum_def_elems_rest", "tree_def_arg", 
      "trans_exp", "expr", "lang_exp", "fun_vars", "constr_defs", "attr_defs", 
      "attr_defs_rest", "guarded_expr", "guarded_exprs", "guarded_trans_expr", 
      "guarded_trans_exprs", "pattern", "guarded_expr1", "guarded_expr2", "given_exprs", 
      "pattern_attrs", "pattern_attrs_rest", "expr_list", "log_conn", "arithm_rel", 
      "arithm_op_pm", "arithm_op_td", "arithm_op", "uop", "expr_args", };

  static FastPgmParser() {
    states[0] = new State(new int[]{26,6,27,16,28,81,29,95,25,126,30,204,31,206,32,208,33,260,34,276,35,307,36,310,22,312,2,-56},new int[]{-1,1,-3,3,-4,4,-5,314});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{26,6,27,16,28,81,29,95,25,126,30,204,31,206,32,208,33,260,34,276,35,307,36,310,22,312,2,-56},new int[]{-3,5,-4,4,-5,314});
    states[5] = new State(-3);
    states[6] = new State(new int[]{20,8},new int[]{-6,7});
    states[7] = new State(-6);
    states[8] = new State(new int[]{46,9});
    states[9] = new State(new int[]{20,10});
    states[10] = new State(new int[]{47,12,50,13},new int[]{-16,11});
    states[11] = new State(-19);
    states[12] = new State(-20);
    states[13] = new State(new int[]{20,14});
    states[14] = new State(new int[]{47,12,50,13},new int[]{-16,15});
    states[15] = new State(-21);
    states[16] = new State(new int[]{20,18},new int[]{-7,17});
    states[17] = new State(-7);
    states[18] = new State(new int[]{51,19});
    states[19] = new State(new int[]{20,20});
    states[20] = new State(new int[]{37,21});
    states[21] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,22,-41,65});
    states[22] = new State(new int[]{73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52,26,-31,27,-31,28,-31,29,-31,25,-31,30,-31,31,-31,32,-31,33,-31,34,-31,35,-31,36,-31,22,-31,2,-31},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[23] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,24,-41,65});
    states[24] = new State(new int[]{73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52,26,-72,27,-72,28,-72,29,-72,25,-72,30,-72,31,-72,32,-72,33,-72,34,-72,35,-72,36,-72,22,-72,2,-72,51,-72,50,-72,45,-72,49,-72,72,-72,23,-72,21,-72,24,-72,74,-72,75,-72,20,-72,44,-72,53,-72,70,-72,48,-72,40,-72,47,-72,41,-72},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[25] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,26,-41,65});
    states[26] = new State(new int[]{73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52,26,-73,27,-73,28,-73,29,-73,25,-73,30,-73,31,-73,32,-73,33,-73,34,-73,35,-73,36,-73,22,-73,2,-73,51,-73,50,-73,45,-73,49,-73,72,-73,23,-73,21,-73,24,-73,74,-73,75,-73,20,-73,44,-73,53,-73,70,-73,48,-73,40,-73,47,-73,41,-73},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[27] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,28,-41,65});
    states[28] = new State(new int[]{73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52,26,-74,27,-74,28,-74,29,-74,25,-74,30,-74,31,-74,32,-74,33,-74,34,-74,35,-74,36,-74,22,-74,2,-74,51,-74,50,-74,45,-74,49,-74,72,-74,23,-74,21,-74,24,-74,74,-74,75,-74,20,-74,44,-74,53,-74,70,-74,48,-74,40,-74,47,-74,41,-74},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[29] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,30,-41,65});
    states[30] = new State(new int[]{73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52,26,-75,27,-75,28,-75,29,-75,25,-75,30,-75,31,-75,32,-75,33,-75,34,-75,35,-75,36,-75,22,-75,2,-75,51,-75,50,-75,45,-75,49,-75,72,-75,23,-75,21,-75,24,-75,74,-75,75,-75,20,-75,44,-75,53,-75,70,-75,48,-75,40,-75,47,-75,41,-75},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[31] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,32,-41,65});
    states[32] = new State(new int[]{73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52,26,-76,27,-76,28,-76,29,-76,25,-76,30,-76,31,-76,32,-76,33,-76,34,-76,35,-76,36,-76,22,-76,2,-76,51,-76,50,-76,45,-76,49,-76,72,-76,23,-76,21,-76,24,-76,74,-76,75,-76,20,-76,44,-76,53,-76,70,-76,48,-76,40,-76,47,-76,41,-76},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[33] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,34,-41,65});
    states[34] = new State(new int[]{51,35,73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[35] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,36,-41,65});
    states[36] = new State(new int[]{73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52,26,-78,27,-78,28,-78,29,-78,25,-78,30,-78,31,-78,32,-78,33,-78,34,-78,35,-78,36,-78,22,-78,2,-78,51,-78,50,-78,45,-78,49,-78,72,-78,23,-78,21,-78,24,-78,74,-78,75,-78,20,-78,44,-78,53,-78,70,-78,48,-78,40,-78,47,-78,41,-78},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[37] = new State(-84);
    states[38] = new State(-85);
    states[39] = new State(-86);
    states[40] = new State(-87);
    states[41] = new State(-88);
    states[42] = new State(-89);
    states[43] = new State(-90);
    states[44] = new State(-91);
    states[45] = new State(-92);
    states[46] = new State(-93);
    states[47] = new State(-94);
    states[48] = new State(-95);
    states[49] = new State(-96);
    states[50] = new State(-97);
    states[51] = new State(-98);
    states[52] = new State(-99);
    states[53] = new State(-65);
    states[54] = new State(-66);
    states[55] = new State(-67);
    states[56] = new State(-68);
    states[57] = new State(-69);
    states[58] = new State(-70);
    states[59] = new State(new int[]{45,61,23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-35,60,-19,62,-41,65});
    states[60] = new State(-71);
    states[61] = new State(-102);
    states[62] = new State(new int[]{50,63,73,33,45,80,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[63] = new State(new int[]{45,61,23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-35,64,-19,62,-41,65});
    states[64] = new State(-103);
    states[65] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,66,-41,65});
    states[66] = new State(new int[]{73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52,26,-77,27,-77,28,-77,29,-77,25,-77,30,-77,31,-77,32,-77,33,-77,34,-77,35,-77,36,-77,22,-77,2,-77,51,-77,50,-77,45,-77,49,-77,72,-77,23,-77,21,-77,24,-77,74,-77,75,-77,20,-77,44,-77,53,-77,70,-77,48,-77,40,-77,47,-77,41,-77},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[67] = new State(-100);
    states[68] = new State(-101);
    states[69] = new State(new int[]{20,75,23,53,21,54,24,55,74,56,75,57,44,59,53,67,70,68,48,69},new int[]{-19,70,-41,65});
    states[70] = new State(new int[]{49,71,72,72,73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[71] = new State(-79);
    states[72] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,73,-41,65});
    states[73] = new State(new int[]{49,74,73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[74] = new State(-81);
    states[75] = new State(new int[]{49,77,23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69,72,-70,73,-70,55,-70,52,-70,54,-70,56,-70,57,-70,58,-70,59,-70,60,-70,61,-70,62,-70,63,-70,64,-70,65,-70,66,-70,67,-70,68,-70},new int[]{-42,76,-19,78,-41,65});
    states[76] = new State(-80);
    states[77] = new State(-82);
    states[78] = new State(new int[]{73,33,49,77,23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52},new int[]{-42,79,-36,23,-37,25,-38,27,-39,29,-40,31,-19,78,-41,65});
    states[79] = new State(-83);
    states[80] = new State(-104);
    states[81] = new State(new int[]{20,83},new int[]{-8,82});
    states[82] = new State(-8);
    states[83] = new State(new int[]{51,88,48,89},new int[]{-21,84});
    states[84] = new State(new int[]{20,85});
    states[85] = new State(new int[]{37,86});
    states[86] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,87,-41,65});
    states[87] = new State(new int[]{73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52,26,-28,27,-28,28,-28,29,-28,25,-28,30,-28,31,-28,32,-28,33,-28,34,-28,35,-28,36,-28,22,-28,2,-28},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[88] = new State(-29);
    states[89] = new State(new int[]{20,90});
    states[90] = new State(new int[]{51,91});
    states[91] = new State(new int[]{20,92});
    states[92] = new State(new int[]{49,93});
    states[93] = new State(new int[]{51,88,48,89},new int[]{-21,94});
    states[94] = new State(-30);
    states[95] = new State(new int[]{20,97},new int[]{-9,96});
    states[96] = new State(-9);
    states[97] = new State(new int[]{46,98,44,111});
    states[98] = new State(new int[]{47,100,20,101},new int[]{-22,99});
    states[99] = new State(-32);
    states[100] = new State(-38);
    states[101] = new State(new int[]{47,102,50,103,48,105});
    states[102] = new State(-39);
    states[103] = new State(new int[]{47,100,20,101},new int[]{-22,104});
    states[104] = new State(-40);
    states[105] = new State(new int[]{21,106});
    states[106] = new State(new int[]{49,107});
    states[107] = new State(new int[]{47,108,50,109});
    states[108] = new State(-41);
    states[109] = new State(new int[]{47,100,20,101},new int[]{-22,110});
    states[110] = new State(-42);
    states[111] = new State(new int[]{45,115,20,116},new int[]{-23,112});
    states[112] = new State(new int[]{46,113});
    states[113] = new State(new int[]{47,100,20,101},new int[]{-22,114});
    states[114] = new State(-33);
    states[115] = new State(-34);
    states[116] = new State(new int[]{51,117});
    states[117] = new State(new int[]{20,118});
    states[118] = new State(new int[]{45,120,50,121},new int[]{-24,119});
    states[119] = new State(-35);
    states[120] = new State(-36);
    states[121] = new State(new int[]{20,122});
    states[122] = new State(new int[]{51,123});
    states[123] = new State(new int[]{20,124});
    states[124] = new State(new int[]{45,120,50,121},new int[]{-24,125});
    states[125] = new State(-37);
    states[126] = new State(new int[]{30,127,31,176});
    states[127] = new State(new int[]{20,129},new int[]{-10,128});
    states[128] = new State(-10);
    states[129] = new State(new int[]{48,130,51,171});
    states[130] = new State(new int[]{20,131});
    states[131] = new State(new int[]{51,132});
    states[132] = new State(new int[]{20,133});
    states[133] = new State(new int[]{49,134});
    states[134] = new State(new int[]{46,135});
    states[135] = new State(new int[]{20,161},new int[]{-25,136,-29,142});
    states[136] = new State(new int[]{47,138,72,139},new int[]{-26,137});
    states[137] = new State(-43);
    states[138] = new State(-45);
    states[139] = new State(new int[]{20,161},new int[]{-25,140,-29,142});
    states[140] = new State(new int[]{47,138,72,139},new int[]{-26,141});
    states[141] = new State(-46);
    states[142] = new State(new int[]{39,144,40,147,47,-56,72,-56},new int[]{-30,143,-31,160,-5,159});
    states[143] = new State(-49);
    states[144] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,145,-41,65});
    states[145] = new State(new int[]{73,33,40,147,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52,47,-56,72,-56,41,-56},new int[]{-31,146,-36,23,-37,25,-38,27,-39,29,-40,31,-5,159});
    states[146] = new State(-50);
    states[147] = new State(new int[]{48,148});
    states[148] = new State(new int[]{20,149});
    states[149] = new State(new int[]{20,150});
    states[150] = new State(new int[]{49,151});
    states[151] = new State(new int[]{48,153,47,-56,72,-56,41,-56},new int[]{-32,152,-5,158});
    states[152] = new State(-52);
    states[153] = new State(new int[]{20,154});
    states[154] = new State(new int[]{20,155});
    states[155] = new State(new int[]{49,156});
    states[156] = new State(new int[]{48,153,47,-56,72,-56,41,-56},new int[]{-32,157,-5,158});
    states[157] = new State(-54);
    states[158] = new State(-55);
    states[159] = new State(-53);
    states[160] = new State(-51);
    states[161] = new State(new int[]{48,162});
    states[162] = new State(new int[]{49,164,20,165},new int[]{-33,163});
    states[163] = new State(-60);
    states[164] = new State(-61);
    states[165] = new State(new int[]{49,167,50,168},new int[]{-34,166});
    states[166] = new State(-62);
    states[167] = new State(-63);
    states[168] = new State(new int[]{20,169});
    states[169] = new State(new int[]{49,167,50,168},new int[]{-34,170});
    states[170] = new State(-64);
    states[171] = new State(new int[]{20,172});
    states[172] = new State(new int[]{46,173});
    states[173] = new State(new int[]{20,161},new int[]{-25,174,-29,142});
    states[174] = new State(new int[]{47,138,72,139},new int[]{-26,175});
    states[175] = new State(-44);
    states[176] = new State(new int[]{20,178},new int[]{-11,177});
    states[177] = new State(-12);
    states[178] = new State(new int[]{48,179,51,197});
    states[179] = new State(new int[]{20,180});
    states[180] = new State(new int[]{51,181});
    states[181] = new State(new int[]{20,182});
    states[182] = new State(new int[]{49,183});
    states[183] = new State(new int[]{51,184});
    states[184] = new State(new int[]{20,185});
    states[185] = new State(new int[]{46,186});
    states[186] = new State(new int[]{20,161},new int[]{-27,187,-29,193});
    states[187] = new State(new int[]{47,189,72,190},new int[]{-28,188});
    states[188] = new State(-47);
    states[189] = new State(-57);
    states[190] = new State(new int[]{20,161},new int[]{-27,191,-29,193});
    states[191] = new State(new int[]{47,189,72,190},new int[]{-28,192});
    states[192] = new State(-58);
    states[193] = new State(new int[]{39,144,40,147,41,-56},new int[]{-30,194,-31,160,-5,159});
    states[194] = new State(new int[]{41,195});
    states[195] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,196,-41,65});
    states[196] = new State(new int[]{73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52,47,-59,72,-59},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[197] = new State(new int[]{20,198});
    states[198] = new State(new int[]{38,199});
    states[199] = new State(new int[]{20,200});
    states[200] = new State(new int[]{46,201});
    states[201] = new State(new int[]{20,161},new int[]{-27,202,-29,193});
    states[202] = new State(new int[]{47,189,72,190},new int[]{-28,203});
    states[203] = new State(-48);
    states[204] = new State(new int[]{20,129},new int[]{-10,205});
    states[205] = new State(-11);
    states[206] = new State(new int[]{20,178},new int[]{-11,207});
    states[207] = new State(-13);
    states[208] = new State(new int[]{20,210},new int[]{-12,209});
    states[209] = new State(-14);
    states[210] = new State(new int[]{51,211});
    states[211] = new State(new int[]{20,212});
    states[212] = new State(new int[]{37,213,38,256});
    states[213] = new State(new int[]{48,215,20,220},new int[]{-20,214});
    states[214] = new State(-26);
    states[215] = new State(new int[]{13,216,14,221,15,225,16,229,17,246,18,250,19,253});
    states[216] = new State(new int[]{48,215,20,220},new int[]{-20,217});
    states[217] = new State(new int[]{48,215,20,220},new int[]{-20,218});
    states[218] = new State(new int[]{49,219});
    states[219] = new State(-119);
    states[220] = new State(-126);
    states[221] = new State(new int[]{48,215,20,220},new int[]{-20,222});
    states[222] = new State(new int[]{48,215,20,220},new int[]{-20,223});
    states[223] = new State(new int[]{49,224});
    states[224] = new State(-120);
    states[225] = new State(new int[]{48,215,20,220},new int[]{-20,226});
    states[226] = new State(new int[]{48,215,20,220},new int[]{-20,227});
    states[227] = new State(new int[]{49,228});
    states[228] = new State(-121);
    states[229] = new State(new int[]{48,232,20,237},new int[]{-18,230});
    states[230] = new State(new int[]{49,231});
    states[231] = new State(-122);
    states[232] = new State(new int[]{10,233,11,238,12,242});
    states[233] = new State(new int[]{48,232,20,237},new int[]{-18,234});
    states[234] = new State(new int[]{48,232,20,237},new int[]{-18,235});
    states[235] = new State(new int[]{49,236});
    states[236] = new State(-115);
    states[237] = new State(-118);
    states[238] = new State(new int[]{48,232,20,237},new int[]{-18,239});
    states[239] = new State(new int[]{48,215,20,220},new int[]{-20,240});
    states[240] = new State(new int[]{49,241});
    states[241] = new State(-116);
    states[242] = new State(new int[]{48,232,20,237},new int[]{-18,243});
    states[243] = new State(new int[]{48,215,20,220},new int[]{-20,244});
    states[244] = new State(new int[]{49,245});
    states[245] = new State(-117);
    states[246] = new State(new int[]{48,232,20,237},new int[]{-18,247});
    states[247] = new State(new int[]{48,215,20,220},new int[]{-20,248});
    states[248] = new State(new int[]{49,249});
    states[249] = new State(-123);
    states[250] = new State(new int[]{48,215,20,220},new int[]{-20,251});
    states[251] = new State(new int[]{49,252});
    states[252] = new State(-124);
    states[253] = new State(new int[]{48,215,20,220},new int[]{-20,254});
    states[254] = new State(new int[]{49,255});
    states[255] = new State(-125);
    states[256] = new State(new int[]{20,257});
    states[257] = new State(new int[]{37,258});
    states[258] = new State(new int[]{48,232,20,237},new int[]{-18,259});
    states[259] = new State(-27);
    states[260] = new State(new int[]{20,262},new int[]{-13,261});
    states[261] = new State(-15);
    states[262] = new State(new int[]{51,263});
    states[263] = new State(new int[]{20,264});
    states[264] = new State(new int[]{37,265});
    states[265] = new State(new int[]{48,267,23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68},new int[]{-17,266,-19,275,-41,65});
    states[266] = new State(-22);
    states[267] = new State(new int[]{42,268,43,272,20,75,23,53,21,54,24,55,74,56,75,57,44,59,53,67,70,68,48,69},new int[]{-19,70,-41,65});
    states[268] = new State(new int[]{48,232,20,237},new int[]{-18,269});
    states[269] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,270,-41,65});
    states[270] = new State(new int[]{49,271,73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[271] = new State(-23);
    states[272] = new State(new int[]{48,215,20,220},new int[]{-20,273});
    states[273] = new State(new int[]{49,274});
    states[274] = new State(-24);
    states[275] = new State(new int[]{73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52,26,-25,27,-25,28,-25,29,-25,25,-25,30,-25,31,-25,32,-25,33,-25,34,-25,35,-25,36,-25,22,-25,2,-25},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[276] = new State(new int[]{23,278,20,279,48,280},new int[]{-14,277,-15,306});
    states[277] = new State(-16);
    states[278] = new State(-105);
    states[279] = new State(-106);
    states[280] = new State(new int[]{7,281,3,283,4,287,5,290,6,293,8,298,9,302});
    states[281] = new State(new int[]{49,282});
    states[282] = new State(-107);
    states[283] = new State(new int[]{48,215,20,220},new int[]{-20,284});
    states[284] = new State(new int[]{23,53,21,54,24,55,74,56,75,57,20,58,44,59,53,67,70,68,48,69},new int[]{-19,285,-41,65});
    states[285] = new State(new int[]{49,286,73,33,55,37,52,38,54,39,56,40,57,41,58,42,59,43,60,44,61,45,62,46,63,47,64,48,65,49,66,50,67,51,68,52},new int[]{-36,23,-37,25,-38,27,-39,29,-40,31});
    states[286] = new State(-109);
    states[287] = new State(new int[]{48,215,20,220},new int[]{-20,288});
    states[288] = new State(new int[]{49,289});
    states[289] = new State(-110);
    states[290] = new State(new int[]{48,232,20,237},new int[]{-18,291});
    states[291] = new State(new int[]{49,292});
    states[292] = new State(-111);
    states[293] = new State(new int[]{48,215,20,220},new int[]{-20,294});
    states[294] = new State(new int[]{48,232,20,237},new int[]{-18,295});
    states[295] = new State(new int[]{48,215,20,220},new int[]{-20,296});
    states[296] = new State(new int[]{49,297});
    states[297] = new State(-112);
    states[298] = new State(new int[]{48,215,20,220},new int[]{-20,299});
    states[299] = new State(new int[]{48,215,20,220},new int[]{-20,300});
    states[300] = new State(new int[]{49,301});
    states[301] = new State(-113);
    states[302] = new State(new int[]{48,232,20,237},new int[]{-18,303});
    states[303] = new State(new int[]{48,232,20,237},new int[]{-18,304});
    states[304] = new State(new int[]{49,305});
    states[305] = new State(-114);
    states[306] = new State(-108);
    states[307] = new State(new int[]{48,309},new int[]{-15,308});
    states[308] = new State(-17);
    states[309] = new State(new int[]{3,283,4,287,5,290,6,293,8,298,9,302});
    states[310] = new State(new int[]{48,309},new int[]{-15,311});
    states[311] = new State(-18);
    states[312] = new State(new int[]{26,6,27,16,28,81,29,95,25,126,30,204,31,206,32,208,33,260,34,276,35,307,36,310,22,312,2,-56},new int[]{-3,313,-4,4,-5,314});
    states[313] = new State(-4);
    states[314] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4,-3});
    rules[4] = new Rule(-3, new int[]{22,-3});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-4, new int[]{26,-6});
    rules[7] = new Rule(-4, new int[]{27,-7});
    rules[8] = new Rule(-4, new int[]{28,-8});
    rules[9] = new Rule(-4, new int[]{29,-9});
    rules[10] = new Rule(-4, new int[]{25,30,-10});
    rules[11] = new Rule(-4, new int[]{30,-10});
    rules[12] = new Rule(-4, new int[]{25,31,-11});
    rules[13] = new Rule(-4, new int[]{31,-11});
    rules[14] = new Rule(-4, new int[]{32,-12});
    rules[15] = new Rule(-4, new int[]{33,-13});
    rules[16] = new Rule(-4, new int[]{34,-14});
    rules[17] = new Rule(-4, new int[]{35,-15});
    rules[18] = new Rule(-4, new int[]{36,-15});
    rules[19] = new Rule(-6, new int[]{20,46,20,-16});
    rules[20] = new Rule(-16, new int[]{47});
    rules[21] = new Rule(-16, new int[]{50,20,-16});
    rules[22] = new Rule(-13, new int[]{20,51,20,37,-17});
    rules[23] = new Rule(-17, new int[]{48,42,-18,-19,49});
    rules[24] = new Rule(-17, new int[]{48,43,-20,49});
    rules[25] = new Rule(-17, new int[]{-19});
    rules[26] = new Rule(-12, new int[]{20,51,20,37,-20});
    rules[27] = new Rule(-12, new int[]{20,51,20,38,20,37,-18});
    rules[28] = new Rule(-8, new int[]{20,-21,20,37,-19});
    rules[29] = new Rule(-21, new int[]{51});
    rules[30] = new Rule(-21, new int[]{48,20,51,20,49,-21});
    rules[31] = new Rule(-7, new int[]{20,51,20,37,-19});
    rules[32] = new Rule(-9, new int[]{20,46,-22});
    rules[33] = new Rule(-9, new int[]{20,44,-23,46,-22});
    rules[34] = new Rule(-23, new int[]{45});
    rules[35] = new Rule(-23, new int[]{20,51,20,-24});
    rules[36] = new Rule(-24, new int[]{45});
    rules[37] = new Rule(-24, new int[]{50,20,51,20,-24});
    rules[38] = new Rule(-22, new int[]{47});
    rules[39] = new Rule(-22, new int[]{20,47});
    rules[40] = new Rule(-22, new int[]{20,50,-22});
    rules[41] = new Rule(-22, new int[]{20,48,21,49,47});
    rules[42] = new Rule(-22, new int[]{20,48,21,49,50,-22});
    rules[43] = new Rule(-10, new int[]{20,48,20,51,20,49,46,-25,-26});
    rules[44] = new Rule(-10, new int[]{20,51,20,46,-25,-26});
    rules[45] = new Rule(-26, new int[]{47});
    rules[46] = new Rule(-26, new int[]{72,-25,-26});
    rules[47] = new Rule(-11, new int[]{20,48,20,51,20,49,51,20,46,-27,-28});
    rules[48] = new Rule(-11, new int[]{20,51,20,38,20,46,-27,-28});
    rules[49] = new Rule(-25, new int[]{-29,-30});
    rules[50] = new Rule(-30, new int[]{39,-19,-31});
    rules[51] = new Rule(-30, new int[]{-31});
    rules[52] = new Rule(-31, new int[]{40,48,20,20,49,-32});
    rules[53] = new Rule(-31, new int[]{-5});
    rules[54] = new Rule(-32, new int[]{48,20,20,49,-32});
    rules[55] = new Rule(-32, new int[]{-5});
    rules[56] = new Rule(-5, new int[]{});
    rules[57] = new Rule(-28, new int[]{47});
    rules[58] = new Rule(-28, new int[]{72,-27,-28});
    rules[59] = new Rule(-27, new int[]{-29,-30,41,-19});
    rules[60] = new Rule(-29, new int[]{20,48,-33});
    rules[61] = new Rule(-33, new int[]{49});
    rules[62] = new Rule(-33, new int[]{20,-34});
    rules[63] = new Rule(-34, new int[]{49});
    rules[64] = new Rule(-34, new int[]{50,20,-34});
    rules[65] = new Rule(-19, new int[]{23});
    rules[66] = new Rule(-19, new int[]{21});
    rules[67] = new Rule(-19, new int[]{24});
    rules[68] = new Rule(-19, new int[]{74});
    rules[69] = new Rule(-19, new int[]{75});
    rules[70] = new Rule(-19, new int[]{20});
    rules[71] = new Rule(-19, new int[]{44,-35});
    rules[72] = new Rule(-19, new int[]{-19,-36,-19});
    rules[73] = new Rule(-19, new int[]{-19,-37,-19});
    rules[74] = new Rule(-19, new int[]{-19,-38,-19});
    rules[75] = new Rule(-19, new int[]{-19,-39,-19});
    rules[76] = new Rule(-19, new int[]{-19,-40,-19});
    rules[77] = new Rule(-19, new int[]{-41,-19});
    rules[78] = new Rule(-19, new int[]{-19,73,-19,51,-19});
    rules[79] = new Rule(-19, new int[]{48,-19,49});
    rules[80] = new Rule(-19, new int[]{48,20,-42});
    rules[81] = new Rule(-19, new int[]{48,-19,72,-19,49});
    rules[82] = new Rule(-42, new int[]{49});
    rules[83] = new Rule(-42, new int[]{-19,-42});
    rules[84] = new Rule(-36, new int[]{55});
    rules[85] = new Rule(-36, new int[]{52});
    rules[86] = new Rule(-36, new int[]{54});
    rules[87] = new Rule(-37, new int[]{56});
    rules[88] = new Rule(-37, new int[]{57});
    rules[89] = new Rule(-37, new int[]{58});
    rules[90] = new Rule(-37, new int[]{59});
    rules[91] = new Rule(-37, new int[]{60});
    rules[92] = new Rule(-37, new int[]{61});
    rules[93] = new Rule(-38, new int[]{62});
    rules[94] = new Rule(-38, new int[]{63});
    rules[95] = new Rule(-39, new int[]{64});
    rules[96] = new Rule(-39, new int[]{65});
    rules[97] = new Rule(-40, new int[]{66});
    rules[98] = new Rule(-40, new int[]{67});
    rules[99] = new Rule(-40, new int[]{68});
    rules[100] = new Rule(-41, new int[]{53});
    rules[101] = new Rule(-41, new int[]{70});
    rules[102] = new Rule(-35, new int[]{45});
    rules[103] = new Rule(-35, new int[]{-19,50,-35});
    rules[104] = new Rule(-35, new int[]{-19,45});
    rules[105] = new Rule(-14, new int[]{23});
    rules[106] = new Rule(-14, new int[]{20});
    rules[107] = new Rule(-14, new int[]{48,7,49});
    rules[108] = new Rule(-14, new int[]{-15});
    rules[109] = new Rule(-15, new int[]{48,3,-20,-19,49});
    rules[110] = new Rule(-15, new int[]{48,4,-20,49});
    rules[111] = new Rule(-15, new int[]{48,5,-18,49});
    rules[112] = new Rule(-15, new int[]{48,6,-20,-18,-20,49});
    rules[113] = new Rule(-15, new int[]{48,8,-20,-20,49});
    rules[114] = new Rule(-15, new int[]{48,9,-18,-18,49});
    rules[115] = new Rule(-18, new int[]{48,10,-18,-18,49});
    rules[116] = new Rule(-18, new int[]{48,11,-18,-20,49});
    rules[117] = new Rule(-18, new int[]{48,12,-18,-20,49});
    rules[118] = new Rule(-18, new int[]{20});
    rules[119] = new Rule(-20, new int[]{48,13,-20,-20,49});
    rules[120] = new Rule(-20, new int[]{48,14,-20,-20,49});
    rules[121] = new Rule(-20, new int[]{48,15,-20,-20,49});
    rules[122] = new Rule(-20, new int[]{48,16,-18,49});
    rules[123] = new Rule(-20, new int[]{48,17,-18,-20,49});
    rules[124] = new Rule(-20, new int[]{48,18,-20,49});
    rules[125] = new Rule(-20, new int[]{48,19,-20,49});
    rules[126] = new Rule(-20, new int[]{20});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // fast_pgm -> fast_defs
#line 53 "fast.y"
{ CurrentSemanticValue = MkFastPgm(ValueStack[ValueStack.Depth-1]); }
        break;
      case 3: // fast_defs -> fast_def, fast_defs
#line 57 "fast.y"
{ CurrentSemanticValue = MkDefList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 4: // fast_defs -> COMMENT, fast_defs
#line 58 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 5: // fast_defs -> nothing
#line 59 "fast.y"
{ CurrentSemanticValue = MkEmptyDefList(); }
        break;
      case 6: // fast_def -> ENUM, enum_def
#line 63 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 7: // fast_def -> CONST, const_def
#line 64 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 8: // fast_def -> FUN, fun_def
#line 65 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 9: // fast_def -> ALPHABET, alphabet_def
#line 66 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 10: // fast_def -> PUBLIC, LANG, lang_def
#line 67 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; SetPublic(CurrentSemanticValue); }
        break;
      case 11: // fast_def -> LANG, lang_def
#line 68 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 12: // fast_def -> PUBLIC, TRANS, trans_def
#line 69 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; SetPublic(CurrentSemanticValue); }
        break;
      case 13: // fast_def -> TRANS, trans_def
#line 70 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 14: // fast_def -> DEF, def_def
#line 71 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 15: // fast_def -> TREE, tree_def
#line 72 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 16: // fast_def -> PRINT, query_expr
#line 73 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 17: // fast_def -> ASSERT_TRUE, bool_query_expr
#line 74 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; SetAssertTrue(CurrentSemanticValue); }
        break;
      case 18: // fast_def -> ASSERT_FALSE, bool_query_expr
#line 75 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; SetAssertFalse(CurrentSemanticValue); }
        break;
      case 19: // enum_def -> ID, LBRACE, ID, enum_def_elems_rest
#line 79 "fast.y"
{ CurrentSemanticValue = MkEnumDef(ValueStack[ValueStack.Depth-4], MkTokenList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1])); }
        break;
      case 20: // enum_def_elems_rest -> RBRACE
#line 82 "fast.y"
{ CurrentSemanticValue = MkEmptyTokenList(); }
        break;
      case 21: // enum_def_elems_rest -> COMMA, ID, enum_def_elems_rest
#line 83 "fast.y"
{ CurrentSemanticValue = MkTokenList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 22: // tree_def -> ID, COLON, ID, ASSIGN, tree_def_arg
#line 88 "fast.y"
{ CurrentSemanticValue = MkTreeDef(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 23: // tree_def_arg -> LPAR, APPLY, trans_exp, expr, RPAR
#line 91 "fast.y"
{ CurrentSemanticValue = new object[]{ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]}; }
        break;
      case 24: // tree_def_arg -> LPAR, GET_WITNESS, lang_exp, RPAR
#line 92 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 25: // tree_def_arg -> expr
#line 93 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 26: // def_def -> ID, COLON, ID, ASSIGN, lang_exp
#line 97 "fast.y"
{ CurrentSemanticValue = MkLangDefDef(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 27: // def_def -> ID, COLON, ID, RIGHT_ARROW, ID, ASSIGN, trans_exp
#line 98 "fast.y"
{ CurrentSemanticValue = MkTransDefDef(ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 28: // fun_def -> ID, fun_vars, ID, ASSIGN, expr
#line 102 "fast.y"
{ CurrentSemanticValue = MkFunctionDef(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 29: // fun_vars -> COLON
#line 105 "fast.y"
{ CurrentSemanticValue = MkEmptyFastTokenPairList(); }
        break;
      case 30: // fun_vars -> LPAR, ID, COLON, ID, RPAR, fun_vars
#line 106 "fast.y"
{ CurrentSemanticValue = MkFastTokenPairList(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 31: // const_def -> ID, COLON, ID, ASSIGN, expr
#line 110 "fast.y"
{ CurrentSemanticValue = MkConstDef(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 32: // alphabet_def -> ID, LBRACE, constr_defs
#line 114 "fast.y"
{ CurrentSemanticValue = MkAlphabetDef(ValueStack[ValueStack.Depth-3], MkEmptyFastTokenPairList(), ValueStack[ValueStack.Depth-1]); }
        break;
      case 33: // alphabet_def -> ID, LBRACKET, attr_defs, LBRACE, constr_defs
#line 115 "fast.y"
{ CurrentSemanticValue = MkAlphabetDef(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 34: // attr_defs -> RBRACKET
#line 118 "fast.y"
{ CurrentSemanticValue = MkEmptyFastTokenPairList(); }
        break;
      case 35: // attr_defs -> ID, COLON, ID, attr_defs_rest
#line 119 "fast.y"
{ CurrentSemanticValue = MkFastTokenPairList(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 36: // attr_defs_rest -> RBRACKET
#line 122 "fast.y"
{ CurrentSemanticValue = MkEmptyFastTokenPairList(); }
        break;
      case 37: // attr_defs_rest -> COMMA, ID, COLON, ID, attr_defs_rest
#line 123 "fast.y"
{ CurrentSemanticValue = MkFastTokenPairList(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 38: // constr_defs -> RBRACE
#line 126 "fast.y"
{ CurrentSemanticValue = MkEmptyFastTokenPairList(); }
        break;
      case 39: // constr_defs -> ID, RBRACE
#line 127 "fast.y"
{ CurrentSemanticValue = MkFastTokenPairList(ValueStack[ValueStack.Depth-2], MkZero(), MkEmptyFastTokenPairList()); }
        break;
      case 40: // constr_defs -> ID, COMMA, constr_defs
#line 128 "fast.y"
{ CurrentSemanticValue = MkFastTokenPairList(ValueStack[ValueStack.Depth-3], MkZero(), ValueStack[ValueStack.Depth-1]); }
        break;
      case 41: // constr_defs -> ID, LPAR, NUMBER, RPAR, RBRACE
#line 129 "fast.y"
{ CurrentSemanticValue = MkFastTokenPairList(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], MkEmptyFastTokenPairList()); }
        break;
      case 42: // constr_defs -> ID, LPAR, NUMBER, RPAR, COMMA, constr_defs
#line 130 "fast.y"
{ CurrentSemanticValue = MkFastTokenPairList(ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-1]); }
        break;
      case 43: // lang_def -> ID, LPAR, ID, COLON, ID, RPAR, LBRACE, guarded_expr, guarded_exprs
#line 134 "fast.y"
{ CurrentSemanticValue = MkLangDef(ValueStack[ValueStack.Depth-9], ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-7], MkGuardedExpList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1])); }
        break;
      case 44: // lang_def -> ID, COLON, ID, LBRACE, guarded_expr, guarded_exprs
#line 135 "fast.y"
{ CurrentSemanticValue = MkLangDef(ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], MkGuardedExpList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1])); }
        break;
      case 45: // guarded_exprs -> RBRACE
#line 139 "fast.y"
{ CurrentSemanticValue = MkEmptyGuardedExpList(); }
        break;
      case 46: // guarded_exprs -> BAR, guarded_expr, guarded_exprs
#line 140 "fast.y"
{ CurrentSemanticValue = MkGuardedExpList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 47: // trans_def -> ID, LPAR, ID, COLON, ID, RPAR, COLON, ID, LBRACE, 
               //              guarded_trans_expr, guarded_trans_exprs
#line 144 "fast.y"
{ CurrentSemanticValue = MkTransDef(ValueStack[ValueStack.Depth-11], ValueStack[ValueStack.Depth-7], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-9], MkGuardedExpList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1])); }
        break;
      case 48: // trans_def -> ID, COLON, ID, RIGHT_ARROW, ID, LBRACE, guarded_trans_expr, 
               //              guarded_trans_exprs
#line 145 "fast.y"
{ CurrentSemanticValue = MkTransDef(ValueStack[ValueStack.Depth-8], ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-4], MkGuardedExpList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1])); }
        break;
      case 49: // guarded_expr -> pattern, guarded_expr1
#line 149 "fast.y"
{ CurrentSemanticValue = MkGuardedExp(ValueStack[ValueStack.Depth-2], ((object[])ValueStack[ValueStack.Depth-1])[0], ((object[])ValueStack[ValueStack.Depth-1])[1]); }
        break;
      case 50: // guarded_expr1 -> WHERE, expr, guarded_expr2
#line 152 "fast.y"
{ CurrentSemanticValue = new object[]{ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]}; }
        break;
      case 51: // guarded_expr1 -> guarded_expr2
#line 153 "fast.y"
{ CurrentSemanticValue = new object[]{null, ValueStack[ValueStack.Depth-1]}; }
        break;
      case 52: // guarded_expr2 -> GIVEN, LPAR, ID, ID, RPAR, given_exprs
#line 156 "fast.y"
{ CurrentSemanticValue = MkFExpList(MkAppExp(ValueStack[ValueStack.Depth-4], MkFExpList(MkId(ValueStack[ValueStack.Depth-3]),MkEmptyFExpList())), ValueStack[ValueStack.Depth-1]);  }
        break;
      case 53: // guarded_expr2 -> nothing
#line 157 "fast.y"
{ CurrentSemanticValue = null;}
        break;
      case 54: // given_exprs -> LPAR, ID, ID, RPAR, given_exprs
#line 160 "fast.y"
{ CurrentSemanticValue = MkFExpList(MkAppExp(ValueStack[ValueStack.Depth-4], MkFExpList(MkId(ValueStack[ValueStack.Depth-3]),MkEmptyFExpList())), ValueStack[ValueStack.Depth-1]); }
        break;
      case 55: // given_exprs -> nothing
#line 161 "fast.y"
{ CurrentSemanticValue = MkEmptyFExpList(); }
        break;
      case 57: // guarded_trans_exprs -> RBRACE
#line 168 "fast.y"
{ CurrentSemanticValue = MkEmptyGuardedExpList(); }
        break;
      case 58: // guarded_trans_exprs -> BAR, guarded_trans_expr, guarded_trans_exprs
#line 169 "fast.y"
{ CurrentSemanticValue = MkGuardedExpList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 59: // guarded_trans_expr -> pattern, guarded_expr1, TO, expr
#line 172 "fast.y"
{ CurrentSemanticValue = MkGuardedExp(ValueStack[ValueStack.Depth-4], ((object[])ValueStack[ValueStack.Depth-3])[0], ((object[])ValueStack[ValueStack.Depth-3])[1], ValueStack[ValueStack.Depth-1]); }
        break;
      case 60: // pattern -> ID, LPAR, pattern_attrs
#line 176 "fast.y"
{ CurrentSemanticValue = MkPattern(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 61: // pattern_attrs -> RPAR
#line 179 "fast.y"
{ CurrentSemanticValue = MkEmptyTokenList(); }
        break;
      case 62: // pattern_attrs -> ID, pattern_attrs_rest
#line 180 "fast.y"
{ CurrentSemanticValue = MkTokenList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 63: // pattern_attrs_rest -> RPAR
#line 183 "fast.y"
{ CurrentSemanticValue = MkEmptyTokenList(); }
        break;
      case 64: // pattern_attrs_rest -> COMMA, ID, pattern_attrs_rest
#line 184 "fast.y"
{ CurrentSemanticValue = MkTokenList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 65: // expr -> STRING
#line 188 "fast.y"
{ CurrentSemanticValue = MkStringValue(ValueStack[ValueStack.Depth-1]); }
        break;
      case 66: // expr -> NUMBER
#line 189 "fast.y"
{ CurrentSemanticValue = MkNumericValue(ValueStack[ValueStack.Depth-1]); }
        break;
      case 67: // expr -> CHAR
#line 190 "fast.y"
{ CurrentSemanticValue = MkNumericValue(ValueStack[ValueStack.Depth-1]); }
        break;
      case 68: // expr -> TRUE
#line 191 "fast.y"
{ CurrentSemanticValue = MkBoolValue(ValueStack[ValueStack.Depth-1]); }
        break;
      case 69: // expr -> FALSE
#line 192 "fast.y"
{ CurrentSemanticValue = MkBoolValue(ValueStack[ValueStack.Depth-1]); }
        break;
      case 70: // expr -> ID
#line 193 "fast.y"
{ CurrentSemanticValue = MkId(ValueStack[ValueStack.Depth-1]); }
        break;
      case 71: // expr -> LBRACKET, expr_list
#line 194 "fast.y"
{ CurrentSemanticValue = MkRecordExp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 72: // expr -> expr, log_conn, expr
#line 195 "fast.y"
{ CurrentSemanticValue = MkAppExp(ValueStack[ValueStack.Depth-2], MkFExpListFromElems(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1])); }
        break;
      case 73: // expr -> expr, arithm_rel, expr
#line 196 "fast.y"
{ CurrentSemanticValue = MkAppExp(ValueStack[ValueStack.Depth-2], MkFExpListFromElems(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1])); }
        break;
      case 74: // expr -> expr, arithm_op_pm, expr
#line 197 "fast.y"
{ CurrentSemanticValue = MkAppExp(ValueStack[ValueStack.Depth-2], MkFExpListFromElems(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1])); }
        break;
      case 75: // expr -> expr, arithm_op_td, expr
#line 198 "fast.y"
{ CurrentSemanticValue = MkAppExp(ValueStack[ValueStack.Depth-2], MkFExpListFromElems(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1])); }
        break;
      case 76: // expr -> expr, arithm_op, expr
#line 199 "fast.y"
{ CurrentSemanticValue = MkAppExp(ValueStack[ValueStack.Depth-2], MkFExpListFromElems(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1])); }
        break;
      case 77: // expr -> uop, expr
#line 200 "fast.y"
{ CurrentSemanticValue = MkAppExp(ValueStack[ValueStack.Depth-2], MkFExpListFromElems(ValueStack[ValueStack.Depth-1])); }
        break;
      case 78: // expr -> expr, ITE, expr, COLON, expr
#line 201 "fast.y"
{ CurrentSemanticValue = MkAppExp(ValueStack[ValueStack.Depth-4], MkFExpListFromElems(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1])); }
        break;
      case 79: // expr -> LPAR, expr, RPAR
#line 202 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 80: // expr -> LPAR, ID, expr_args
#line 203 "fast.y"
{ CurrentSemanticValue = MkAppExp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 81: // expr -> LPAR, expr, BAR, expr, RPAR
#line 204 "fast.y"
{ CurrentSemanticValue = MkAppExp(ValueStack[ValueStack.Depth-3], MkFExpListFromElems(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2])); }
        break;
      case 82: // expr_args -> RPAR
#line 208 "fast.y"
{ CurrentSemanticValue = MkEmptyFExpList(); }
        break;
      case 83: // expr_args -> expr, expr_args
#line 209 "fast.y"
{ CurrentSemanticValue = MkFExpList(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 102: // expr_list -> RBRACKET
#line 237 "fast.y"
{ CurrentSemanticValue = MkEmptyFExpList(); }
        break;
      case 103: // expr_list -> expr, COMMA, expr_list
#line 238 "fast.y"
{ CurrentSemanticValue = MkFExpList(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 104: // expr_list -> expr, RBRACKET
#line 239 "fast.y"
{ CurrentSemanticValue = MkFExpList(ValueStack[ValueStack.Depth-2], MkEmptyFExpList()); }
        break;
      case 105: // query_expr -> STRING
#line 243 "fast.y"
{ CurrentSemanticValue = MkStringQueryDef(ValueStack[ValueStack.Depth-1]); }
        break;
      case 106: // query_expr -> ID
#line 244 "fast.y"
{ CurrentSemanticValue = MkDisplayQueryDef(ValueStack[ValueStack.Depth-1]); }
        break;
      case 107: // query_expr -> LPAR, GEN_CSHARP, RPAR
#line 245 "fast.y"
{ CurrentSemanticValue = MkGenCodeQueryDef(ValueStack[ValueStack.Depth-2]); }
        break;
      case 108: // query_expr -> bool_query_expr
#line 246 "fast.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
        break;
      case 109: // bool_query_expr -> LPAR, CONTAINS, lang_exp, expr, RPAR
#line 250 "fast.y"
{ CurrentSemanticValue = MkContainsQueryDef(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 110: // bool_query_expr -> LPAR, IS_EMPTY_LANG, lang_exp, RPAR
#line 251 "fast.y"
{ CurrentSemanticValue = MkIsEmptyLangQueryDef(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 111: // bool_query_expr -> LPAR, IS_EMPTY_TRANS, trans_exp, RPAR
#line 252 "fast.y"
{ CurrentSemanticValue = MkIsEmptyTransQueryDef(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 112: // bool_query_expr -> LPAR, TYPECHECK, lang_exp, trans_exp, lang_exp, RPAR
#line 253 "fast.y"
{ CurrentSemanticValue = MkTypecheckQueryDef(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 113: // bool_query_expr -> LPAR, EQ_LANG, lang_exp, lang_exp, RPAR
#line 254 "fast.y"
{ CurrentSemanticValue = MkLangEquivQueryDef(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 114: // bool_query_expr -> LPAR, EQ_TRANS, trans_exp, trans_exp, RPAR
#line 255 "fast.y"
{ CurrentSemanticValue = MkTransEquivQueryDef(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 115: // trans_exp -> LPAR, COMPOSE, trans_exp, trans_exp, RPAR
#line 259 "fast.y"
{ CurrentSemanticValue = MkCompositionExp(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 116: // trans_exp -> LPAR, RESTRICT_INP, trans_exp, lang_exp, RPAR
#line 260 "fast.y"
{ CurrentSemanticValue = MkRestrictionInpExp(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 117: // trans_exp -> LPAR, RESTRICT_OUT, trans_exp, lang_exp, RPAR
#line 261 "fast.y"
{ CurrentSemanticValue = MkRestrictionOutExp(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 118: // trans_exp -> ID
#line 262 "fast.y"
{ CurrentSemanticValue = MkTransNameExp(ValueStack[ValueStack.Depth-1]); }
        break;
      case 119: // lang_exp -> LPAR, INTERSECT, lang_exp, lang_exp, RPAR
#line 266 "fast.y"
{ CurrentSemanticValue = MkIntersectionExp(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 120: // lang_exp -> LPAR, DIFFERENCE, lang_exp, lang_exp, RPAR
#line 267 "fast.y"
{ CurrentSemanticValue = MkDifferenceExp(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 121: // lang_exp -> LPAR, UNION, lang_exp, lang_exp, RPAR
#line 268 "fast.y"
{ CurrentSemanticValue = MkUnionExp(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 122: // lang_exp -> LPAR, DOMAIN, trans_exp, RPAR
#line 269 "fast.y"
{ CurrentSemanticValue = MkDomainExp(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 123: // lang_exp -> LPAR, PRE_IMAGE, trans_exp, lang_exp, RPAR
#line 270 "fast.y"
{ CurrentSemanticValue = MkPreimageExp(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 124: // lang_exp -> LPAR, COMPLEMENT, lang_exp, RPAR
#line 271 "fast.y"
{ CurrentSemanticValue = MkComplementExp(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 125: // lang_exp -> LPAR, MINIMIZE, lang_exp, RPAR
#line 272 "fast.y"
{ CurrentSemanticValue = MkMinimizeExp(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 126: // lang_exp -> ID
#line 273 "fast.y"
{ CurrentSemanticValue = MkLangNameExp(ValueStack[ValueStack.Depth-1]); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
