//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 query.g 2015-10-10 14:19:12

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace Microsoft.Bek.Query
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class queryLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int CHAR=4;
	public const int COMMENT=5;
	public const int ESC_SEQ=6;
	public const int HEX_DIGIT=7;
	public const int HEX_SEQ=8;
	public const int ID=9;
	public const int INT=10;
	public const int LSTRING=11;
	public const int STRING=12;
	public const int UNICODE_SEQ=13;
	public const int WS=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;
	 
	public override void ReportError(RecognitionException e)  
	{
	    throw e; // just rethrow everything... 
	}


    // delegates
    // delegators

	public queryLexer()
	{
		OnCreated();
	}

	public queryLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public queryLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "query.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__15() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__15() {}

    // $ANTLR start "T__15"
    [GrammarRule("T__15")]
    private void mT__15()
    {
    	EnterRule_T__15();
    	EnterRule("T__15", 1);
    	TraceIn("T__15", 1);
    		try
    		{
    		int _type = T__15;
    		int _channel = DefaultTokenChannel;
    		// query.g:15:7: ( '(' )
    		DebugEnterAlt(1);
    		// query.g:15:9: '('
    		{
    		DebugLocation(15, 9);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__15", 1);
    		LeaveRule("T__15", 1);
    		LeaveRule_T__15();
        }
    }
    // $ANTLR end "T__15"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__16() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__16() {}

    // $ANTLR start "T__16"
    [GrammarRule("T__16")]
    private void mT__16()
    {
    	EnterRule_T__16();
    	EnterRule("T__16", 2);
    	TraceIn("T__16", 2);
    		try
    		{
    		int _type = T__16;
    		int _channel = DefaultTokenChannel;
    		// query.g:16:7: ( ')' )
    		DebugEnterAlt(1);
    		// query.g:16:9: ')'
    		{
    		DebugLocation(16, 9);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__16", 2);
    		LeaveRule("T__16", 2);
    		LeaveRule_T__16();
        }
    }
    // $ANTLR end "T__16"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__17() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__17() {}

    // $ANTLR start "T__17"
    [GrammarRule("T__17")]
    private void mT__17()
    {
    	EnterRule_T__17();
    	EnterRule("T__17", 3);
    	TraceIn("T__17", 3);
    		try
    		{
    		int _type = T__17;
    		int _channel = DefaultTokenChannel;
    		// query.g:17:7: ( ',' )
    		DebugEnterAlt(1);
    		// query.g:17:9: ','
    		{
    		DebugLocation(17, 9);
    		Match(','); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__17", 3);
    		LeaveRule("T__17", 3);
    		LeaveRule_T__17();
        }
    }
    // $ANTLR end "T__17"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__18() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__18() {}

    // $ANTLR start "T__18"
    [GrammarRule("T__18")]
    private void mT__18()
    {
    	EnterRule_T__18();
    	EnterRule("T__18", 4);
    	TraceIn("T__18", 4);
    		try
    		{
    		int _type = T__18;
    		int _channel = DefaultTokenChannel;
    		// query.g:18:7: ( ';' )
    		DebugEnterAlt(1);
    		// query.g:18:9: ';'
    		{
    		DebugLocation(18, 9);
    		Match(';'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__18", 4);
    		LeaveRule("T__18", 4);
    		LeaveRule_T__18();
        }
    }
    // $ANTLR end "T__18"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__19() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__19() {}

    // $ANTLR start "T__19"
    [GrammarRule("T__19")]
    private void mT__19()
    {
    	EnterRule_T__19();
    	EnterRule("T__19", 5);
    	TraceIn("T__19", 5);
    		try
    		{
    		int _type = T__19;
    		int _channel = DefaultTokenChannel;
    		// query.g:19:7: ( '=' )
    		DebugEnterAlt(1);
    		// query.g:19:9: '='
    		{
    		DebugLocation(19, 9);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__19", 5);
    		LeaveRule("T__19", 5);
    		LeaveRule_T__19();
        }
    }
    // $ANTLR end "T__19"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__20() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__20() {}

    // $ANTLR start "T__20"
    [GrammarRule("T__20")]
    private void mT__20()
    {
    	EnterRule_T__20();
    	EnterRule("T__20", 6);
    	TraceIn("T__20", 6);
    		try
    		{
    		int _type = T__20;
    		int _channel = DefaultTokenChannel;
    		// query.g:20:7: ( 'complement' )
    		DebugEnterAlt(1);
    		// query.g:20:9: 'complement'
    		{
    		DebugLocation(20, 9);
    		Match("complement"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__20", 6);
    		LeaveRule("T__20", 6);
    		LeaveRule_T__20();
        }
    }
    // $ANTLR end "T__20"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__21() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__21() {}

    // $ANTLR start "T__21"
    [GrammarRule("T__21")]
    private void mT__21()
    {
    	EnterRule_T__21();
    	EnterRule("T__21", 7);
    	TraceIn("T__21", 7);
    		try
    		{
    		int _type = T__21;
    		int _channel = DefaultTokenChannel;
    		// query.g:21:7: ( 'cs' )
    		DebugEnterAlt(1);
    		// query.g:21:9: 'cs'
    		{
    		DebugLocation(21, 9);
    		Match("cs"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__21", 7);
    		LeaveRule("T__21", 7);
    		LeaveRule_T__21();
        }
    }
    // $ANTLR end "T__21"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__22() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__22() {}

    // $ANTLR start "T__22"
    [GrammarRule("T__22")]
    private void mT__22()
    {
    	EnterRule_T__22();
    	EnterRule("T__22", 8);
    	TraceIn("T__22", 8);
    		try
    		{
    		int _type = T__22;
    		int _channel = DefaultTokenChannel;
    		// query.g:22:7: ( 'determinize' )
    		DebugEnterAlt(1);
    		// query.g:22:9: 'determinize'
    		{
    		DebugLocation(22, 9);
    		Match("determinize"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__22", 8);
    		LeaveRule("T__22", 8);
    		LeaveRule_T__22();
        }
    }
    // $ANTLR end "T__22"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__23() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__23() {}

    // $ANTLR start "T__23"
    [GrammarRule("T__23")]
    private void mT__23()
    {
    	EnterRule_T__23();
    	EnterRule("T__23", 9);
    	TraceIn("T__23", 9);
    		try
    		{
    		int _type = T__23;
    		int _channel = DefaultTokenChannel;
    		// query.g:23:7: ( 'display' )
    		DebugEnterAlt(1);
    		// query.g:23:9: 'display'
    		{
    		DebugLocation(23, 9);
    		Match("display"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__23", 9);
    		LeaveRule("T__23", 9);
    		LeaveRule_T__23();
        }
    }
    // $ANTLR end "T__23"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__24() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__24() {}

    // $ANTLR start "T__24"
    [GrammarRule("T__24")]
    private void mT__24()
    {
    	EnterRule_T__24();
    	EnterRule("T__24", 10);
    	TraceIn("T__24", 10);
    		try
    		{
    		int _type = T__24;
    		int _channel = DefaultTokenChannel;
    		// query.g:24:7: ( 'dom' )
    		DebugEnterAlt(1);
    		// query.g:24:9: 'dom'
    		{
    		DebugLocation(24, 9);
    		Match("dom"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__24", 10);
    		LeaveRule("T__24", 10);
    		LeaveRule_T__24();
        }
    }
    // $ANTLR end "T__24"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__25() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__25() {}

    // $ANTLR start "T__25"
    [GrammarRule("T__25")]
    private void mT__25()
    {
    	EnterRule_T__25();
    	EnterRule("T__25", 11);
    	TraceIn("T__25", 11);
    		try
    		{
    		int _type = T__25;
    		int _channel = DefaultTokenChannel;
    		// query.g:25:7: ( 'domain' )
    		DebugEnterAlt(1);
    		// query.g:25:9: 'domain'
    		{
    		DebugLocation(25, 9);
    		Match("domain"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__25", 11);
    		LeaveRule("T__25", 11);
    		LeaveRule_T__25();
        }
    }
    // $ANTLR end "T__25"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__26() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__26() {}

    // $ANTLR start "T__26"
    [GrammarRule("T__26")]
    private void mT__26()
    {
    	EnterRule_T__26();
    	EnterRule("T__26", 12);
    	TraceIn("T__26", 12);
    		try
    		{
    		int _type = T__26;
    		int _channel = DefaultTokenChannel;
    		// query.g:26:7: ( 'dot' )
    		DebugEnterAlt(1);
    		// query.g:26:9: 'dot'
    		{
    		DebugLocation(26, 9);
    		Match("dot"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__26", 12);
    		LeaveRule("T__26", 12);
    		LeaveRule_T__26();
        }
    }
    // $ANTLR end "T__26"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__27() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__27() {}

    // $ANTLR start "T__27"
    [GrammarRule("T__27")]
    private void mT__27()
    {
    	EnterRule_T__27();
    	EnterRule("T__27", 13);
    	TraceIn("T__27", 13);
    		try
    		{
    		int _type = T__27;
    		int _channel = DefaultTokenChannel;
    		// query.g:27:7: ( 'eliminateEpsilons' )
    		DebugEnterAlt(1);
    		// query.g:27:9: 'eliminateEpsilons'
    		{
    		DebugLocation(27, 9);
    		Match("eliminateEpsilons"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__27", 13);
    		LeaveRule("T__27", 13);
    		LeaveRule_T__27();
        }
    }
    // $ANTLR end "T__27"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__28() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__28() {}

    // $ANTLR start "T__28"
    [GrammarRule("T__28")]
    private void mT__28()
    {
    	EnterRule_T__28();
    	EnterRule("T__28", 14);
    	TraceIn("T__28", 14);
    		try
    		{
    		int _type = T__28;
    		int _channel = DefaultTokenChannel;
    		// query.g:28:7: ( 'eq' )
    		DebugEnterAlt(1);
    		// query.g:28:9: 'eq'
    		{
    		DebugLocation(28, 9);
    		Match("eq"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__28", 14);
    		LeaveRule("T__28", 14);
    		LeaveRule_T__28();
        }
    }
    // $ANTLR end "T__28"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__29() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__29() {}

    // $ANTLR start "T__29"
    [GrammarRule("T__29")]
    private void mT__29()
    {
    	EnterRule_T__29();
    	EnterRule("T__29", 15);
    	TraceIn("T__29", 15);
    		try
    		{
    		int _type = T__29;
    		int _channel = DefaultTokenChannel;
    		// query.g:29:7: ( 'eq1' )
    		DebugEnterAlt(1);
    		// query.g:29:9: 'eq1'
    		{
    		DebugLocation(29, 9);
    		Match("eq1"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__29", 15);
    		LeaveRule("T__29", 15);
    		LeaveRule_T__29();
        }
    }
    // $ANTLR end "T__29"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__30() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__30() {}

    // $ANTLR start "T__30"
    [GrammarRule("T__30")]
    private void mT__30()
    {
    	EnterRule_T__30();
    	EnterRule("T__30", 16);
    	TraceIn("T__30", 16);
    		try
    		{
    		int _type = T__30;
    		int _channel = DefaultTokenChannel;
    		// query.g:30:7: ( 'eqB' )
    		DebugEnterAlt(1);
    		// query.g:30:9: 'eqB'
    		{
    		DebugLocation(30, 9);
    		Match("eqB"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__30", 16);
    		LeaveRule("T__30", 16);
    		LeaveRule_T__30();
        }
    }
    // $ANTLR end "T__30"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__31() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__31() {}

    // $ANTLR start "T__31"
    [GrammarRule("T__31")]
    private void mT__31()
    {
    	EnterRule_T__31();
    	EnterRule("T__31", 17);
    	TraceIn("T__31", 17);
    		try
    		{
    		int _type = T__31;
    		int _channel = DefaultTokenChannel;
    		// query.g:31:7: ( 'eqD' )
    		DebugEnterAlt(1);
    		// query.g:31:9: 'eqD'
    		{
    		DebugLocation(31, 9);
    		Match("eqD"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__31", 17);
    		LeaveRule("T__31", 17);
    		LeaveRule_T__31();
        }
    }
    // $ANTLR end "T__31"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__32() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__32() {}

    // $ANTLR start "T__32"
    [GrammarRule("T__32")]
    private void mT__32()
    {
    	EnterRule_T__32();
    	EnterRule("T__32", 18);
    	TraceIn("T__32", 18);
    		try
    		{
    		int _type = T__32;
    		int _channel = DefaultTokenChannel;
    		// query.g:32:7: ( 'eval' )
    		DebugEnterAlt(1);
    		// query.g:32:9: 'eval'
    		{
    		DebugLocation(32, 9);
    		Match("eval"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__32", 18);
    		LeaveRule("T__32", 18);
    		LeaveRule_T__32();
        }
    }
    // $ANTLR end "T__32"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__33() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__33() {}

    // $ANTLR start "T__33"
    [GrammarRule("T__33")]
    private void mT__33()
    {
    	EnterRule_T__33();
    	EnterRule("T__33", 19);
    	TraceIn("T__33", 19);
    		try
    		{
    		int _type = T__33;
    		int _channel = DefaultTokenChannel;
    		// query.g:33:7: ( 'ex' )
    		DebugEnterAlt(1);
    		// query.g:33:9: 'ex'
    		{
    		DebugLocation(33, 9);
    		Match("ex"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__33", 19);
    		LeaveRule("T__33", 19);
    		LeaveRule_T__33();
        }
    }
    // $ANTLR end "T__33"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__34() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__34() {}

    // $ANTLR start "T__34"
    [GrammarRule("T__34")]
    private void mT__34()
    {
    	EnterRule_T__34();
    	EnterRule("T__34", 20);
    	TraceIn("T__34", 20);
    		try
    		{
    		int _type = T__34;
    		int _channel = DefaultTokenChannel;
    		// query.g:34:7: ( 'exB' )
    		DebugEnterAlt(1);
    		// query.g:34:9: 'exB'
    		{
    		DebugLocation(34, 9);
    		Match("exB"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__34", 20);
    		LeaveRule("T__34", 20);
    		LeaveRule_T__34();
        }
    }
    // $ANTLR end "T__34"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__35() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__35() {}

    // $ANTLR start "T__35"
    [GrammarRule("T__35")]
    private void mT__35()
    {
    	EnterRule_T__35();
    	EnterRule("T__35", 21);
    	TraceIn("T__35", 21);
    		try
    		{
    		int _type = T__35;
    		int _channel = DefaultTokenChannel;
    		// query.g:35:7: ( 'explore' )
    		DebugEnterAlt(1);
    		// query.g:35:9: 'explore'
    		{
    		DebugLocation(35, 9);
    		Match("explore"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__35", 21);
    		LeaveRule("T__35", 21);
    		LeaveRule_T__35();
        }
    }
    // $ANTLR end "T__35"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__36() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__36() {}

    // $ANTLR start "T__36"
    [GrammarRule("T__36")]
    private void mT__36()
    {
    	EnterRule_T__36();
    	EnterRule("T__36", 22);
    	TraceIn("T__36", 22);
    		try
    		{
    		int _type = T__36;
    		int _channel = DefaultTokenChannel;
    		// query.g:36:7: ( 'exploreB' )
    		DebugEnterAlt(1);
    		// query.g:36:9: 'exploreB'
    		{
    		DebugLocation(36, 9);
    		Match("exploreB"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__36", 22);
    		LeaveRule("T__36", 22);
    		LeaveRule_T__36();
        }
    }
    // $ANTLR end "T__36"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__37() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__37() {}

    // $ANTLR start "T__37"
    [GrammarRule("T__37")]
    private void mT__37()
    {
    	EnterRule_T__37();
    	EnterRule("T__37", 23);
    	TraceIn("T__37", 23);
    		try
    		{
    		int _type = T__37;
    		int _channel = DefaultTokenChannel;
    		// query.g:37:7: ( 'image' )
    		DebugEnterAlt(1);
    		// query.g:37:9: 'image'
    		{
    		DebugLocation(37, 9);
    		Match("image"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__37", 23);
    		LeaveRule("T__37", 23);
    		LeaveRule_T__37();
        }
    }
    // $ANTLR end "T__37"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__38() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__38() {}

    // $ANTLR start "T__38"
    [GrammarRule("T__38")]
    private void mT__38()
    {
    	EnterRule_T__38();
    	EnterRule("T__38", 24);
    	TraceIn("T__38", 24);
    		try
    		{
    		int _type = T__38;
    		int _channel = DefaultTokenChannel;
    		// query.g:38:7: ( 'in' )
    		DebugEnterAlt(1);
    		// query.g:38:9: 'in'
    		{
    		DebugLocation(38, 9);
    		Match("in"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__38", 24);
    		LeaveRule("T__38", 24);
    		LeaveRule_T__38();
        }
    }
    // $ANTLR end "T__38"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__39() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__39() {}

    // $ANTLR start "T__39"
    [GrammarRule("T__39")]
    private void mT__39()
    {
    	EnterRule_T__39();
    	EnterRule("T__39", 25);
    	TraceIn("T__39", 25);
    		try
    		{
    		int _type = T__39;
    		int _channel = DefaultTokenChannel;
    		// query.g:39:7: ( 'intersect' )
    		DebugEnterAlt(1);
    		// query.g:39:9: 'intersect'
    		{
    		DebugLocation(39, 9);
    		Match("intersect"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__39", 25);
    		LeaveRule("T__39", 25);
    		LeaveRule_T__39();
        }
    }
    // $ANTLR end "T__39"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__40() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__40() {}

    // $ANTLR start "T__40"
    [GrammarRule("T__40")]
    private void mT__40()
    {
    	EnterRule_T__40();
    	EnterRule("T__40", 26);
    	TraceIn("T__40", 26);
    		try
    		{
    		int _type = T__40;
    		int _channel = DefaultTokenChannel;
    		// query.g:40:7: ( 'inv' )
    		DebugEnterAlt(1);
    		// query.g:40:9: 'inv'
    		{
    		DebugLocation(40, 9);
    		Match("inv"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__40", 26);
    		LeaveRule("T__40", 26);
    		LeaveRule_T__40();
        }
    }
    // $ANTLR end "T__40"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__41() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__41() {}

    // $ANTLR start "T__41"
    [GrammarRule("T__41")]
    private void mT__41()
    {
    	EnterRule_T__41();
    	EnterRule("T__41", 27);
    	TraceIn("T__41", 27);
    		try
    		{
    		int _type = T__41;
    		int _channel = DefaultTokenChannel;
    		// query.g:41:7: ( 'invimage' )
    		DebugEnterAlt(1);
    		// query.g:41:9: 'invimage'
    		{
    		DebugLocation(41, 9);
    		Match("invimage"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__41", 27);
    		LeaveRule("T__41", 27);
    		LeaveRule_T__41();
        }
    }
    // $ANTLR end "T__41"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__42() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__42() {}

    // $ANTLR start "T__42"
    [GrammarRule("T__42")]
    private void mT__42()
    {
    	EnterRule_T__42();
    	EnterRule("T__42", 28);
    	TraceIn("T__42", 28);
    		try
    		{
    		int _type = T__42;
    		int _channel = DefaultTokenChannel;
    		// query.g:42:7: ( 'isempty' )
    		DebugEnterAlt(1);
    		// query.g:42:9: 'isempty'
    		{
    		DebugLocation(42, 9);
    		Match("isempty"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__42", 28);
    		LeaveRule("T__42", 28);
    		LeaveRule_T__42();
        }
    }
    // $ANTLR end "T__42"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__43() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__43() {}

    // $ANTLR start "T__43"
    [GrammarRule("T__43")]
    private void mT__43()
    {
    	EnterRule_T__43();
    	EnterRule("T__43", 29);
    	TraceIn("T__43", 29);
    		try
    		{
    		int _type = T__43;
    		int _channel = DefaultTokenChannel;
    		// query.g:43:7: ( 'join' )
    		DebugEnterAlt(1);
    		// query.g:43:9: 'join'
    		{
    		DebugLocation(43, 9);
    		Match("join"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__43", 29);
    		LeaveRule("T__43", 29);
    		LeaveRule_T__43();
        }
    }
    // $ANTLR end "T__43"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__44() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__44() {}

    // $ANTLR start "T__44"
    [GrammarRule("T__44")]
    private void mT__44()
    {
    	EnterRule_T__44();
    	EnterRule("T__44", 30);
    	TraceIn("T__44", 30);
    		try
    		{
    		int _type = T__44;
    		int _channel = DefaultTokenChannel;
    		// query.g:44:7: ( 'js' )
    		DebugEnterAlt(1);
    		// query.g:44:9: 'js'
    		{
    		DebugLocation(44, 9);
    		Match("js"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__44", 30);
    		LeaveRule("T__44", 30);
    		LeaveRule_T__44();
        }
    }
    // $ANTLR end "T__44"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__45() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__45() {}

    // $ANTLR start "T__45"
    [GrammarRule("T__45")]
    private void mT__45()
    {
    	EnterRule_T__45();
    	EnterRule("T__45", 31);
    	TraceIn("T__45", 31);
    		try
    		{
    		int _type = T__45;
    		int _channel = DefaultTokenChannel;
    		// query.g:45:7: ( 'member' )
    		DebugEnterAlt(1);
    		// query.g:45:9: 'member'
    		{
    		DebugLocation(45, 9);
    		Match("member"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__45", 31);
    		LeaveRule("T__45", 31);
    		LeaveRule_T__45();
        }
    }
    // $ANTLR end "T__45"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__46() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__46() {}

    // $ANTLR start "T__46"
    [GrammarRule("T__46")]
    private void mT__46()
    {
    	EnterRule_T__46();
    	EnterRule("T__46", 32);
    	TraceIn("T__46", 32);
    		try
    		{
    		int _type = T__46;
    		int _channel = DefaultTokenChannel;
    		// query.g:46:7: ( 'minimize' )
    		DebugEnterAlt(1);
    		// query.g:46:9: 'minimize'
    		{
    		DebugLocation(46, 9);
    		Match("minimize"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__46", 32);
    		LeaveRule("T__46", 32);
    		LeaveRule_T__46();
        }
    }
    // $ANTLR end "T__46"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__47() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__47() {}

    // $ANTLR start "T__47"
    [GrammarRule("T__47")]
    private void mT__47()
    {
    	EnterRule_T__47();
    	EnterRule("T__47", 33);
    	TraceIn("T__47", 33);
    		try
    		{
    		int _type = T__47;
    		int _channel = DefaultTokenChannel;
    		// query.g:47:7: ( 'minus' )
    		DebugEnterAlt(1);
    		// query.g:47:9: 'minus'
    		{
    		DebugLocation(47, 9);
    		Match("minus"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__47", 33);
    		LeaveRule("T__47", 33);
    		LeaveRule_T__47();
        }
    }
    // $ANTLR end "T__47"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__48() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__48() {}

    // $ANTLR start "T__48"
    [GrammarRule("T__48")]
    private void mT__48()
    {
    	EnterRule_T__48();
    	EnterRule("T__48", 34);
    	TraceIn("T__48", 34);
    		try
    		{
    		int _type = T__48;
    		int _channel = DefaultTokenChannel;
    		// query.g:48:7: ( 'prod' )
    		DebugEnterAlt(1);
    		// query.g:48:9: 'prod'
    		{
    		DebugLocation(48, 9);
    		Match("prod"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__48", 34);
    		LeaveRule("T__48", 34);
    		LeaveRule_T__48();
        }
    }
    // $ANTLR end "T__48"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__49() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__49() {}

    // $ANTLR start "T__49"
    [GrammarRule("T__49")]
    private void mT__49()
    {
    	EnterRule_T__49();
    	EnterRule("T__49", 35);
    	TraceIn("T__49", 35);
    		try
    		{
    		int _type = T__49;
    		int _channel = DefaultTokenChannel;
    		// query.g:49:7: ( 're' )
    		DebugEnterAlt(1);
    		// query.g:49:9: 're'
    		{
    		DebugLocation(49, 9);
    		Match("re"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__49", 35);
    		LeaveRule("T__49", 35);
    		LeaveRule_T__49();
        }
    }
    // $ANTLR end "T__49"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__50() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__50() {}

    // $ANTLR start "T__50"
    [GrammarRule("T__50")]
    private void mT__50()
    {
    	EnterRule_T__50();
    	EnterRule("T__50", 36);
    	TraceIn("T__50", 36);
    		try
    		{
    		int _type = T__50;
    		int _channel = DefaultTokenChannel;
    		// query.g:50:7: ( 'regex' )
    		DebugEnterAlt(1);
    		// query.g:50:9: 'regex'
    		{
    		DebugLocation(50, 9);
    		Match("regex"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__50", 36);
    		LeaveRule("T__50", 36);
    		LeaveRule_T__50();
        }
    }
    // $ANTLR end "T__50"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__51() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__51() {}

    // $ANTLR start "T__51"
    [GrammarRule("T__51")]
    private void mT__51()
    {
    	EnterRule_T__51();
    	EnterRule("T__51", 37);
    	TraceIn("T__51", 37);
    		try
    		{
    		int _type = T__51;
    		int _channel = DefaultTokenChannel;
    		// query.g:51:7: ( 'restrict' )
    		DebugEnterAlt(1);
    		// query.g:51:9: 'restrict'
    		{
    		DebugLocation(51, 9);
    		Match("restrict"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__51", 37);
    		LeaveRule("T__51", 37);
    		LeaveRule_T__51();
        }
    }
    // $ANTLR end "T__51"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__52() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__52() {}

    // $ANTLR start "T__52"
    [GrammarRule("T__52")]
    private void mT__52()
    {
    	EnterRule_T__52();
    	EnterRule("T__52", 38);
    	TraceIn("T__52", 38);
    		try
    		{
    		int _type = T__52;
    		int _channel = DefaultTokenChannel;
    		// query.g:52:7: ( 'subset' )
    		DebugEnterAlt(1);
    		// query.g:52:9: 'subset'
    		{
    		DebugLocation(52, 9);
    		Match("subset"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__52", 38);
    		LeaveRule("T__52", 38);
    		LeaveRule_T__52();
        }
    }
    // $ANTLR end "T__52"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__53() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__53() {}

    // $ANTLR start "T__53"
    [GrammarRule("T__53")]
    private void mT__53()
    {
    	EnterRule_T__53();
    	EnterRule("T__53", 39);
    	TraceIn("T__53", 39);
    		try
    		{
    		int _type = T__53;
    		int _channel = DefaultTokenChannel;
    		// query.g:53:7: ( '~' )
    		DebugEnterAlt(1);
    		// query.g:53:9: '~'
    		{
    		DebugLocation(53, 9);
    		Match('~'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__53", 39);
    		LeaveRule("T__53", 39);
    		LeaveRule_T__53();
        }
    }
    // $ANTLR end "T__53"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ID() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ID() {}

    // $ANTLR start "ID"
    [GrammarRule("ID")]
    private void mID()
    {
    	EnterRule_ID();
    	EnterRule("ID", 40);
    	TraceIn("ID", 40);
    		try
    		{
    		int _type = ID;
    		int _channel = DefaultTokenChannel;
    		// query.g:117:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
    		DebugEnterAlt(1);
    		// query.g:117:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    		{
    		DebugLocation(117, 7);
    		if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(117, 31);
    		// query.g:117:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    		try { DebugEnterSubRule(1);
    		while (true)
    		{
    			int alt1=2;
    			try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    			int LA1_1 = input.LA(1);

    			if (((LA1_1>='0' && LA1_1<='9')||(LA1_1>='A' && LA1_1<='Z')||LA1_1=='_'||(LA1_1>='a' && LA1_1<='z')))
    			{
    				alt1 = 1;
    			}


    			} finally { DebugExitDecision(1); }
    			switch ( alt1 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// query.g:
    				{
    				DebugLocation(117, 31);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop1;
    			}
    		}

    		loop1:
    			;

    		} finally { DebugExitSubRule(1); }


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ID", 40);
    		LeaveRule("ID", 40);
    		LeaveRule_ID();
        }
    }
    // $ANTLR end "ID"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INT() {}

    // $ANTLR start "INT"
    [GrammarRule("INT")]
    private void mINT()
    {
    	EnterRule_INT();
    	EnterRule("INT", 41);
    	TraceIn("INT", 41);
    		try
    		{
    		int _type = INT;
    		int _channel = DefaultTokenChannel;
    		// query.g:120:5: ( '0' ( ( 'x' ( HEX_DIGIT )+ ) | ( '0' .. '9' )* ) | ( '1' .. '9' ) ( '0' .. '9' )* )
    		int alt6=2;
    		try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    		int LA6_1 = input.LA(1);

    		if ((LA6_1=='0'))
    		{
    			alt6 = 1;
    		}
    		else if (((LA6_1>='1' && LA6_1<='9')))
    		{
    			alt6 = 2;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(6); }
    		switch (alt6)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// query.g:120:7: '0' ( ( 'x' ( HEX_DIGIT )+ ) | ( '0' .. '9' )* )
    			{
    			DebugLocation(120, 7);
    			Match('0'); 
    			DebugLocation(120, 11);
    			// query.g:120:11: ( ( 'x' ( HEX_DIGIT )+ ) | ( '0' .. '9' )* )
    			int alt4=2;
    			try { DebugEnterSubRule(4);
    			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    			int LA4_1 = input.LA(1);

    			if ((LA4_1=='x'))
    			{
    				alt4 = 1;
    			}
    			else
    			{
    				alt4 = 2;
    			}
    			} finally { DebugExitDecision(4); }
    			switch (alt4)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// query.g:120:12: ( 'x' ( HEX_DIGIT )+ )
    				{
    				DebugLocation(120, 12);
    				// query.g:120:12: ( 'x' ( HEX_DIGIT )+ )
    				DebugEnterAlt(1);
    				// query.g:120:13: 'x' ( HEX_DIGIT )+
    				{
    				DebugLocation(120, 13);
    				Match('x'); 
    				DebugLocation(120, 17);
    				// query.g:120:17: ( HEX_DIGIT )+
    				int cnt2=0;
    				try { DebugEnterSubRule(2);
    				while (true)
    				{
    					int alt2=2;
    					try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    					int LA2_1 = input.LA(1);

    					if (((LA2_1>='0' && LA2_1<='9')||(LA2_1>='A' && LA2_1<='F')||(LA2_1>='a' && LA2_1<='f')))
    					{
    						alt2 = 1;
    					}


    					} finally { DebugExitDecision(2); }
    					switch (alt2)
    					{
    					case 1:
    						DebugEnterAlt(1);
    						// query.g:
    						{
    						DebugLocation(120, 17);
    						input.Consume();


    						}
    						break;

    					default:
    						if (cnt2 >= 1)
    							goto loop2;

    						EarlyExitException eee2 = new EarlyExitException( 2, input );
    						DebugRecognitionException(eee2);
    						throw eee2;
    					}
    					cnt2++;
    				}
    				loop2:
    					;

    				} finally { DebugExitSubRule(2); }


    				}


    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// query.g:120:33: ( '0' .. '9' )*
    				{
    				DebugLocation(120, 33);
    				// query.g:120:33: ( '0' .. '9' )*
    				try { DebugEnterSubRule(3);
    				while (true)
    				{
    					int alt3=2;
    					try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    					int LA3_1 = input.LA(1);

    					if (((LA3_1>='0' && LA3_1<='9')))
    					{
    						alt3 = 1;
    					}


    					} finally { DebugExitDecision(3); }
    					switch ( alt3 )
    					{
    					case 1:
    						DebugEnterAlt(1);
    						// query.g:
    						{
    						DebugLocation(120, 33);
    						input.Consume();


    						}
    						break;

    					default:
    						goto loop3;
    					}
    				}

    				loop3:
    					;

    				} finally { DebugExitSubRule(3); }


    				}
    				break;

    			}
    			} finally { DebugExitSubRule(4); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// query.g:121:4: ( '1' .. '9' ) ( '0' .. '9' )*
    			{
    			DebugLocation(121, 4);
    			input.Consume();

    			DebugLocation(121, 15);
    			// query.g:121:15: ( '0' .. '9' )*
    			try { DebugEnterSubRule(5);
    			while (true)
    			{
    				int alt5=2;
    				try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    				int LA5_1 = input.LA(1);

    				if (((LA5_1>='0' && LA5_1<='9')))
    				{
    					alt5 = 1;
    				}


    				} finally { DebugExitDecision(5); }
    				switch ( alt5 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// query.g:
    					{
    					DebugLocation(121, 15);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop5;
    				}
    			}

    			loop5:
    				;

    			} finally { DebugExitSubRule(5); }


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INT", 41);
    		LeaveRule("INT", 41);
    		LeaveRule_INT();
        }
    }
    // $ANTLR end "INT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COMMENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COMMENT() {}

    // $ANTLR start "COMMENT"
    [GrammarRule("COMMENT")]
    private void mCOMMENT()
    {
    	EnterRule_COMMENT();
    	EnterRule("COMMENT", 42);
    	TraceIn("COMMENT", 42);
    		try
    		{
    		int _type = COMMENT;
    		int _channel = DefaultTokenChannel;
    		// query.g:125:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
    		int alt10=2;
    		try { DebugEnterDecision(10, decisionCanBacktrack[10]);
    		int LA10_1 = input.LA(1);

    		if ((LA10_1=='/'))
    		{
    			int LA10_2 = input.LA(2);

    			if ((LA10_2=='/'))
    			{
    				alt10 = 1;
    			}
    			else if ((LA10_2=='*'))
    			{
    				alt10 = 2;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 10, 1, input, 2);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 10, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(10); }
    		switch (alt10)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// query.g:125:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    			{
    			DebugLocation(125, 9);
    			Match("//"); 

    			DebugLocation(125, 14);
    			// query.g:125:14: (~ ( '\\n' | '\\r' ) )*
    			try { DebugEnterSubRule(7);
    			while (true)
    			{
    				int alt7=2;
    				try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    				int LA7_1 = input.LA(1);

    				if (((LA7_1>='\u0000' && LA7_1<='\t')||(LA7_1>='\u000B' && LA7_1<='\f')||(LA7_1>='\u000E' && LA7_1<='\uFFFF')))
    				{
    					alt7 = 1;
    				}


    				} finally { DebugExitDecision(7); }
    				switch ( alt7 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// query.g:
    					{
    					DebugLocation(125, 14);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop7;
    				}
    			}

    			loop7:
    				;

    			} finally { DebugExitSubRule(7); }

    			DebugLocation(125, 28);
    			// query.g:125:28: ( '\\r' )?
    			int alt8=2;
    			try { DebugEnterSubRule(8);
    			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    			int LA8_1 = input.LA(1);

    			if ((LA8_1=='\r'))
    			{
    				alt8 = 1;
    			}
    			} finally { DebugExitDecision(8); }
    			switch (alt8)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// query.g:125:28: '\\r'
    				{
    				DebugLocation(125, 28);
    				Match('\r'); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(8); }

    			DebugLocation(125, 34);
    			Match('\n'); 
    			DebugLocation(125, 39);
    			_channel=Hidden;

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// query.g:126:9: '/*' ( options {greedy=false; } : . )* '*/'
    			{
    			DebugLocation(126, 9);
    			Match("/*"); 

    			DebugLocation(126, 14);
    			// query.g:126:14: ( options {greedy=false; } : . )*
    			try { DebugEnterSubRule(9);
    			while (true)
    			{
    				int alt9=2;
    				try { DebugEnterDecision(9, decisionCanBacktrack[9]);
    				int LA9_1 = input.LA(1);

    				if ((LA9_1=='*'))
    				{
    					int LA9_2 = input.LA(2);

    					if ((LA9_2=='/'))
    					{
    						alt9 = 2;
    					}
    					else if (((LA9_2>='\u0000' && LA9_2<='.')||(LA9_2>='0' && LA9_2<='\uFFFF')))
    					{
    						alt9 = 1;
    					}


    				}
    				else if (((LA9_1>='\u0000' && LA9_1<=')')||(LA9_1>='+' && LA9_1<='\uFFFF')))
    				{
    					alt9 = 1;
    				}


    				} finally { DebugExitDecision(9); }
    				switch ( alt9 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// query.g:126:42: .
    					{
    					DebugLocation(126, 42);
    					MatchAny(); 

    					}
    					break;

    				default:
    					goto loop9;
    				}
    			}

    			loop9:
    				;

    			} finally { DebugExitSubRule(9); }

    			DebugLocation(126, 47);
    			Match("*/"); 

    			DebugLocation(126, 52);
    			_channel=Hidden;

    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COMMENT", 42);
    		LeaveRule("COMMENT", 42);
    		LeaveRule_COMMENT();
        }
    }
    // $ANTLR end "COMMENT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WS() {}

    // $ANTLR start "WS"
    [GrammarRule("WS")]
    private void mWS()
    {
    	EnterRule_WS();
    	EnterRule("WS", 43);
    	TraceIn("WS", 43);
    		try
    		{
    		int _type = WS;
    		int _channel = DefaultTokenChannel;
    		// query.g:129:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
    		DebugEnterAlt(1);
    		// query.g:129:9: ( ' ' | '\\t' | '\\r' | '\\n' )
    		{
    		DebugLocation(129, 9);
    		if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(133, 11);
    		_channel=Hidden;

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WS", 43);
    		LeaveRule("WS", 43);
    		LeaveRule_WS();
        }
    }
    // $ANTLR end "WS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_STRING() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_STRING() {}

    // $ANTLR start "STRING"
    [GrammarRule("STRING")]
    private void mSTRING()
    {
    	EnterRule_STRING();
    	EnterRule("STRING", 44);
    	TraceIn("STRING", 44);
    		try
    		{
    		int _type = STRING;
    		int _channel = DefaultTokenChannel;
    		// query.g:137:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
    		DebugEnterAlt(1);
    		// query.g:137:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
    		{
    		DebugLocation(137, 8);
    		Match('\"'); 
    		DebugLocation(137, 12);
    		// query.g:137:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
    		try { DebugEnterSubRule(11);
    		while (true)
    		{
    			int alt11=3;
    			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
    			int LA11_1 = input.LA(1);

    			if ((LA11_1=='\\'))
    			{
    				alt11 = 1;
    			}
    			else if (((LA11_1>='\u0000' && LA11_1<='!')||(LA11_1>='#' && LA11_1<='[')||(LA11_1>=']' && LA11_1<='\uFFFF')))
    			{
    				alt11 = 2;
    			}


    			} finally { DebugExitDecision(11); }
    			switch ( alt11 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// query.g:137:14: ESC_SEQ
    				{
    				DebugLocation(137, 14);
    				mESC_SEQ(); 

    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// query.g:137:24: ~ ( '\\\\' | '\"' )
    				{
    				DebugLocation(137, 24);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop11;
    			}
    		}

    		loop11:
    			;

    		} finally { DebugExitSubRule(11); }

    		DebugLocation(137, 39);
    		Match('\"'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("STRING", 44);
    		LeaveRule("STRING", 44);
    		LeaveRule_STRING();
        }
    }
    // $ANTLR end "STRING"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_LSTRING() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_LSTRING() {}

    // $ANTLR start "LSTRING"
    [GrammarRule("LSTRING")]
    private void mLSTRING()
    {
    	EnterRule_LSTRING();
    	EnterRule("LSTRING", 45);
    	TraceIn("LSTRING", 45);
    		try
    		{
    		int _type = LSTRING;
    		int _channel = DefaultTokenChannel;
    		// query.g:141:5: ( '@' '\"' (~ ( '\"' ) )* '\"' )
    		DebugEnterAlt(1);
    		// query.g:141:8: '@' '\"' (~ ( '\"' ) )* '\"'
    		{
    		DebugLocation(141, 8);
    		Match('@'); 
    		DebugLocation(141, 12);
    		Match('\"'); 
    		DebugLocation(141, 16);
    		// query.g:141:16: (~ ( '\"' ) )*
    		try { DebugEnterSubRule(12);
    		while (true)
    		{
    			int alt12=2;
    			try { DebugEnterDecision(12, decisionCanBacktrack[12]);
    			int LA12_1 = input.LA(1);

    			if (((LA12_1>='\u0000' && LA12_1<='!')||(LA12_1>='#' && LA12_1<='\uFFFF')))
    			{
    				alt12 = 1;
    			}


    			} finally { DebugExitDecision(12); }
    			switch ( alt12 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// query.g:
    				{
    				DebugLocation(141, 16);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop12;
    			}
    		}

    		loop12:
    			;

    		} finally { DebugExitSubRule(12); }

    		DebugLocation(141, 26);
    		Match('\"'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("LSTRING", 45);
    		LeaveRule("LSTRING", 45);
    		LeaveRule_LSTRING();
        }
    }
    // $ANTLR end "LSTRING"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CHAR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CHAR() {}

    // $ANTLR start "CHAR"
    [GrammarRule("CHAR")]
    private void mCHAR()
    {
    	EnterRule_CHAR();
    	EnterRule("CHAR", 46);
    	TraceIn("CHAR", 46);
    		try
    		{
    		int _type = CHAR;
    		int _channel = DefaultTokenChannel;
    		// query.g:145:2: ( '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\'' )
    		DebugEnterAlt(1);
    		// query.g:145:5: '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\''
    		{
    		DebugLocation(145, 5);
    		Match('\''); 
    		DebugLocation(145, 10);
    		// query.g:145:10: ( ESC_SEQ |~ ( '\\'' | '\\\\' ) )
    		int alt13=2;
    		try { DebugEnterSubRule(13);
    		try { DebugEnterDecision(13, decisionCanBacktrack[13]);
    		int LA13_1 = input.LA(1);

    		if ((LA13_1=='\\'))
    		{
    			alt13 = 1;
    		}
    		else if (((LA13_1>='\u0000' && LA13_1<='&')||(LA13_1>='(' && LA13_1<='[')||(LA13_1>=']' && LA13_1<='\uFFFF')))
    		{
    			alt13 = 2;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(13); }
    		switch (alt13)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// query.g:145:12: ESC_SEQ
    			{
    			DebugLocation(145, 12);
    			mESC_SEQ(); 

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// query.g:145:22: ~ ( '\\'' | '\\\\' )
    			{
    			DebugLocation(145, 22);
    			input.Consume();


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(13); }

    		DebugLocation(145, 38);
    		Match('\''); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CHAR", 46);
    		LeaveRule("CHAR", 46);
    		LeaveRule_CHAR();
        }
    }
    // $ANTLR end "CHAR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ESC_SEQ() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ESC_SEQ() {}

    // $ANTLR start "ESC_SEQ"
    [GrammarRule("ESC_SEQ")]
    private void mESC_SEQ()
    {
    	EnterRule_ESC_SEQ();
    	EnterRule("ESC_SEQ", 47);
    	TraceIn("ESC_SEQ", 47);
    		try
    		{
    		// query.g:151:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_SEQ | HEX_SEQ )
    		int alt14=3;
    		try { DebugEnterDecision(14, decisionCanBacktrack[14]);
    		int LA14_1 = input.LA(1);

    		if ((LA14_1=='\\'))
    		{
    			switch (input.LA(2))
    			{
    			case '\"':
    			case '\'':
    			case '\\':
    			case 'b':
    			case 'f':
    			case 'n':
    			case 'r':
    			case 't':
    				{
    				alt14 = 1;
    				}
    				break;
    			case 'u':
    				{
    				alt14 = 2;
    				}
    				break;
    			case 'x':
    				{
    				alt14 = 3;
    				}
    				break;
    			default:
    				{
    					NoViableAltException nvae = new NoViableAltException("", 14, 1, input, 2);
    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}

    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(14); }
    		switch (alt14)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// query.g:151:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    			{
    			DebugLocation(151, 9);
    			Match('\\'); 
    			DebugLocation(151, 14);
    			input.Consume();


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// query.g:152:9: UNICODE_SEQ
    			{
    			DebugLocation(152, 9);
    			mUNICODE_SEQ(); 

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// query.g:153:6: HEX_SEQ
    			{
    			DebugLocation(153, 6);
    			mHEX_SEQ(); 

    			}
    			break;

    		}
    	}
    	finally
    	{
    		TraceOut("ESC_SEQ", 47);
    		LeaveRule("ESC_SEQ", 47);
    		LeaveRule_ESC_SEQ();
        }
    }
    // $ANTLR end "ESC_SEQ"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_HEX_DIGIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_HEX_DIGIT() {}

    // $ANTLR start "HEX_DIGIT"
    [GrammarRule("HEX_DIGIT")]
    private void mHEX_DIGIT()
    {
    	EnterRule_HEX_DIGIT();
    	EnterRule("HEX_DIGIT", 48);
    	TraceIn("HEX_DIGIT", 48);
    		try
    		{
    		// query.g:157:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    		DebugEnterAlt(1);
    		// query.g:
    		{
    		DebugLocation(157, 11);
    		if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("HEX_DIGIT", 48);
    		LeaveRule("HEX_DIGIT", 48);
    		LeaveRule_HEX_DIGIT();
        }
    }
    // $ANTLR end "HEX_DIGIT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_UNICODE_SEQ() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_UNICODE_SEQ() {}

    // $ANTLR start "UNICODE_SEQ"
    [GrammarRule("UNICODE_SEQ")]
    private void mUNICODE_SEQ()
    {
    	EnterRule_UNICODE_SEQ();
    	EnterRule("UNICODE_SEQ", 49);
    	TraceIn("UNICODE_SEQ", 49);
    		try
    		{
    		// query.g:162:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
    		DebugEnterAlt(1);
    		// query.g:162:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    		{
    		DebugLocation(162, 9);
    		Match('\\'); 
    		DebugLocation(162, 14);
    		Match('u'); 
    		DebugLocation(162, 18);
    		mHEX_DIGIT(); 
    		DebugLocation(162, 28);
    		mHEX_DIGIT(); 
    		DebugLocation(162, 38);
    		mHEX_DIGIT(); 
    		DebugLocation(162, 48);
    		mHEX_DIGIT(); 

    		}

    	}
    	finally
    	{
    		TraceOut("UNICODE_SEQ", 49);
    		LeaveRule("UNICODE_SEQ", 49);
    		LeaveRule_UNICODE_SEQ();
        }
    }
    // $ANTLR end "UNICODE_SEQ"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_HEX_SEQ() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_HEX_SEQ() {}

    // $ANTLR start "HEX_SEQ"
    [GrammarRule("HEX_SEQ")]
    private void mHEX_SEQ()
    {
    	EnterRule_HEX_SEQ();
    	EnterRule("HEX_SEQ", 50);
    	TraceIn("HEX_SEQ", 50);
    		try
    		{
    		// query.g:167:2: ( '\\\\' 'x' HEX_DIGIT HEX_DIGIT )
    		DebugEnterAlt(1);
    		// query.g:167:4: '\\\\' 'x' HEX_DIGIT HEX_DIGIT
    		{
    		DebugLocation(167, 4);
    		Match('\\'); 
    		DebugLocation(167, 9);
    		Match('x'); 
    		DebugLocation(167, 13);
    		mHEX_DIGIT(); 
    		DebugLocation(167, 23);
    		mHEX_DIGIT(); 

    		}

    	}
    	finally
    	{
    		TraceOut("HEX_SEQ", 50);
    		LeaveRule("HEX_SEQ", 50);
    		LeaveRule_HEX_SEQ();
        }
    }
    // $ANTLR end "HEX_SEQ"

    public override void mTokens()
    {
    	// query.g:1:8: ( T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | ID | INT | COMMENT | WS | STRING | LSTRING | CHAR )
    	int alt15=46;
    	try { DebugEnterDecision(15, decisionCanBacktrack[15]);
    	try
    	{
    		alt15 = dfa15.Predict(input);
    	}
    	catch (NoViableAltException nvae)
    	{
    		DebugRecognitionException(nvae);
    		throw;
    	}
    	} finally { DebugExitDecision(15); }
    	switch (alt15)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// query.g:1:10: T__15
    		{
    		DebugLocation(1, 10);
    		mT__15(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// query.g:1:16: T__16
    		{
    		DebugLocation(1, 16);
    		mT__16(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// query.g:1:22: T__17
    		{
    		DebugLocation(1, 22);
    		mT__17(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// query.g:1:28: T__18
    		{
    		DebugLocation(1, 28);
    		mT__18(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// query.g:1:34: T__19
    		{
    		DebugLocation(1, 34);
    		mT__19(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// query.g:1:40: T__20
    		{
    		DebugLocation(1, 40);
    		mT__20(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// query.g:1:46: T__21
    		{
    		DebugLocation(1, 46);
    		mT__21(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// query.g:1:52: T__22
    		{
    		DebugLocation(1, 52);
    		mT__22(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// query.g:1:58: T__23
    		{
    		DebugLocation(1, 58);
    		mT__23(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// query.g:1:64: T__24
    		{
    		DebugLocation(1, 64);
    		mT__24(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// query.g:1:70: T__25
    		{
    		DebugLocation(1, 70);
    		mT__25(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// query.g:1:76: T__26
    		{
    		DebugLocation(1, 76);
    		mT__26(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// query.g:1:82: T__27
    		{
    		DebugLocation(1, 82);
    		mT__27(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// query.g:1:88: T__28
    		{
    		DebugLocation(1, 88);
    		mT__28(); 

    		}
    		break;
    	case 15:
    		DebugEnterAlt(15);
    		// query.g:1:94: T__29
    		{
    		DebugLocation(1, 94);
    		mT__29(); 

    		}
    		break;
    	case 16:
    		DebugEnterAlt(16);
    		// query.g:1:100: T__30
    		{
    		DebugLocation(1, 100);
    		mT__30(); 

    		}
    		break;
    	case 17:
    		DebugEnterAlt(17);
    		// query.g:1:106: T__31
    		{
    		DebugLocation(1, 106);
    		mT__31(); 

    		}
    		break;
    	case 18:
    		DebugEnterAlt(18);
    		// query.g:1:112: T__32
    		{
    		DebugLocation(1, 112);
    		mT__32(); 

    		}
    		break;
    	case 19:
    		DebugEnterAlt(19);
    		// query.g:1:118: T__33
    		{
    		DebugLocation(1, 118);
    		mT__33(); 

    		}
    		break;
    	case 20:
    		DebugEnterAlt(20);
    		// query.g:1:124: T__34
    		{
    		DebugLocation(1, 124);
    		mT__34(); 

    		}
    		break;
    	case 21:
    		DebugEnterAlt(21);
    		// query.g:1:130: T__35
    		{
    		DebugLocation(1, 130);
    		mT__35(); 

    		}
    		break;
    	case 22:
    		DebugEnterAlt(22);
    		// query.g:1:136: T__36
    		{
    		DebugLocation(1, 136);
    		mT__36(); 

    		}
    		break;
    	case 23:
    		DebugEnterAlt(23);
    		// query.g:1:142: T__37
    		{
    		DebugLocation(1, 142);
    		mT__37(); 

    		}
    		break;
    	case 24:
    		DebugEnterAlt(24);
    		// query.g:1:148: T__38
    		{
    		DebugLocation(1, 148);
    		mT__38(); 

    		}
    		break;
    	case 25:
    		DebugEnterAlt(25);
    		// query.g:1:154: T__39
    		{
    		DebugLocation(1, 154);
    		mT__39(); 

    		}
    		break;
    	case 26:
    		DebugEnterAlt(26);
    		// query.g:1:160: T__40
    		{
    		DebugLocation(1, 160);
    		mT__40(); 

    		}
    		break;
    	case 27:
    		DebugEnterAlt(27);
    		// query.g:1:166: T__41
    		{
    		DebugLocation(1, 166);
    		mT__41(); 

    		}
    		break;
    	case 28:
    		DebugEnterAlt(28);
    		// query.g:1:172: T__42
    		{
    		DebugLocation(1, 172);
    		mT__42(); 

    		}
    		break;
    	case 29:
    		DebugEnterAlt(29);
    		// query.g:1:178: T__43
    		{
    		DebugLocation(1, 178);
    		mT__43(); 

    		}
    		break;
    	case 30:
    		DebugEnterAlt(30);
    		// query.g:1:184: T__44
    		{
    		DebugLocation(1, 184);
    		mT__44(); 

    		}
    		break;
    	case 31:
    		DebugEnterAlt(31);
    		// query.g:1:190: T__45
    		{
    		DebugLocation(1, 190);
    		mT__45(); 

    		}
    		break;
    	case 32:
    		DebugEnterAlt(32);
    		// query.g:1:196: T__46
    		{
    		DebugLocation(1, 196);
    		mT__46(); 

    		}
    		break;
    	case 33:
    		DebugEnterAlt(33);
    		// query.g:1:202: T__47
    		{
    		DebugLocation(1, 202);
    		mT__47(); 

    		}
    		break;
    	case 34:
    		DebugEnterAlt(34);
    		// query.g:1:208: T__48
    		{
    		DebugLocation(1, 208);
    		mT__48(); 

    		}
    		break;
    	case 35:
    		DebugEnterAlt(35);
    		// query.g:1:214: T__49
    		{
    		DebugLocation(1, 214);
    		mT__49(); 

    		}
    		break;
    	case 36:
    		DebugEnterAlt(36);
    		// query.g:1:220: T__50
    		{
    		DebugLocation(1, 220);
    		mT__50(); 

    		}
    		break;
    	case 37:
    		DebugEnterAlt(37);
    		// query.g:1:226: T__51
    		{
    		DebugLocation(1, 226);
    		mT__51(); 

    		}
    		break;
    	case 38:
    		DebugEnterAlt(38);
    		// query.g:1:232: T__52
    		{
    		DebugLocation(1, 232);
    		mT__52(); 

    		}
    		break;
    	case 39:
    		DebugEnterAlt(39);
    		// query.g:1:238: T__53
    		{
    		DebugLocation(1, 238);
    		mT__53(); 

    		}
    		break;
    	case 40:
    		DebugEnterAlt(40);
    		// query.g:1:244: ID
    		{
    		DebugLocation(1, 244);
    		mID(); 

    		}
    		break;
    	case 41:
    		DebugEnterAlt(41);
    		// query.g:1:247: INT
    		{
    		DebugLocation(1, 247);
    		mINT(); 

    		}
    		break;
    	case 42:
    		DebugEnterAlt(42);
    		// query.g:1:251: COMMENT
    		{
    		DebugLocation(1, 251);
    		mCOMMENT(); 

    		}
    		break;
    	case 43:
    		DebugEnterAlt(43);
    		// query.g:1:259: WS
    		{
    		DebugLocation(1, 259);
    		mWS(); 

    		}
    		break;
    	case 44:
    		DebugEnterAlt(44);
    		// query.g:1:262: STRING
    		{
    		DebugLocation(1, 262);
    		mSTRING(); 

    		}
    		break;
    	case 45:
    		DebugEnterAlt(45);
    		// query.g:1:269: LSTRING
    		{
    		DebugLocation(1, 269);
    		mLSTRING(); 

    		}
    		break;
    	case 46:
    		DebugEnterAlt(46);
    		// query.g:1:277: CHAR
    		{
    		DebugLocation(1, 277);
    		mCHAR(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA15 dfa15;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa15 = new DFA15(this);
	}

	private class DFA15 : DFA
	{
		private const string DFA15_eotS =
			"\x6\xFFFF\x9\x10\x8\xFFFF\x1\x10\x1\x2B\x4\x10\x1\x34\x1\x10\x1\x38\x1"+
			"\x10\x1\x3C\x2\x10\x1\x3F\x3\x10\x1\x45\x2\x10\x1\xFFFF\x2\x10\x1\x4B"+
			"\x1\x4C\x1\x10\x1\x4E\x1\x4F\x1\x50\x1\xFFFF\x1\x10\x1\x52\x1\x10\x1"+
			"\xFFFF\x2\x10\x1\x57\x1\xFFFF\x2\x10\x1\xFFFF\x5\x10\x1\xFFFF\x5\x10"+
			"\x2\xFFFF\x1\x10\x3\xFFFF\x1\x66\x1\xFFFF\x4\x10\x1\xFFFF\x1\x10\x1\x6C"+
			"\x3\x10\x1\x70\x8\x10\x1\xFFFF\x1\x10\x1\x7A\x3\x10\x1\xFFFF\x2\x10\x1"+
			"\x80\x1\xFFFF\x1\x81\x5\x10\x1\x87\x2\x10\x1\xFFFF\x3\x10\x1\x8D\x1\x10"+
			"\x2\xFFFF\x1\x10\x1\x90\x2\x10\x1\x93\x1\xFFFF\x1\x10\x1\x96\x2\x10\x1"+
			"\x99\x1\xFFFF\x2\x10\x1\xFFFF\x2\x10\x1\xFFFF\x1\x10\x1\x9F\x1\xFFFF"+
			"\x1\x10\x1\xA1\x1\xFFFF\x1\xA2\x1\xA3\x3\x10\x1\xFFFF\x1\xA7\x3\xFFFF"+
			"\x1\xA8\x2\x10\x2\xFFFF\x1\xAB\x1\x10\x1\xFFFF\x5\x10\x1\xB2\x1\xFFFF";
		private const string DFA15_eofS =
			"\xB3\xFFFF";
		private const string DFA15_minS =
			"\x1\x9\x5\xFFFF\x1\x6F\x1\x65\x1\x6C\x1\x6D\x1\x6F\x1\x65\x1\x72\x1\x65"+
			"\x1\x75\x8\xFFFF\x1\x6D\x1\x30\x1\x74\x1\x73\x1\x6D\x1\x69\x1\x30\x1"+
			"\x61\x1\x30\x1\x61\x1\x30\x1\x65\x1\x69\x1\x30\x1\x6D\x1\x6E\x1\x6F\x1"+
			"\x30\x1\x62\x1\x70\x1\xFFFF\x1\x65\x1\x70\x2\x30\x1\x6D\x3\x30\x1\xFFFF"+
			"\x1\x6C\x1\x30\x1\x6C\x1\xFFFF\x1\x67\x1\x65\x1\x30\x1\xFFFF\x1\x6D\x1"+
			"\x6E\x1\xFFFF\x1\x62\x1\x69\x1\x64\x1\x65\x1\x74\x1\xFFFF\x1\x73\x1\x6C"+
			"\x1\x72\x1\x6C\x1\x69\x2\xFFFF\x1\x69\x3\xFFFF\x1\x30\x1\xFFFF\x1\x6F"+
			"\x1\x65\x1\x72\x1\x6D\x1\xFFFF\x1\x70\x1\x30\x1\x65\x1\x6D\x1\x73\x1"+
			"\x30\x1\x78\x1\x72\x2\x65\x1\x6D\x1\x61\x2\x6E\x1\xFFFF\x1\x72\x1\x30"+
			"\x1\x73\x1\x61\x1\x74\x1\xFFFF\x1\x72\x1\x69\x1\x30\x1\xFFFF\x1\x30\x1"+
			"\x69\x1\x74\x1\x6D\x1\x69\x1\x79\x1\x30\x1\x61\x1\x65\x1\xFFFF\x1\x65"+
			"\x1\x67\x1\x79\x1\x30\x1\x7A\x2\xFFFF\x1\x63\x1\x30\x1\x65\x1\x6E\x1"+
			"\x30\x1\xFFFF\x1\x74\x1\x30\x1\x63\x1\x65\x1\x30\x1\xFFFF\x1\x65\x1\x74"+
			"\x1\xFFFF\x1\x6E\x1\x69\x1\xFFFF\x1\x65\x1\x30\x1\xFFFF\x1\x74\x1\x30"+
			"\x1\xFFFF\x2\x30\x1\x74\x1\x7A\x1\x45\x1\xFFFF\x1\x30\x3\xFFFF\x1\x30"+
			"\x1\x65\x1\x70\x2\xFFFF\x1\x30\x1\x73\x1\xFFFF\x1\x69\x1\x6C\x1\x6F\x1"+
			"\x6E\x1\x73\x1\x30\x1\xFFFF";
		private const string DFA15_maxS =
			"\x1\x7E\x5\xFFFF\x1\x73\x1\x6F\x1\x78\x2\x73\x1\x69\x1\x72\x1\x65\x1"+
			"\x75\x8\xFFFF\x1\x6D\x1\x7A\x1\x74\x1\x73\x1\x74\x1\x69\x1\x7A\x1\x61"+
			"\x1\x7A\x1\x61\x1\x7A\x1\x65\x1\x69\x1\x7A\x1\x6D\x1\x6E\x1\x6F\x1\x7A"+
			"\x1\x62\x1\x70\x1\xFFFF\x1\x65\x1\x70\x2\x7A\x1\x6D\x3\x7A\x1\xFFFF\x1"+
			"\x6C\x1\x7A\x1\x6C\x1\xFFFF\x1\x67\x1\x65\x1\x7A\x1\xFFFF\x1\x6D\x1\x6E"+
			"\x1\xFFFF\x1\x62\x1\x75\x1\x64\x1\x65\x1\x74\x1\xFFFF\x1\x73\x1\x6C\x1"+
			"\x72\x1\x6C\x1\x69\x2\xFFFF\x1\x69\x3\xFFFF\x1\x7A\x1\xFFFF\x1\x6F\x1"+
			"\x65\x1\x72\x1\x6D\x1\xFFFF\x1\x70\x1\x7A\x1\x65\x1\x6D\x1\x73\x1\x7A"+
			"\x1\x78\x1\x72\x2\x65\x1\x6D\x1\x61\x2\x6E\x1\xFFFF\x1\x72\x1\x7A\x1"+
			"\x73\x1\x61\x1\x74\x1\xFFFF\x1\x72\x1\x69\x1\x7A\x1\xFFFF\x1\x7A\x1\x69"+
			"\x1\x74\x1\x6D\x1\x69\x1\x79\x1\x7A\x1\x61\x1\x65\x1\xFFFF\x1\x65\x1"+
			"\x67\x1\x79\x2\x7A\x2\xFFFF\x1\x63\x1\x7A\x1\x65\x1\x6E\x1\x7A\x1\xFFFF"+
			"\x1\x74\x1\x7A\x1\x63\x1\x65\x1\x7A\x1\xFFFF\x1\x65\x1\x74\x1\xFFFF\x1"+
			"\x6E\x1\x69\x1\xFFFF\x1\x65\x1\x7A\x1\xFFFF\x1\x74\x1\x7A\x1\xFFFF\x2"+
			"\x7A\x1\x74\x1\x7A\x1\x45\x1\xFFFF\x1\x7A\x3\xFFFF\x1\x7A\x1\x65\x1\x70"+
			"\x2\xFFFF\x1\x7A\x1\x73\x1\xFFFF\x1\x69\x1\x6C\x1\x6F\x1\x6E\x1\x73\x1"+
			"\x7A\x1\xFFFF";
		private const string DFA15_acceptS =
			"\x1\xFFFF\x1\x1\x1\x2\x1\x3\x1\x4\x1\x5\x9\xFFFF\x1\x27\x1\x28\x1\x29"+
			"\x1\x2A\x1\x2B\x1\x2C\x1\x2D\x1\x2E\x14\xFFFF\x1\x7\x8\xFFFF\x1\xE\x3"+
			"\xFFFF\x1\x13\x3\xFFFF\x1\x18\x2\xFFFF\x1\x1E\x5\xFFFF\x1\x23\x5\xFFFF"+
			"\x1\xA\x1\xC\x1\xFFFF\x1\xF\x1\x10\x1\x11\x1\xFFFF\x1\x14\x4\xFFFF\x1"+
			"\x1A\xE\xFFFF\x1\x12\x5\xFFFF\x1\x1D\x3\xFFFF\x1\x22\x9\xFFFF\x1\x17"+
			"\x5\xFFFF\x1\x21\x1\x24\x5\xFFFF\x1\xB\x5\xFFFF\x1\x1F\x2\xFFFF\x1\x26"+
			"\x2\xFFFF\x1\x9\x2\xFFFF\x1\x15\x2\xFFFF\x1\x1C\x5\xFFFF\x1\x16\x1\xFFFF"+
			"\x1\x1B\x1\x20\x1\x25\x3\xFFFF\x1\x19\x1\x6\x2\xFFFF\x1\x8\x6\xFFFF\x1"+
			"\xD";
		private const string DFA15_specialS =
			"\xB3\xFFFF}>";
		private static readonly string[] DFA15_transitionS =
			{
				"\x2\x13\x2\xFFFF\x1\x13\x12\xFFFF\x1\x13\x1\xFFFF\x1\x14\x4\xFFFF\x1"+
				"\x16\x1\x1\x1\x2\x2\xFFFF\x1\x3\x2\xFFFF\x1\x12\xA\x11\x1\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x5\x2\xFFFF\x1\x15\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x2"+
				"\x10\x1\x6\x1\x7\x1\x8\x3\x10\x1\x9\x1\xA\x2\x10\x1\xB\x2\x10\x1\xC"+
				"\x1\x10\x1\xD\x1\xE\x7\x10\x3\xFFFF\x1\xF",
				"",
				"",
				"",
				"",
				"",
				"\x1\x17\x3\xFFFF\x1\x18",
				"\x1\x19\x3\xFFFF\x1\x1A\x5\xFFFF\x1\x1B",
				"\x1\x1C\x4\xFFFF\x1\x1D\x4\xFFFF\x1\x1E\x1\xFFFF\x1\x1F",
				"\x1\x20\x1\x21\x4\xFFFF\x1\x22",
				"\x1\x23\x3\xFFFF\x1\x24",
				"\x1\x25\x3\xFFFF\x1\x26",
				"\x1\x27",
				"\x1\x28",
				"\x1\x29",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x2A",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x2C",
				"\x1\x2D",
				"\x1\x2E\x6\xFFFF\x1\x2F",
				"\x1\x30",
				"\x1\x10\x1\x31\x8\x10\x7\xFFFF\x1\x10\x1\x32\x1\x10\x1\x33\x16\x10\x4"+
				"\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x35",
				"\xA\x10\x7\xFFFF\x1\x10\x1\x36\x18\x10\x4\xFFFF\x1\x10\x1\xFFFF\xF\x10"+
				"\x1\x37\xA\x10",
				"\x1\x39",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x13\x10\x1\x3A\x1"+
				"\x10\x1\x3B\x4\x10",
				"\x1\x3D",
				"\x1\x3E",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x40",
				"\x1\x41",
				"\x1\x42",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x6\x10\x1\x43\xB\x10"+
				"\x1\x44\x7\x10",
				"\x1\x46",
				"\x1\x47",
				"",
				"\x1\x48",
				"\x1\x49",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1\x4A\x19\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x4D",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"\x1\x51",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x53",
				"",
				"\x1\x54",
				"\x1\x55",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x8\x10\x1\x56\x11"+
				"\x10",
				"",
				"\x1\x58",
				"\x1\x59",
				"",
				"\x1\x5A",
				"\x1\x5B\xB\xFFFF\x1\x5C",
				"\x1\x5D",
				"\x1\x5E",
				"\x1\x5F",
				"",
				"\x1\x60",
				"\x1\x61",
				"\x1\x62",
				"\x1\x63",
				"\x1\x64",
				"",
				"",
				"\x1\x65",
				"",
				"",
				"",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"\x1\x67",
				"\x1\x68",
				"\x1\x69",
				"\x1\x6A",
				"",
				"\x1\x6B",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x6D",
				"\x1\x6E",
				"\x1\x6F",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x71",
				"\x1\x72",
				"\x1\x73",
				"\x1\x74",
				"\x1\x75",
				"\x1\x76",
				"\x1\x77",
				"\x1\x78",
				"",
				"\x1\x79",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x7B",
				"\x1\x7C",
				"\x1\x7D",
				"",
				"\x1\x7E",
				"\x1\x7F",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x82",
				"\x1\x83",
				"\x1\x84",
				"\x1\x85",
				"\x1\x86",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x88",
				"\x1\x89",
				"",
				"\x1\x8A",
				"\x1\x8B",
				"\x1\x8C",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x8E",
				"",
				"",
				"\x1\x8F",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\x91",
				"\x1\x92",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"\x1\x94",
				"\xA\x10\x7\xFFFF\x1\x10\x1\x95\x18\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A"+
				"\x10",
				"\x1\x97",
				"\x1\x98",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"\x1\x9A",
				"\x1\x9B",
				"",
				"\x1\x9C",
				"\x1\x9D",
				"",
				"\x1\x9E",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"\x1\xA0",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\xA4",
				"\x1\xA5",
				"\x1\xA6",
				"",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"",
				"",
				"",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\xA9",
				"\x1\xAA",
				"",
				"",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				"\x1\xAC",
				"",
				"\x1\xAD",
				"\x1\xAE",
				"\x1\xAF",
				"\x1\xB0",
				"\x1\xB1",
				"\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1\xFFFF\x1A\x10",
				""
			};

		private static readonly short[] DFA15_eot = DFA.UnpackEncodedString(DFA15_eotS);
		private static readonly short[] DFA15_eof = DFA.UnpackEncodedString(DFA15_eofS);
		private static readonly char[] DFA15_min = DFA.UnpackEncodedStringToUnsignedChars(DFA15_minS);
		private static readonly char[] DFA15_max = DFA.UnpackEncodedStringToUnsignedChars(DFA15_maxS);
		private static readonly short[] DFA15_accept = DFA.UnpackEncodedString(DFA15_acceptS);
		private static readonly short[] DFA15_special = DFA.UnpackEncodedString(DFA15_specialS);
		private static readonly short[][] DFA15_transition;

		static DFA15()
		{
			int numStates = DFA15_transitionS.Length;
			DFA15_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA15_transition[i] = DFA.UnpackEncodedString(DFA15_transitionS[i]);
			}
		}

		public DFA15( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 15;
			this.eot = DFA15_eot;
			this.eof = DFA15_eof;
			this.min = DFA15_min;
			this.max = DFA15_max;
			this.accept = DFA15_accept;
			this.special = DFA15_special;
			this.transition = DFA15_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__15 | T__16 | T__17 | T__18 | T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | T__50 | T__51 | T__52 | T__53 | ID | INT | COMMENT | WS | STRING | LSTRING | CHAR );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace Microsoft.Bek.Query
