//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 query.g 2015-10-10 14:19:12

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591

 
using System.Collections.Generic;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace Microsoft.Bek.Query
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class queryParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CHAR", "COMMENT", "ESC_SEQ", "HEX_DIGIT", "HEX_SEQ", "ID", "INT", "LSTRING", "STRING", "UNICODE_SEQ", "WS", "'('", "')'", "','", "';'", "'='", "'complement'", "'cs'", "'determinize'", "'display'", "'dom'", "'domain'", "'dot'", "'eliminateEpsilons'", "'eq'", "'eq1'", "'eqB'", "'eqD'", "'eval'", "'ex'", "'exB'", "'explore'", "'exploreB'", "'image'", "'in'", "'intersect'", "'inv'", "'invimage'", "'isempty'", "'join'", "'js'", "'member'", "'minimize'", "'minus'", "'prod'", "'re'", "'regex'", "'restrict'", "'subset'", "'~'"
	};
	public const int EOF=-1;
	public const int CHAR=4;
	public const int COMMENT=5;
	public const int ESC_SEQ=6;
	public const int HEX_DIGIT=7;
	public const int HEX_SEQ=8;
	public const int ID=9;
	public const int INT=10;
	public const int LSTRING=11;
	public const int STRING=12;
	public const int UNICODE_SEQ=13;
	public const int WS=14;
	public const int T__15=15;
	public const int T__16=16;
	public const int T__17=17;
	public const int T__18=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int T__53=53;

	#if ANTLR_DEBUG
		private static readonly bool[] decisionCanBacktrack =
			new bool[]
			{
				false, // invalid decision
				false, false, false, false, false, false, false, false, false
			};
	#else
		private static readonly bool[] decisionCanBacktrack = new bool[0];
	#endif
	public queryParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public queryParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return queryParser.tokenNames; } }
	public override string GrammarFileName { get { return "query.g"; } }


	protected override object RecoverFromMismatchedToken(IIntStream input, int ttype, BitSet follow)
	{
	    // just rethrow  
	    throw new MismatchedTokenException(ttype, input);
	}

	public override object RecoverFromMismatchedSet(IIntStream input, RecognitionException e, BitSet follow)
	{
	    // rethrow...
	    throw e;
	}

	internal System.Tuple<List<Expression>,List<string>> Queries() {
	  var res = queries();
	  return new System.Tuple<List<Expression>,List<string>>(res.result,res.querystrings);
	}

	internal Expression Query() {
	  var res = query();
	  return res.result;
	}



	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

	#region Rules
	private sealed partial class queries_return : ParserRuleReturnScope<IToken>
	{
		public List<Expression> result;
		public List<string> querystrings;
	}


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_queries() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_queries() {}
	// $ANTLR start "queries"
	// query.g:55:1: queries returns [List<Expression> result, List<string> querystrings] : ( query ';' )* EOF ;
	[GrammarRule("queries")]
	private queryParser.queries_return queries()
	{
		EnterRule_queries();
		EnterRule("queries", 1);
		TraceIn("queries", 1);
	    queryParser.queries_return retval = new queryParser.queries_return();
	    retval.Start = (IToken)input.LT(1);

	    queryParser.query_return query1 = default(queryParser.query_return);

	     retval.result = new List<Expression>(); retval.querystrings = new List<string>(); 
		try { DebugEnterRule(GrammarFileName, "queries");
		DebugLocation(55, 1);
		try
		{
			// query.g:57:5: ( ( query ';' )* EOF )
			DebugEnterAlt(1);
			// query.g:57:7: ( query ';' )* EOF
			{
			DebugLocation(57, 7);
			// query.g:57:7: ( query ';' )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, decisionCanBacktrack[1]);
				int LA1_1 = input.LA(1);

				if ((LA1_1==ID||LA1_1==21||LA1_1==23||LA1_1==26||(LA1_1>=28 && LA1_1<=32)||(LA1_1>=37 && LA1_1<=38)||LA1_1==42||(LA1_1>=44 && LA1_1<=45)||LA1_1==52))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// query.g:57:8: query ';'
					{
					DebugLocation(57, 8);
					PushFollow(Follow._query_in_queries110);
					query1=query();
					PopFollow();

					DebugLocation(57, 14);
					Match(input,18,Follow._18_in_queries112); 
					DebugLocation(57, 18);
					 retval.result.Add((query1!=null?query1.result:default(Expression))); retval.querystrings.Add((query1!=null?input.ToString(query1.Start,query1.Stop):null)); 

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(57, 84);
			Match(input,EOF,Follow._EOF_in_queries118); 

			}

			retval.Stop = (IToken)input.LT(-1);

		}

		catch (RecognitionException e) {
		  throw e;
		}
		finally
		{
			TraceOut("queries", 1);
			LeaveRule("queries", 1);
			LeaveRule_queries();
	    }
	 	DebugLocation(58, 1);
		} finally { DebugExitRule(GrammarFileName, "queries"); }
		return retval;

	}
	// $ANTLR end "queries"

	private sealed partial class query_return : ParserRuleReturnScope<IToken>
	{
		public Expression result;
	}


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_query() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_query() {}
	// $ANTLR start "query"
	// query.g:60:1: query returns [Expression result] : ( 'eq1' '(' st1= exprT ',' st2= exprT ')' | 'eqD' '(' st1= exprT ',' st2= exprT ')' | 'eqB' '(' k= INT ',' st1= exprT ',' st2= exprT ')' | 'eq' '(' st1= exprT ',' st2= exprT ')' | ( 'image' | 'eval' ) '(' st1= exprT ',' arg= exprS ')' | 'display' '(' st= expr ( ',' elemcnt= INT )? ')' | 'dot' '(' st= expr ( ',' elemcnt= INT )? ')' | 'cs' '(' st1= exprT ')' | 'js' '(' st1= exprT ')' | ( 'member' | 'in' ) '(' elem= exprS ',' aut= exprA ')' | 'subset' '(' sa1= exprA ',' sa2= exprA ')' | 'isempty' '(' sa1= exprA ')' |symb= ID '=' defn= expr );
	[GrammarRule("query")]
	private queryParser.query_return query()
	{
		EnterRule_query();
		EnterRule("query", 2);
		TraceIn("query", 2);
	    queryParser.query_return retval = new queryParser.query_return();
	    retval.Start = (IToken)input.LT(1);

	    IToken k = default(IToken);
	    IToken elemcnt = default(IToken);
	    IToken symb = default(IToken);
	    Expression st1 = default(Expression);
	    Expression st2 = default(Expression);
	    Expression arg = default(Expression);
	    Expression st = default(Expression);
	    Expression elem = default(Expression);
	    Expression aut = default(Expression);
	    Expression sa1 = default(Expression);
	    Expression sa2 = default(Expression);
	    Expression defn = default(Expression);

		try { DebugEnterRule(GrammarFileName, "query");
		DebugLocation(60, 1);
		try
		{
			// query.g:61:5: ( 'eq1' '(' st1= exprT ',' st2= exprT ')' | 'eqD' '(' st1= exprT ',' st2= exprT ')' | 'eqB' '(' k= INT ',' st1= exprT ',' st2= exprT ')' | 'eq' '(' st1= exprT ',' st2= exprT ')' | ( 'image' | 'eval' ) '(' st1= exprT ',' arg= exprS ')' | 'display' '(' st= expr ( ',' elemcnt= INT )? ')' | 'dot' '(' st= expr ( ',' elemcnt= INT )? ')' | 'cs' '(' st1= exprT ')' | 'js' '(' st1= exprT ')' | ( 'member' | 'in' ) '(' elem= exprS ',' aut= exprA ')' | 'subset' '(' sa1= exprA ',' sa2= exprA ')' | 'isempty' '(' sa1= exprA ')' |symb= ID '=' defn= expr )
			int alt4=13;
			try { DebugEnterDecision(4, decisionCanBacktrack[4]);
			switch (input.LA(1))
			{
			case 29:
				{
				alt4 = 1;
				}
				break;
			case 31:
				{
				alt4 = 2;
				}
				break;
			case 30:
				{
				alt4 = 3;
				}
				break;
			case 28:
				{
				alt4 = 4;
				}
				break;
			case 32:
			case 37:
				{
				alt4 = 5;
				}
				break;
			case 23:
				{
				alt4 = 6;
				}
				break;
			case 26:
				{
				alt4 = 7;
				}
				break;
			case 21:
				{
				alt4 = 8;
				}
				break;
			case 44:
				{
				alt4 = 9;
				}
				break;
			case 38:
			case 45:
				{
				alt4 = 10;
				}
				break;
			case 52:
				{
				alt4 = 11;
				}
				break;
			case 42:
				{
				alt4 = 12;
				}
				break;
			case ID:
				{
				alt4 = 13;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// query.g:61:7: 'eq1' '(' st1= exprT ',' st2= exprT ')'
				{
				DebugLocation(61, 7);
				Match(input,29,Follow._29_in_query136); 
				DebugLocation(61, 13);
				Match(input,15,Follow._15_in_query138); 
				DebugLocation(61, 20);
				PushFollow(Follow._exprT_in_query142);
				st1=exprT();
				PopFollow();

				DebugLocation(61, 27);
				Match(input,17,Follow._17_in_query144); 
				DebugLocation(61, 34);
				PushFollow(Follow._exprT_in_query148);
				st2=exprT();
				PopFollow();

				DebugLocation(61, 41);
				Match(input,16,Follow._16_in_query150); 
				DebugLocation(61, 45);
				retval.result = new PartialEquivalenceExpression(st1, st2);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// query.g:62:7: 'eqD' '(' st1= exprT ',' st2= exprT ')'
				{
				DebugLocation(62, 7);
				Match(input,31,Follow._31_in_query160); 
				DebugLocation(62, 13);
				Match(input,15,Follow._15_in_query162); 
				DebugLocation(62, 20);
				PushFollow(Follow._exprT_in_query166);
				st1=exprT();
				PopFollow();

				DebugLocation(62, 27);
				Match(input,17,Follow._17_in_query168); 
				DebugLocation(62, 34);
				PushFollow(Follow._exprT_in_query172);
				st2=exprT();
				PopFollow();

				DebugLocation(62, 41);
				Match(input,16,Follow._16_in_query174); 
				DebugLocation(62, 45);
				retval.result = new DomainEquivalenceExpression(st1, st2);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// query.g:63:4: 'eqB' '(' k= INT ',' st1= exprT ',' st2= exprT ')'
				{
				DebugLocation(63, 4);
				Match(input,30,Follow._30_in_query181); 
				DebugLocation(63, 10);
				Match(input,15,Follow._15_in_query183); 
				DebugLocation(63, 15);
				k=(IToken)Match(input,INT,Follow._INT_in_query187); 
				DebugLocation(63, 20);
				Match(input,17,Follow._17_in_query189); 
				DebugLocation(63, 27);
				PushFollow(Follow._exprT_in_query193);
				st1=exprT();
				PopFollow();

				DebugLocation(63, 34);
				Match(input,17,Follow._17_in_query195); 
				DebugLocation(63, 41);
				PushFollow(Follow._exprT_in_query199);
				st2=exprT();
				PopFollow();

				DebugLocation(63, 48);
				Match(input,16,Follow._16_in_query201); 
				DebugLocation(63, 52);
				retval.result = new BoundedEquivalenceExpression(k.Text, st1, st2);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// query.g:64:4: 'eq' '(' st1= exprT ',' st2= exprT ')'
				{
				DebugLocation(64, 4);
				Match(input,28,Follow._28_in_query208); 
				DebugLocation(64, 10);
				Match(input,15,Follow._15_in_query211); 
				DebugLocation(64, 17);
				PushFollow(Follow._exprT_in_query215);
				st1=exprT();
				PopFollow();

				DebugLocation(64, 24);
				Match(input,17,Follow._17_in_query217); 
				DebugLocation(64, 31);
				PushFollow(Follow._exprT_in_query221);
				st2=exprT();
				PopFollow();

				DebugLocation(64, 38);
				Match(input,16,Follow._16_in_query223); 
				DebugLocation(64, 42);
				retval.result = new FullEquivalenceExpression(st1, st2);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// query.g:65:4: ( 'image' | 'eval' ) '(' st1= exprT ',' arg= exprS ')'
				{
				DebugLocation(65, 4);
				if (input.LA(1)==32||input.LA(1)==37)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(65, 23);
				Match(input,15,Follow._15_in_query239); 
				DebugLocation(65, 30);
				PushFollow(Follow._exprT_in_query243);
				st1=exprT();
				PopFollow();

				DebugLocation(65, 37);
				Match(input,17,Follow._17_in_query245); 
				DebugLocation(65, 44);
				PushFollow(Follow._exprS_in_query249);
				arg=exprS();
				PopFollow();

				DebugLocation(65, 51);
				Match(input,16,Follow._16_in_query251); 
				DebugLocation(65, 55);
				retval.result = new ImageExpression(st1, arg);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// query.g:66:7: 'display' '(' st= expr ( ',' elemcnt= INT )? ')'
				{
				DebugLocation(66, 7);
				Match(input,23,Follow._23_in_query261); 
				DebugLocation(66, 17);
				Match(input,15,Follow._15_in_query263); 
				DebugLocation(66, 23);
				PushFollow(Follow._expr_in_query267);
				st=expr();
				PopFollow();

				DebugLocation(66, 29);
				retval.result = new DisplayExpression(st);
				DebugLocation(66, 76);
				// query.g:66:76: ( ',' elemcnt= INT )?
				int alt2=2;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
				int LA2_1 = input.LA(1);

				if ((LA2_1==17))
				{
					alt2 = 1;
				}
				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// query.g:66:77: ',' elemcnt= INT
					{
					DebugLocation(66, 77);
					Match(input,17,Follow._17_in_query272); 
					DebugLocation(66, 88);
					elemcnt=(IToken)Match(input,INT,Follow._INT_in_query276); 
					DebugLocation(67, 26);
					retval.result = new DisplayExpression(st, new Identifier(elemcnt.Text,elemcnt.Line,elemcnt.CharPositionInLine));

					}
					break;

				}
				} finally { DebugExitSubRule(2); }

				DebugLocation(67, 148);
				Match(input,16,Follow._16_in_query308); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// query.g:68:7: 'dot' '(' st= expr ( ',' elemcnt= INT )? ')'
				{
				DebugLocation(68, 7);
				Match(input,26,Follow._26_in_query316); 
				DebugLocation(68, 13);
				Match(input,15,Follow._15_in_query318); 
				DebugLocation(68, 19);
				PushFollow(Follow._expr_in_query322);
				st=expr();
				PopFollow();

				DebugLocation(68, 25);
				retval.result = new DotExpression(st);
				DebugLocation(68, 68);
				// query.g:68:68: ( ',' elemcnt= INT )?
				int alt3=2;
				try { DebugEnterSubRule(3);
				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
				int LA3_1 = input.LA(1);

				if ((LA3_1==17))
				{
					alt3 = 1;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// query.g:68:69: ',' elemcnt= INT
					{
					DebugLocation(68, 69);
					Match(input,17,Follow._17_in_query327); 
					DebugLocation(68, 80);
					elemcnt=(IToken)Match(input,INT,Follow._INT_in_query331); 
					DebugLocation(69, 26);
					retval.result = new DotExpression(st, new Identifier(elemcnt.Text,elemcnt.Line,elemcnt.CharPositionInLine));

					}
					break;

				}
				} finally { DebugExitSubRule(3); }

				DebugLocation(69, 144);
				Match(input,16,Follow._16_in_query363); 

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// query.g:70:4: 'cs' '(' st1= exprT ')'
				{
				DebugLocation(70, 4);
				Match(input,21,Follow._21_in_query368); 
				DebugLocation(70, 9);
				Match(input,15,Follow._15_in_query370); 
				DebugLocation(70, 16);
				PushFollow(Follow._exprT_in_query374);
				st1=exprT();
				PopFollow();

				DebugLocation(70, 23);
				Match(input,16,Follow._16_in_query376); 
				DebugLocation(70, 27);
				retval.result = new CsExpression(st1);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// query.g:71:4: 'js' '(' st1= exprT ')'
				{
				DebugLocation(71, 4);
				Match(input,44,Follow._44_in_query383); 
				DebugLocation(71, 9);
				Match(input,15,Follow._15_in_query385); 
				DebugLocation(71, 16);
				PushFollow(Follow._exprT_in_query389);
				st1=exprT();
				PopFollow();

				DebugLocation(71, 23);
				Match(input,16,Follow._16_in_query391); 
				DebugLocation(71, 27);
				retval.result = new JsExpression(st1);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// query.g:72:4: ( 'member' | 'in' ) '(' elem= exprS ',' aut= exprA ')'
				{
				DebugLocation(72, 4);
				if (input.LA(1)==38||input.LA(1)==45)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(72, 22);
				Match(input,15,Follow._15_in_query406); 
				DebugLocation(72, 30);
				PushFollow(Follow._exprS_in_query410);
				elem=exprS();
				PopFollow();

				DebugLocation(72, 37);
				Match(input,17,Follow._17_in_query412); 
				DebugLocation(72, 44);
				PushFollow(Follow._exprA_in_query416);
				aut=exprA();
				PopFollow();

				DebugLocation(72, 51);
				Match(input,16,Follow._16_in_query418); 
				DebugLocation(72, 55);
				retval.result = new MembershipExpression(elem, aut);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// query.g:73:4: 'subset' '(' sa1= exprA ',' sa2= exprA ')'
				{
				DebugLocation(73, 4);
				Match(input,52,Follow._52_in_query426); 
				DebugLocation(73, 14);
				Match(input,15,Follow._15_in_query429); 
				DebugLocation(73, 21);
				PushFollow(Follow._exprA_in_query433);
				sa1=exprA();
				PopFollow();

				DebugLocation(73, 28);
				Match(input,17,Follow._17_in_query435); 
				DebugLocation(73, 35);
				PushFollow(Follow._exprA_in_query439);
				sa2=exprA();
				PopFollow();

				DebugLocation(73, 42);
				Match(input,16,Follow._16_in_query441); 
				DebugLocation(73, 46);
				retval.result = new SubsetExpression(sa1, sa2);

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// query.g:74:7: 'isempty' '(' sa1= exprA ')'
				{
				DebugLocation(74, 7);
				Match(input,42,Follow._42_in_query452); 
				DebugLocation(74, 18);
				Match(input,15,Follow._15_in_query455); 
				DebugLocation(74, 25);
				PushFollow(Follow._exprA_in_query459);
				sa1=exprA();
				PopFollow();

				DebugLocation(74, 32);
				Match(input,16,Follow._16_in_query461); 
				DebugLocation(74, 36);
				retval.result = new IsEmptyExpression(sa1);

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// query.g:75:4: symb= ID '=' defn= expr
				{
				DebugLocation(75, 8);
				symb=(IToken)Match(input,ID,Follow._ID_in_query471); 
				DebugLocation(75, 12);
				Match(input,19,Follow._19_in_query473); 
				DebugLocation(75, 20);
				PushFollow(Follow._expr_in_query477);
				defn=expr();
				PopFollow();

				DebugLocation(75, 26);
				retval.result = new LetExpression(symb.Text,defn);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

		}

		catch (RecognitionException e) {
		  throw e;
		}
		finally
		{
			TraceOut("query", 2);
			LeaveRule("query", 2);
			LeaveRule_query();
	    }
	 	DebugLocation(76, 1);
		} finally { DebugExitRule(GrammarFileName, "query"); }
		return retval;

	}
	// $ANTLR end "query"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_exprS() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_exprS() {}
	// $ANTLR start "exprS"
	// query.g:78:1: exprS returns [Expression result] : (str= exprString | ( 'image' | 'eval' ) '(' st= exprT ',' arg= exprS ')' );
	[GrammarRule("exprS")]
	private Expression exprS()
	{
		EnterRule_exprS();
		EnterRule("exprS", 3);
		TraceIn("exprS", 3);
	    Expression result = default(Expression);


	    Expression str = default(Expression);
	    Expression st = default(Expression);
	    Expression arg = default(Expression);

		try { DebugEnterRule(GrammarFileName, "exprS");
		DebugLocation(78, 1);
		try
		{
			// query.g:79:5: (str= exprString | ( 'image' | 'eval' ) '(' st= exprT ',' arg= exprS ')' )
			int alt5=2;
			try { DebugEnterDecision(5, decisionCanBacktrack[5]);
			int LA5_1 = input.LA(1);

			if (((LA5_1>=LSTRING && LA5_1<=STRING)))
			{
				alt5 = 1;
			}
			else if ((LA5_1==32||LA5_1==37))
			{
				alt5 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 5, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// query.g:79:7: str= exprString
				{
				DebugLocation(79, 10);
				PushFollow(Follow._exprString_in_exprS500);
				str=exprString();
				PopFollow();

				DebugLocation(79, 22);
				result = str;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// query.g:80:4: ( 'image' | 'eval' ) '(' st= exprT ',' arg= exprS ')'
				{
				DebugLocation(80, 4);
				if (input.LA(1)==32||input.LA(1)==37)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(80, 23);
				Match(input,15,Follow._15_in_exprS515); 
				DebugLocation(80, 29);
				PushFollow(Follow._exprT_in_exprS519);
				st=exprT();
				PopFollow();

				DebugLocation(80, 36);
				Match(input,17,Follow._17_in_exprS521); 
				DebugLocation(80, 43);
				PushFollow(Follow._exprS_in_exprS525);
				arg=exprS();
				PopFollow();

				DebugLocation(80, 50);
				Match(input,16,Follow._16_in_exprS527); 
				DebugLocation(80, 55);
				result = new ImageExpression(st, arg);

				}
				break;

			}
		}

		catch (RecognitionException e) {
		  throw e;
		}
		finally
		{
			TraceOut("exprS", 3);
			LeaveRule("exprS", 3);
			LeaveRule_exprS();
	    }
	 	DebugLocation(81, 1);
		} finally { DebugExitRule(GrammarFileName, "exprS"); }
		return result;

	}
	// $ANTLR end "exprS"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_exprString() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_exprString() {}
	// $ANTLR start "exprString"
	// query.g:83:1: exprString returns [Expression result] : (str= STRING |lstr= LSTRING );
	[GrammarRule("exprString")]
	private Expression exprString()
	{
		EnterRule_exprString();
		EnterRule("exprString", 4);
		TraceIn("exprString", 4);
	    Expression result = default(Expression);


	    IToken str = default(IToken);
	    IToken lstr = default(IToken);

		try { DebugEnterRule(GrammarFileName, "exprString");
		DebugLocation(83, 1);
		try
		{
			// query.g:84:5: (str= STRING |lstr= LSTRING )
			int alt6=2;
			try { DebugEnterDecision(6, decisionCanBacktrack[6]);
			int LA6_1 = input.LA(1);

			if ((LA6_1==STRING))
			{
				alt6 = 1;
			}
			else if ((LA6_1==LSTRING))
			{
				alt6 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// query.g:84:8: str= STRING
				{
				DebugLocation(84, 11);
				str=(IToken)Match(input,STRING,Follow._STRING_in_exprString553); 
				DebugLocation(84, 19);
				result = StringExpression.Mk(new Identifier(str.Text, str.Line, str.CharPositionInLine));

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// query.g:85:4: lstr= LSTRING
				{
				DebugLocation(85, 8);
				lstr=(IToken)Match(input,LSTRING,Follow._LSTRING_in_exprString562); 
				DebugLocation(85, 17);
				result = StringExpression.Mk(new Identifier(lstr.Text, lstr.Line, lstr.CharPositionInLine));

				}
				break;

			}
		}

		catch (RecognitionException e) {
		  throw e;
		}
		finally
		{
			TraceOut("exprString", 4);
			LeaveRule("exprString", 4);
			LeaveRule_exprString();
	    }
	 	DebugLocation(86, 1);
		} finally { DebugExitRule(GrammarFileName, "exprString"); }
		return result;

	}
	// $ANTLR end "exprString"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_exprT() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_exprT() {}
	// $ANTLR start "exprT"
	// query.g:88:1: exprT returns [Expression result] : ( 'join' '(' st1= exprT ',' st2= exprT ')' | ( 'explore' | 'ex' ) '(' st1= exprT ')' | ( 'exploreB' | 'exB' ) '(' st1= exprT ')' | 'restrict' '(' st1= exprT ',' st2= exprA ')' |symb= ID );
	[GrammarRule("exprT")]
	private Expression exprT()
	{
		EnterRule_exprT();
		EnterRule("exprT", 5);
		TraceIn("exprT", 5);
	    Expression result = default(Expression);


	    IToken symb = default(IToken);
	    Expression st1 = default(Expression);
	    Expression st2 = default(Expression);

		try { DebugEnterRule(GrammarFileName, "exprT");
		DebugLocation(88, 1);
		try
		{
			// query.g:89:5: ( 'join' '(' st1= exprT ',' st2= exprT ')' | ( 'explore' | 'ex' ) '(' st1= exprT ')' | ( 'exploreB' | 'exB' ) '(' st1= exprT ')' | 'restrict' '(' st1= exprT ',' st2= exprA ')' |symb= ID )
			int alt7=5;
			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
			switch (input.LA(1))
			{
			case 43:
				{
				alt7 = 1;
				}
				break;
			case 33:
			case 35:
				{
				alt7 = 2;
				}
				break;
			case 34:
			case 36:
				{
				alt7 = 3;
				}
				break;
			case 51:
				{
				alt7 = 4;
				}
				break;
			case ID:
				{
				alt7 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// query.g:89:7: 'join' '(' st1= exprT ',' st2= exprT ')'
				{
				DebugLocation(89, 7);
				Match(input,43,Follow._43_in_exprT582); 
				DebugLocation(89, 14);
				Match(input,15,Follow._15_in_exprT584); 
				DebugLocation(89, 21);
				PushFollow(Follow._exprT_in_exprT588);
				st1=exprT();
				PopFollow();

				DebugLocation(89, 28);
				Match(input,17,Follow._17_in_exprT590); 
				DebugLocation(89, 35);
				PushFollow(Follow._exprT_in_exprT594);
				st2=exprT();
				PopFollow();

				DebugLocation(89, 42);
				Match(input,16,Follow._16_in_exprT596); 
				DebugLocation(89, 46);
				result = new JoinExpression(st1, st2);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// query.g:90:4: ( 'explore' | 'ex' ) '(' st1= exprT ')'
				{
				DebugLocation(90, 4);
				if (input.LA(1)==33||input.LA(1)==35)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(90, 23);
				Match(input,15,Follow._15_in_exprT611); 
				DebugLocation(90, 30);
				PushFollow(Follow._exprT_in_exprT615);
				st1=exprT();
				PopFollow();

				DebugLocation(90, 37);
				Match(input,16,Follow._16_in_exprT617); 
				DebugLocation(90, 41);
				result = new ExploreExpression(st1);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// query.g:91:4: ( 'exploreB' | 'exB' ) '(' st1= exprT ')'
				{
				DebugLocation(91, 4);
				if (input.LA(1)==34||input.LA(1)==36)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(91, 25);
				Match(input,15,Follow._15_in_exprT632); 
				DebugLocation(91, 32);
				PushFollow(Follow._exprT_in_exprT636);
				st1=exprT();
				PopFollow();

				DebugLocation(91, 39);
				Match(input,16,Follow._16_in_exprT638); 
				DebugLocation(91, 43);
				result = new ExploreBoolsExpression(st1);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// query.g:92:4: 'restrict' '(' st1= exprT ',' st2= exprA ')'
				{
				DebugLocation(92, 4);
				Match(input,51,Follow._51_in_exprT645); 
				DebugLocation(92, 15);
				Match(input,15,Follow._15_in_exprT647); 
				DebugLocation(92, 22);
				PushFollow(Follow._exprT_in_exprT651);
				st1=exprT();
				PopFollow();

				DebugLocation(92, 29);
				Match(input,17,Follow._17_in_exprT653); 
				DebugLocation(92, 36);
				PushFollow(Follow._exprA_in_exprT657);
				st2=exprA();
				PopFollow();

				DebugLocation(92, 43);
				Match(input,16,Follow._16_in_exprT659); 
				DebugLocation(92, 47);
				result = new RestrictExpression(st1, st2);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// query.g:93:4: symb= ID
				{
				DebugLocation(93, 8);
				symb=(IToken)Match(input,ID,Follow._ID_in_exprT668); 
				DebugLocation(93, 12);
				result = new VariableExpression(new Identifier(symb.Text, symb.Line, symb.CharPositionInLine));

				}
				break;

			}
		}

		catch (RecognitionException e) {
		  throw e;
		}
		finally
		{
			TraceOut("exprT", 5);
			LeaveRule("exprT", 5);
			LeaveRule_exprT();
	    }
	 	DebugLocation(94, 1);
		} finally { DebugExitRule(GrammarFileName, "exprT"); }
		return result;

	}
	// $ANTLR end "exprT"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_exprA() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_exprA() {}
	// $ANTLR start "exprA"
	// query.g:96:1: exprA returns [Expression result] : (str= exprS | ( 're' | 'regex' ) '(' pat= exprString ')' | ( 'intersect' | 'prod' ) '(' sa1= exprA ',' sa2= exprA ')' | ( 'invimage' | 'inv' ) '(' st= exprT ',' sa= exprA ')' | 'minus' '(' sa1= exprA ',' sa2= exprA ')' | ( 'complement' | '~' ) '(' sa= exprA ')' | 'minimize' '(' sa= exprA ')' | 'determinize' '(' sa= exprA ')' | 'eliminateEpsilons' '(' sa= exprA ')' | ( 'domain' | 'dom' ) '(' st= exprT ')' |symb= ID );
	[GrammarRule("exprA")]
	private Expression exprA()
	{
		EnterRule_exprA();
		EnterRule("exprA", 6);
		TraceIn("exprA", 6);
	    Expression result = default(Expression);


	    IToken symb = default(IToken);
	    Expression str = default(Expression);
	    Expression pat = default(Expression);
	    Expression sa1 = default(Expression);
	    Expression sa2 = default(Expression);
	    Expression st = default(Expression);
	    Expression sa = default(Expression);

		try { DebugEnterRule(GrammarFileName, "exprA");
		DebugLocation(96, 1);
		try
		{
			// query.g:97:5: (str= exprS | ( 're' | 'regex' ) '(' pat= exprString ')' | ( 'intersect' | 'prod' ) '(' sa1= exprA ',' sa2= exprA ')' | ( 'invimage' | 'inv' ) '(' st= exprT ',' sa= exprA ')' | 'minus' '(' sa1= exprA ',' sa2= exprA ')' | ( 'complement' | '~' ) '(' sa= exprA ')' | 'minimize' '(' sa= exprA ')' | 'determinize' '(' sa= exprA ')' | 'eliminateEpsilons' '(' sa= exprA ')' | ( 'domain' | 'dom' ) '(' st= exprT ')' |symb= ID )
			int alt8=11;
			try { DebugEnterDecision(8, decisionCanBacktrack[8]);
			switch (input.LA(1))
			{
			case LSTRING:
			case STRING:
			case 32:
			case 37:
				{
				alt8 = 1;
				}
				break;
			case 49:
			case 50:
				{
				alt8 = 2;
				}
				break;
			case 39:
			case 48:
				{
				alt8 = 3;
				}
				break;
			case 40:
			case 41:
				{
				alt8 = 4;
				}
				break;
			case 47:
				{
				alt8 = 5;
				}
				break;
			case 20:
			case 53:
				{
				alt8 = 6;
				}
				break;
			case 46:
				{
				alt8 = 7;
				}
				break;
			case 22:
				{
				alt8 = 8;
				}
				break;
			case 27:
				{
				alt8 = 9;
				}
				break;
			case 24:
			case 25:
				{
				alt8 = 10;
				}
				break;
			case ID:
				{
				alt8 = 11;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 8, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// query.g:97:7: str= exprS
				{
				DebugLocation(97, 10);
				PushFollow(Follow._exprS_in_exprA690);
				str=exprS();
				PopFollow();

				DebugLocation(97, 17);
				result = str;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// query.g:98:4: ( 're' | 'regex' ) '(' pat= exprString ')'
				{
				DebugLocation(98, 4);
				if ((input.LA(1)>=49 && input.LA(1)<=50))
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(98, 21);
				Match(input,15,Follow._15_in_exprA705); 
				DebugLocation(98, 28);
				PushFollow(Follow._exprString_in_exprA709);
				pat=exprString();
				PopFollow();

				DebugLocation(98, 40);
				Match(input,16,Follow._16_in_exprA711); 
				DebugLocation(98, 44);
				result = new RegexExpression(pat);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// query.g:99:7: ( 'intersect' | 'prod' ) '(' sa1= exprA ',' sa2= exprA ')'
				{
				DebugLocation(99, 7);
				if (input.LA(1)==39||input.LA(1)==48)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(99, 30);
				Match(input,15,Follow._15_in_exprA729); 
				DebugLocation(99, 37);
				PushFollow(Follow._exprA_in_exprA733);
				sa1=exprA();
				PopFollow();

				DebugLocation(99, 44);
				Match(input,17,Follow._17_in_exprA735); 
				DebugLocation(99, 51);
				PushFollow(Follow._exprA_in_exprA739);
				sa2=exprA();
				PopFollow();

				DebugLocation(99, 58);
				Match(input,16,Follow._16_in_exprA741); 
				DebugLocation(99, 62);
				result = new IntersectExpression(sa1, sa2);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// query.g:100:4: ( 'invimage' | 'inv' ) '(' st= exprT ',' sa= exprA ')'
				{
				DebugLocation(100, 4);
				if ((input.LA(1)>=40 && input.LA(1)<=41))
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(100, 25);
				Match(input,15,Follow._15_in_exprA756); 
				DebugLocation(100, 31);
				PushFollow(Follow._exprT_in_exprA760);
				st=exprT();
				PopFollow();

				DebugLocation(100, 38);
				Match(input,17,Follow._17_in_exprA762); 
				DebugLocation(100, 44);
				PushFollow(Follow._exprA_in_exprA766);
				sa=exprA();
				PopFollow();

				DebugLocation(100, 51);
				Match(input,16,Follow._16_in_exprA768); 
				DebugLocation(100, 55);
				result = new InvimageExpression(st, sa);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// query.g:101:4: 'minus' '(' sa1= exprA ',' sa2= exprA ')'
				{
				DebugLocation(101, 4);
				Match(input,47,Follow._47_in_exprA775); 
				DebugLocation(101, 12);
				Match(input,15,Follow._15_in_exprA777); 
				DebugLocation(101, 19);
				PushFollow(Follow._exprA_in_exprA781);
				sa1=exprA();
				PopFollow();

				DebugLocation(101, 26);
				Match(input,17,Follow._17_in_exprA783); 
				DebugLocation(101, 33);
				PushFollow(Follow._exprA_in_exprA787);
				sa2=exprA();
				PopFollow();

				DebugLocation(101, 40);
				Match(input,16,Follow._16_in_exprA789); 
				DebugLocation(101, 44);
				result = new MinusExpression(sa1, sa2);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// query.g:102:4: ( 'complement' | '~' ) '(' sa= exprA ')'
				{
				DebugLocation(102, 4);
				if (input.LA(1)==20||input.LA(1)==53)
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(102, 25);
				Match(input,15,Follow._15_in_exprA804); 
				DebugLocation(102, 31);
				PushFollow(Follow._exprA_in_exprA808);
				sa=exprA();
				PopFollow();

				DebugLocation(102, 38);
				Match(input,16,Follow._16_in_exprA810); 
				DebugLocation(102, 42);
				result = new ComplementExpression(sa);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// query.g:103:7: 'minimize' '(' sa= exprA ')'
				{
				DebugLocation(103, 7);
				Match(input,46,Follow._46_in_exprA820); 
				DebugLocation(103, 18);
				Match(input,15,Follow._15_in_exprA822); 
				DebugLocation(103, 24);
				PushFollow(Follow._exprA_in_exprA826);
				sa=exprA();
				PopFollow();

				DebugLocation(103, 31);
				Match(input,16,Follow._16_in_exprA828); 
				DebugLocation(103, 35);
				result = new MinimizeExpression(sa);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// query.g:104:4: 'determinize' '(' sa= exprA ')'
				{
				DebugLocation(104, 4);
				Match(input,22,Follow._22_in_exprA835); 
				DebugLocation(104, 18);
				Match(input,15,Follow._15_in_exprA837); 
				DebugLocation(104, 24);
				PushFollow(Follow._exprA_in_exprA841);
				sa=exprA();
				PopFollow();

				DebugLocation(104, 31);
				Match(input,16,Follow._16_in_exprA843); 
				DebugLocation(104, 35);
				result = new DeterminizeExpression(sa);

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// query.g:105:4: 'eliminateEpsilons' '(' sa= exprA ')'
				{
				DebugLocation(105, 4);
				Match(input,27,Follow._27_in_exprA850); 
				DebugLocation(105, 24);
				Match(input,15,Follow._15_in_exprA852); 
				DebugLocation(105, 30);
				PushFollow(Follow._exprA_in_exprA856);
				sa=exprA();
				PopFollow();

				DebugLocation(105, 37);
				Match(input,16,Follow._16_in_exprA858); 
				DebugLocation(105, 41);
				result = new EliminateEpsilonsExpression(sa);

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// query.g:106:4: ( 'domain' | 'dom' ) '(' st= exprT ')'
				{
				DebugLocation(106, 4);
				if ((input.LA(1)>=24 && input.LA(1)<=25))
				{
					input.Consume();
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(106, 23);
				Match(input,15,Follow._15_in_exprA874); 
				DebugLocation(106, 29);
				PushFollow(Follow._exprT_in_exprA878);
				st=exprT();
				PopFollow();

				DebugLocation(106, 36);
				Match(input,16,Follow._16_in_exprA880); 
				DebugLocation(106, 40);
				result = new DomainExpression(st);

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// query.g:107:7: symb= ID
				{
				DebugLocation(107, 11);
				symb=(IToken)Match(input,ID,Follow._ID_in_exprA892); 
				DebugLocation(107, 15);
				result = new VariableExpression(new Identifier(symb.Text,symb.Line,symb.CharPositionInLine));

				}
				break;

			}
		}

		catch (RecognitionException e) {
		  throw e;
		}
		finally
		{
			TraceOut("exprA", 6);
			LeaveRule("exprA", 6);
			LeaveRule_exprA();
	    }
	 	DebugLocation(108, 1);
		} finally { DebugExitRule(GrammarFileName, "exprA"); }
		return result;

	}
	// $ANTLR end "exprA"


	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule_expr() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule_expr() {}
	// $ANTLR start "expr"
	// query.g:110:1: expr returns [Expression result] : (st= exprT |sa= exprA );
	[GrammarRule("expr")]
	private Expression expr()
	{
		EnterRule_expr();
		EnterRule("expr", 7);
		TraceIn("expr", 7);
	    Expression result = default(Expression);


	    Expression st = default(Expression);
	    Expression sa = default(Expression);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(110, 1);
		try
		{
			// query.g:111:5: (st= exprT |sa= exprA )
			int alt9=2;
			try { DebugEnterDecision(9, decisionCanBacktrack[9]);
			switch (input.LA(1))
			{
			case 33:
			case 34:
			case 35:
			case 36:
			case 43:
			case 51:
				{
				alt9 = 1;
				}
				break;
			case ID:
				{
				alt9 = 1;
				}
				break;
			case LSTRING:
			case STRING:
			case 20:
			case 22:
			case 24:
			case 25:
			case 27:
			case 32:
			case 37:
			case 39:
			case 40:
			case 41:
			case 46:
			case 47:
			case 48:
			case 49:
			case 50:
			case 53:
				{
				alt9 = 2;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// query.g:111:7: st= exprT
				{
				DebugLocation(111, 9);
				PushFollow(Follow._exprT_in_expr915);
				st=exprT();
				PopFollow();

				DebugLocation(111, 16);
				result = st;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// query.g:112:4: sa= exprA
				{
				DebugLocation(112, 6);
				PushFollow(Follow._exprA_in_expr925);
				sa=exprA();
				PopFollow();

				DebugLocation(112, 13);
				result = sa;

				}
				break;

			}
		}

		catch (RecognitionException e) {
		  throw e;
		}
		finally
		{
			TraceOut("expr", 7);
			LeaveRule("expr", 7);
			LeaveRule_expr();
	    }
	 	DebugLocation(113, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return result;

	}
	// $ANTLR end "expr"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _query_in_queries110 = new BitSet(new ulong[]{0x40000UL});
		public static readonly BitSet _18_in_queries112 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_queries118 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _29_in_query136 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_query138 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_query142 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_query144 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_query148 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_query150 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _31_in_query160 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_query162 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_query166 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_query168 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_query172 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_query174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _30_in_query181 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_query183 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _INT_in_query187 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_query189 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_query193 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_query195 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_query199 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_query201 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _28_in_query208 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_query211 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_query215 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_query217 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_query221 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_query223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_query231 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_query239 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_query243 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_query245 = new BitSet(new ulong[]{0x2100001800UL});
		public static readonly BitSet _exprS_in_query249 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_query251 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _23_in_query261 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_query263 = new BitSet(new ulong[]{0x2FCBBF0B501A00UL});
		public static readonly BitSet _expr_in_query267 = new BitSet(new ulong[]{0x30000UL});
		public static readonly BitSet _17_in_query272 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _INT_in_query276 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_query308 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _26_in_query316 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_query318 = new BitSet(new ulong[]{0x2FCBBF0B501A00UL});
		public static readonly BitSet _expr_in_query322 = new BitSet(new ulong[]{0x30000UL});
		public static readonly BitSet _17_in_query327 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _INT_in_query331 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_query363 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _21_in_query368 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_query370 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_query374 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_query376 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _44_in_query383 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_query385 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_query389 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_query391 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_query398 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_query406 = new BitSet(new ulong[]{0x2100001800UL});
		public static readonly BitSet _exprS_in_query410 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_query412 = new BitSet(new ulong[]{0x27C3A10B501A00UL});
		public static readonly BitSet _exprA_in_query416 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_query418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _52_in_query426 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_query429 = new BitSet(new ulong[]{0x27C3A10B501A00UL});
		public static readonly BitSet _exprA_in_query433 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_query435 = new BitSet(new ulong[]{0x27C3A10B501A00UL});
		public static readonly BitSet _exprA_in_query439 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_query441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _42_in_query452 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_query455 = new BitSet(new ulong[]{0x27C3A10B501A00UL});
		public static readonly BitSet _exprA_in_query459 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_query461 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_query471 = new BitSet(new ulong[]{0x80000UL});
		public static readonly BitSet _19_in_query473 = new BitSet(new ulong[]{0x2FCBBF0B501A00UL});
		public static readonly BitSet _expr_in_query477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exprString_in_exprS500 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_exprS507 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_exprS515 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_exprS519 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_exprS521 = new BitSet(new ulong[]{0x2100001800UL});
		public static readonly BitSet _exprS_in_exprS525 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_exprS527 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_exprString553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LSTRING_in_exprString562 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _43_in_exprT582 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_exprT584 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_exprT588 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_exprT590 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_exprT594 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_exprT596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_exprT603 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_exprT611 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_exprT615 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_exprT617 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_exprT624 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_exprT632 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_exprT636 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_exprT638 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _51_in_exprT645 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_exprT647 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_exprT651 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_exprT653 = new BitSet(new ulong[]{0x27C3A10B501A00UL});
		public static readonly BitSet _exprA_in_exprT657 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_exprT659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_exprT668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exprS_in_exprA690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_exprA697 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_exprA705 = new BitSet(new ulong[]{0x1800UL});
		public static readonly BitSet _exprString_in_exprA709 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_exprA711 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_exprA721 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_exprA729 = new BitSet(new ulong[]{0x27C3A10B501A00UL});
		public static readonly BitSet _exprA_in_exprA733 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_exprA735 = new BitSet(new ulong[]{0x27C3A10B501A00UL});
		public static readonly BitSet _exprA_in_exprA739 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_exprA741 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_exprA748 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_exprA756 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_exprA760 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_exprA762 = new BitSet(new ulong[]{0x27C3A10B501A00UL});
		public static readonly BitSet _exprA_in_exprA766 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_exprA768 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _47_in_exprA775 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_exprA777 = new BitSet(new ulong[]{0x27C3A10B501A00UL});
		public static readonly BitSet _exprA_in_exprA781 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _17_in_exprA783 = new BitSet(new ulong[]{0x27C3A10B501A00UL});
		public static readonly BitSet _exprA_in_exprA787 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_exprA789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_exprA796 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_exprA804 = new BitSet(new ulong[]{0x27C3A10B501A00UL});
		public static readonly BitSet _exprA_in_exprA808 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_exprA810 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _46_in_exprA820 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_exprA822 = new BitSet(new ulong[]{0x27C3A10B501A00UL});
		public static readonly BitSet _exprA_in_exprA826 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_exprA828 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _22_in_exprA835 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_exprA837 = new BitSet(new ulong[]{0x27C3A10B501A00UL});
		public static readonly BitSet _exprA_in_exprA841 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_exprA843 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _27_in_exprA850 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_exprA852 = new BitSet(new ulong[]{0x27C3A10B501A00UL});
		public static readonly BitSet _exprA_in_exprA856 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_exprA858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_exprA866 = new BitSet(new ulong[]{0x8000UL});
		public static readonly BitSet _15_in_exprA874 = new BitSet(new ulong[]{0x8081E00000200UL});
		public static readonly BitSet _exprT_in_exprA878 = new BitSet(new ulong[]{0x10000UL});
		public static readonly BitSet _16_in_exprA880 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ID_in_exprA892 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exprT_in_expr915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _exprA_in_expr925 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace Microsoft.Bek.Query
