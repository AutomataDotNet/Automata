//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 bek.g 2015-10-10 14:21:26

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 168, 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;
using ConditionalAttribute = System.Diagnostics.ConditionalAttribute;

namespace Microsoft.Bek.Frontend.ParserImpl
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
public partial class bekLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int BIG_UNICODE_ESC=4;
	public const int CHAR=5;
	public const int COMMENT=6;
	public const int ESC_SEQ=7;
	public const int HEX_DIGIT=8;
	public const int HEX_SEQ=9;
	public const int ID=10;
	public const int INFIX_ARITHM_OP=11;
	public const int INT=12;
	public const int LSTRING=13;
	public const int OCTAL_ESC=14;
	public const int STRING=15;
	public const int UNARY_OP=16;
	public const int UNICODE_ESC=17;
	public const int WS=18;
	public const int T__19=19;
	public const int T__20=20;
	public const int T__21=21;
	public const int T__22=22;
	public const int T__23=23;
	public const int T__24=24;
	public const int T__25=25;
	public const int T__26=26;
	public const int T__27=27;
	public const int T__28=28;
	public const int T__29=29;
	public const int T__30=30;
	public const int T__31=31;
	public const int T__32=32;
	public const int T__33=33;
	public const int T__34=34;
	public const int T__35=35;
	public const int T__36=36;
	public const int T__37=37;
	public const int T__38=38;
	public const int T__39=39;
	public const int T__40=40;
	public const int T__41=41;
	public const int T__42=42;
	public const int T__43=43;
	public const int T__44=44;
	public const int T__45=45;
	public const int T__46=46;
	public const int T__47=47;
	public const int T__48=48;
	public const int T__49=49;

	public override void ReportError(RecognitionException e) 
	{
	    throw e; // just rethrow everything...
	}


    // delegates
    // delegators

	public bekLexer()
	{
		OnCreated();
	}

	public bekLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public bekLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "bek.g"; } }

	private static readonly bool[] decisionCanBacktrack = new bool[0];

	[Conditional("ANTLR_TRACE")]
	protected virtual void OnCreated() {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void EnterRule(string ruleName, int ruleIndex) {}
	[Conditional("ANTLR_TRACE")]
	protected virtual void LeaveRule(string ruleName, int ruleIndex) {}

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__19() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__19() {}

    // $ANTLR start "T__19"
    [GrammarRule("T__19")]
    private void mT__19()
    {
    	EnterRule_T__19();
    	EnterRule("T__19", 1);
    	TraceIn("T__19", 1);
    		try
    		{
    		int _type = T__19;
    		int _channel = DefaultTokenChannel;
    		// bek.g:15:7: ( '&&' )
    		DebugEnterAlt(1);
    		// bek.g:15:9: '&&'
    		{
    		DebugLocation(15, 9);
    		Match("&&"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__19", 1);
    		LeaveRule("T__19", 1);
    		LeaveRule_T__19();
        }
    }
    // $ANTLR end "T__19"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__20() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__20() {}

    // $ANTLR start "T__20"
    [GrammarRule("T__20")]
    private void mT__20()
    {
    	EnterRule_T__20();
    	EnterRule("T__20", 2);
    	TraceIn("T__20", 2);
    		try
    		{
    		int _type = T__20;
    		int _channel = DefaultTokenChannel;
    		// bek.g:16:7: ( '(' )
    		DebugEnterAlt(1);
    		// bek.g:16:9: '('
    		{
    		DebugLocation(16, 9);
    		Match('('); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__20", 2);
    		LeaveRule("T__20", 2);
    		LeaveRule_T__20();
        }
    }
    // $ANTLR end "T__20"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__21() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__21() {}

    // $ANTLR start "T__21"
    [GrammarRule("T__21")]
    private void mT__21()
    {
    	EnterRule_T__21();
    	EnterRule("T__21", 3);
    	TraceIn("T__21", 3);
    		try
    		{
    		int _type = T__21;
    		int _channel = DefaultTokenChannel;
    		// bek.g:17:7: ( ')' )
    		DebugEnterAlt(1);
    		// bek.g:17:9: ')'
    		{
    		DebugLocation(17, 9);
    		Match(')'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__21", 3);
    		LeaveRule("T__21", 3);
    		LeaveRule_T__21();
        }
    }
    // $ANTLR end "T__21"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__22() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__22() {}

    // $ANTLR start "T__22"
    [GrammarRule("T__22")]
    private void mT__22()
    {
    	EnterRule_T__22();
    	EnterRule("T__22", 4);
    	TraceIn("T__22", 4);
    		try
    		{
    		int _type = T__22;
    		int _channel = DefaultTokenChannel;
    		// bek.g:18:7: ( '*' )
    		DebugEnterAlt(1);
    		// bek.g:18:9: '*'
    		{
    		DebugLocation(18, 9);
    		Match('*'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__22", 4);
    		LeaveRule("T__22", 4);
    		LeaveRule_T__22();
        }
    }
    // $ANTLR end "T__22"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__23() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__23() {}

    // $ANTLR start "T__23"
    [GrammarRule("T__23")]
    private void mT__23()
    {
    	EnterRule_T__23();
    	EnterRule("T__23", 5);
    	TraceIn("T__23", 5);
    		try
    		{
    		int _type = T__23;
    		int _channel = DefaultTokenChannel;
    		// bek.g:19:7: ( '+' )
    		DebugEnterAlt(1);
    		// bek.g:19:9: '+'
    		{
    		DebugLocation(19, 9);
    		Match('+'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__23", 5);
    		LeaveRule("T__23", 5);
    		LeaveRule_T__23();
        }
    }
    // $ANTLR end "T__23"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__24() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__24() {}

    // $ANTLR start "T__24"
    [GrammarRule("T__24")]
    private void mT__24()
    {
    	EnterRule_T__24();
    	EnterRule("T__24", 6);
    	TraceIn("T__24", 6);
    		try
    		{
    		int _type = T__24;
    		int _channel = DefaultTokenChannel;
    		// bek.g:20:7: ( ',' )
    		DebugEnterAlt(1);
    		// bek.g:20:9: ','
    		{
    		DebugLocation(20, 9);
    		Match(','); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__24", 6);
    		LeaveRule("T__24", 6);
    		LeaveRule_T__24();
        }
    }
    // $ANTLR end "T__24"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__25() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__25() {}

    // $ANTLR start "T__25"
    [GrammarRule("T__25")]
    private void mT__25()
    {
    	EnterRule_T__25();
    	EnterRule("T__25", 7);
    	TraceIn("T__25", 7);
    		try
    		{
    		int _type = T__25;
    		int _channel = DefaultTokenChannel;
    		// bek.g:21:7: ( ':' )
    		DebugEnterAlt(1);
    		// bek.g:21:9: ':'
    		{
    		DebugLocation(21, 9);
    		Match(':'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__25", 7);
    		LeaveRule("T__25", 7);
    		LeaveRule_T__25();
        }
    }
    // $ANTLR end "T__25"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__26() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__26() {}

    // $ANTLR start "T__26"
    [GrammarRule("T__26")]
    private void mT__26()
    {
    	EnterRule_T__26();
    	EnterRule("T__26", 8);
    	TraceIn("T__26", 8);
    		try
    		{
    		int _type = T__26;
    		int _channel = DefaultTokenChannel;
    		// bek.g:22:7: ( ':=' )
    		DebugEnterAlt(1);
    		// bek.g:22:9: ':='
    		{
    		DebugLocation(22, 9);
    		Match(":="); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__26", 8);
    		LeaveRule("T__26", 8);
    		LeaveRule_T__26();
        }
    }
    // $ANTLR end "T__26"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__27() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__27() {}

    // $ANTLR start "T__27"
    [GrammarRule("T__27")]
    private void mT__27()
    {
    	EnterRule_T__27();
    	EnterRule("T__27", 9);
    	TraceIn("T__27", 9);
    		try
    		{
    		int _type = T__27;
    		int _channel = DefaultTokenChannel;
    		// bek.g:23:7: ( ';' )
    		DebugEnterAlt(1);
    		// bek.g:23:9: ';'
    		{
    		DebugLocation(23, 9);
    		Match(';'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__27", 9);
    		LeaveRule("T__27", 9);
    		LeaveRule_T__27();
        }
    }
    // $ANTLR end "T__27"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__28() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__28() {}

    // $ANTLR start "T__28"
    [GrammarRule("T__28")]
    private void mT__28()
    {
    	EnterRule_T__28();
    	EnterRule("T__28", 10);
    	TraceIn("T__28", 10);
    		try
    		{
    		int _type = T__28;
    		int _channel = DefaultTokenChannel;
    		// bek.g:24:7: ( '=' )
    		DebugEnterAlt(1);
    		// bek.g:24:9: '='
    		{
    		DebugLocation(24, 9);
    		Match('='); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__28", 10);
    		LeaveRule("T__28", 10);
    		LeaveRule_T__28();
        }
    }
    // $ANTLR end "T__28"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__29() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__29() {}

    // $ANTLR start "T__29"
    [GrammarRule("T__29")]
    private void mT__29()
    {
    	EnterRule_T__29();
    	EnterRule("T__29", 11);
    	TraceIn("T__29", 11);
    		try
    		{
    		int _type = T__29;
    		int _channel = DefaultTokenChannel;
    		// bek.g:25:7: ( '==>' )
    		DebugEnterAlt(1);
    		// bek.g:25:9: '==>'
    		{
    		DebugLocation(25, 9);
    		Match("==>"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__29", 11);
    		LeaveRule("T__29", 11);
    		LeaveRule_T__29();
        }
    }
    // $ANTLR end "T__29"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__30() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__30() {}

    // $ANTLR start "T__30"
    [GrammarRule("T__30")]
    private void mT__30()
    {
    	EnterRule_T__30();
    	EnterRule("T__30", 12);
    	TraceIn("T__30", 12);
    		try
    		{
    		int _type = T__30;
    		int _channel = DefaultTokenChannel;
    		// bek.g:26:7: ( '[' )
    		DebugEnterAlt(1);
    		// bek.g:26:9: '['
    		{
    		DebugLocation(26, 9);
    		Match('['); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__30", 12);
    		LeaveRule("T__30", 12);
    		LeaveRule_T__30();
        }
    }
    // $ANTLR end "T__30"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__31() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__31() {}

    // $ANTLR start "T__31"
    [GrammarRule("T__31")]
    private void mT__31()
    {
    	EnterRule_T__31();
    	EnterRule("T__31", 13);
    	TraceIn("T__31", 13);
    		try
    		{
    		int _type = T__31;
    		int _channel = DefaultTokenChannel;
    		// bek.g:27:7: ( ']' )
    		DebugEnterAlt(1);
    		// bek.g:27:9: ']'
    		{
    		DebugLocation(27, 9);
    		Match(']'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__31", 13);
    		LeaveRule("T__31", 13);
    		LeaveRule_T__31();
        }
    }
    // $ANTLR end "T__31"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__32() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__32() {}

    // $ANTLR start "T__32"
    [GrammarRule("T__32")]
    private void mT__32()
    {
    	EnterRule_T__32();
    	EnterRule("T__32", 14);
    	TraceIn("T__32", 14);
    		try
    		{
    		int _type = T__32;
    		int _channel = DefaultTokenChannel;
    		// bek.g:28:7: ( 'case' )
    		DebugEnterAlt(1);
    		// bek.g:28:9: 'case'
    		{
    		DebugLocation(28, 9);
    		Match("case"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__32", 14);
    		LeaveRule("T__32", 14);
    		LeaveRule_T__32();
        }
    }
    // $ANTLR end "T__32"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__33() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__33() {}

    // $ANTLR start "T__33"
    [GrammarRule("T__33")]
    private void mT__33()
    {
    	EnterRule_T__33();
    	EnterRule("T__33", 15);
    	TraceIn("T__33", 15);
    		try
    		{
    		int _type = T__33;
    		int _channel = DefaultTokenChannel;
    		// bek.g:29:7: ( 'else' )
    		DebugEnterAlt(1);
    		// bek.g:29:9: 'else'
    		{
    		DebugLocation(29, 9);
    		Match("else"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__33", 15);
    		LeaveRule("T__33", 15);
    		LeaveRule_T__33();
        }
    }
    // $ANTLR end "T__33"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__34() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__34() {}

    // $ANTLR start "T__34"
    [GrammarRule("T__34")]
    private void mT__34()
    {
    	EnterRule_T__34();
    	EnterRule("T__34", 16);
    	TraceIn("T__34", 16);
    		try
    		{
    		int _type = T__34;
    		int _channel = DefaultTokenChannel;
    		// bek.g:30:7: ( 'end' )
    		DebugEnterAlt(1);
    		// bek.g:30:9: 'end'
    		{
    		DebugLocation(30, 9);
    		Match("end"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__34", 16);
    		LeaveRule("T__34", 16);
    		LeaveRule_T__34();
        }
    }
    // $ANTLR end "T__34"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__35() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__35() {}

    // $ANTLR start "T__35"
    [GrammarRule("T__35")]
    private void mT__35()
    {
    	EnterRule_T__35();
    	EnterRule("T__35", 17);
    	TraceIn("T__35", 17);
    		try
    		{
    		int _type = T__35;
    		int _channel = DefaultTokenChannel;
    		// bek.g:31:7: ( 'false' )
    		DebugEnterAlt(1);
    		// bek.g:31:9: 'false'
    		{
    		DebugLocation(31, 9);
    		Match("false"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__35", 17);
    		LeaveRule("T__35", 17);
    		LeaveRule_T__35();
        }
    }
    // $ANTLR end "T__35"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__36() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__36() {}

    // $ANTLR start "T__36"
    [GrammarRule("T__36")]
    private void mT__36()
    {
    	EnterRule_T__36();
    	EnterRule("T__36", 18);
    	TraceIn("T__36", 18);
    		try
    		{
    		int _type = T__36;
    		int _channel = DefaultTokenChannel;
    		// bek.g:32:7: ( 'function' )
    		DebugEnterAlt(1);
    		// bek.g:32:9: 'function'
    		{
    		DebugLocation(32, 9);
    		Match("function"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__36", 18);
    		LeaveRule("T__36", 18);
    		LeaveRule_T__36();
        }
    }
    // $ANTLR end "T__36"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__37() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__37() {}

    // $ANTLR start "T__37"
    [GrammarRule("T__37")]
    private void mT__37()
    {
    	EnterRule_T__37();
    	EnterRule("T__37", 19);
    	TraceIn("T__37", 19);
    		try
    		{
    		int _type = T__37;
    		int _channel = DefaultTokenChannel;
    		// bek.g:33:7: ( 'if' )
    		DebugEnterAlt(1);
    		// bek.g:33:9: 'if'
    		{
    		DebugLocation(33, 9);
    		Match("if"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__37", 19);
    		LeaveRule("T__37", 19);
    		LeaveRule_T__37();
        }
    }
    // $ANTLR end "T__37"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__38() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__38() {}

    // $ANTLR start "T__38"
    [GrammarRule("T__38")]
    private void mT__38()
    {
    	EnterRule_T__38();
    	EnterRule("T__38", 20);
    	TraceIn("T__38", 20);
    		try
    		{
    		int _type = T__38;
    		int _channel = DefaultTokenChannel;
    		// bek.g:34:7: ( 'in' )
    		DebugEnterAlt(1);
    		// bek.g:34:9: 'in'
    		{
    		DebugLocation(34, 9);
    		Match("in"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__38", 20);
    		LeaveRule("T__38", 20);
    		LeaveRule_T__38();
        }
    }
    // $ANTLR end "T__38"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__39() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__39() {}

    // $ANTLR start "T__39"
    [GrammarRule("T__39")]
    private void mT__39()
    {
    	EnterRule_T__39();
    	EnterRule("T__39", 21);
    	TraceIn("T__39", 21);
    		try
    		{
    		int _type = T__39;
    		int _channel = DefaultTokenChannel;
    		// bek.g:35:7: ( 'iter' )
    		DebugEnterAlt(1);
    		// bek.g:35:9: 'iter'
    		{
    		DebugLocation(35, 9);
    		Match("iter"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__39", 21);
    		LeaveRule("T__39", 21);
    		LeaveRule_T__39();
        }
    }
    // $ANTLR end "T__39"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__40() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__40() {}

    // $ANTLR start "T__40"
    [GrammarRule("T__40")]
    private void mT__40()
    {
    	EnterRule_T__40();
    	EnterRule("T__40", 22);
    	TraceIn("T__40", 22);
    		try
    		{
    		int _type = T__40;
    		int _channel = DefaultTokenChannel;
    		// bek.g:36:7: ( 'program' )
    		DebugEnterAlt(1);
    		// bek.g:36:9: 'program'
    		{
    		DebugLocation(36, 9);
    		Match("program"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__40", 22);
    		LeaveRule("T__40", 22);
    		LeaveRule_T__40();
        }
    }
    // $ANTLR end "T__40"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__41() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__41() {}

    // $ANTLR start "T__41"
    [GrammarRule("T__41")]
    private void mT__41()
    {
    	EnterRule_T__41();
    	EnterRule("T__41", 23);
    	TraceIn("T__41", 23);
    		try
    		{
    		int _type = T__41;
    		int _channel = DefaultTokenChannel;
    		// bek.g:37:7: ( 'raise' )
    		DebugEnterAlt(1);
    		// bek.g:37:9: 'raise'
    		{
    		DebugLocation(37, 9);
    		Match("raise"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__41", 23);
    		LeaveRule("T__41", 23);
    		LeaveRule_T__41();
        }
    }
    // $ANTLR end "T__41"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__42() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__42() {}

    // $ANTLR start "T__42"
    [GrammarRule("T__42")]
    private void mT__42()
    {
    	EnterRule_T__42();
    	EnterRule("T__42", 24);
    	TraceIn("T__42", 24);
    		try
    		{
    		int _type = T__42;
    		int _channel = DefaultTokenChannel;
    		// bek.g:38:7: ( 'replace' )
    		DebugEnterAlt(1);
    		// bek.g:38:9: 'replace'
    		{
    		DebugLocation(38, 9);
    		Match("replace"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__42", 24);
    		LeaveRule("T__42", 24);
    		LeaveRule_T__42();
        }
    }
    // $ANTLR end "T__42"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__43() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__43() {}

    // $ANTLR start "T__43"
    [GrammarRule("T__43")]
    private void mT__43()
    {
    	EnterRule_T__43();
    	EnterRule("T__43", 25);
    	TraceIn("T__43", 25);
    		try
    		{
    		int _type = T__43;
    		int _channel = DefaultTokenChannel;
    		// bek.g:39:7: ( 'return' )
    		DebugEnterAlt(1);
    		// bek.g:39:9: 'return'
    		{
    		DebugLocation(39, 9);
    		Match("return"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__43", 25);
    		LeaveRule("T__43", 25);
    		LeaveRule_T__43();
        }
    }
    // $ANTLR end "T__43"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__44() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__44() {}

    // $ANTLR start "T__44"
    [GrammarRule("T__44")]
    private void mT__44()
    {
    	EnterRule_T__44();
    	EnterRule("T__44", 26);
    	TraceIn("T__44", 26);
    		try
    		{
    		int _type = T__44;
    		int _channel = DefaultTokenChannel;
    		// bek.g:40:7: ( 'skip' )
    		DebugEnterAlt(1);
    		// bek.g:40:9: 'skip'
    		{
    		DebugLocation(40, 9);
    		Match("skip"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__44", 26);
    		LeaveRule("T__44", 26);
    		LeaveRule_T__44();
        }
    }
    // $ANTLR end "T__44"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__45() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__45() {}

    // $ANTLR start "T__45"
    [GrammarRule("T__45")]
    private void mT__45()
    {
    	EnterRule_T__45();
    	EnterRule("T__45", 27);
    	TraceIn("T__45", 27);
    		try
    		{
    		int _type = T__45;
    		int _channel = DefaultTokenChannel;
    		// bek.g:41:7: ( 'true' )
    		DebugEnterAlt(1);
    		// bek.g:41:9: 'true'
    		{
    		DebugLocation(41, 9);
    		Match("true"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__45", 27);
    		LeaveRule("T__45", 27);
    		LeaveRule_T__45();
        }
    }
    // $ANTLR end "T__45"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__46() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__46() {}

    // $ANTLR start "T__46"
    [GrammarRule("T__46")]
    private void mT__46()
    {
    	EnterRule_T__46();
    	EnterRule("T__46", 28);
    	TraceIn("T__46", 28);
    		try
    		{
    		int _type = T__46;
    		int _channel = DefaultTokenChannel;
    		// bek.g:42:7: ( 'yield' )
    		DebugEnterAlt(1);
    		// bek.g:42:9: 'yield'
    		{
    		DebugLocation(42, 9);
    		Match("yield"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__46", 28);
    		LeaveRule("T__46", 28);
    		LeaveRule_T__46();
        }
    }
    // $ANTLR end "T__46"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__47() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__47() {}

    // $ANTLR start "T__47"
    [GrammarRule("T__47")]
    private void mT__47()
    {
    	EnterRule_T__47();
    	EnterRule("T__47", 29);
    	TraceIn("T__47", 29);
    		try
    		{
    		int _type = T__47;
    		int _channel = DefaultTokenChannel;
    		// bek.g:43:7: ( '{' )
    		DebugEnterAlt(1);
    		// bek.g:43:9: '{'
    		{
    		DebugLocation(43, 9);
    		Match('{'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__47", 29);
    		LeaveRule("T__47", 29);
    		LeaveRule_T__47();
        }
    }
    // $ANTLR end "T__47"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__48() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__48() {}

    // $ANTLR start "T__48"
    [GrammarRule("T__48")]
    private void mT__48()
    {
    	EnterRule_T__48();
    	EnterRule("T__48", 30);
    	TraceIn("T__48", 30);
    		try
    		{
    		int _type = T__48;
    		int _channel = DefaultTokenChannel;
    		// bek.g:44:7: ( '||' )
    		DebugEnterAlt(1);
    		// bek.g:44:9: '||'
    		{
    		DebugLocation(44, 9);
    		Match("||"); 


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__48", 30);
    		LeaveRule("T__48", 30);
    		LeaveRule_T__48();
        }
    }
    // $ANTLR end "T__48"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_T__49() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_T__49() {}

    // $ANTLR start "T__49"
    [GrammarRule("T__49")]
    private void mT__49()
    {
    	EnterRule_T__49();
    	EnterRule("T__49", 31);
    	TraceIn("T__49", 31);
    		try
    		{
    		int _type = T__49;
    		int _channel = DefaultTokenChannel;
    		// bek.g:45:7: ( '}' )
    		DebugEnterAlt(1);
    		// bek.g:45:9: '}'
    		{
    		DebugLocation(45, 9);
    		Match('}'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("T__49", 31);
    		LeaveRule("T__49", 31);
    		LeaveRule_T__49();
        }
    }
    // $ANTLR end "T__49"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INFIX_ARITHM_OP() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INFIX_ARITHM_OP() {}

    // $ANTLR start "INFIX_ARITHM_OP"
    [GrammarRule("INFIX_ARITHM_OP")]
    private void mINFIX_ARITHM_OP()
    {
    	EnterRule_INFIX_ARITHM_OP();
    	EnterRule("INFIX_ARITHM_OP", 32);
    	TraceIn("INFIX_ARITHM_OP", 32);
    		try
    		{
    		int _type = INFIX_ARITHM_OP;
    		int _channel = DefaultTokenChannel;
    		// bek.g:269:5: ( '/' | '-' | '%' | '&' | '|' | '<' | '>' | '<=' | '>=' | '<<' | '>>' | '^' | '==' | '!=' )
    		int alt1=14;
    		try { DebugEnterDecision(1, decisionCanBacktrack[1]);
    		switch (input.LA(1))
    		{
    		case '/':
    			{
    			alt1 = 1;
    			}
    			break;
    		case '-':
    			{
    			alt1 = 2;
    			}
    			break;
    		case '%':
    			{
    			alt1 = 3;
    			}
    			break;
    		case '&':
    			{
    			alt1 = 4;
    			}
    			break;
    		case '|':
    			{
    			alt1 = 5;
    			}
    			break;
    		case '<':
    			{
    			switch (input.LA(2))
    			{
    			case '=':
    				{
    				alt1 = 8;
    				}
    				break;
    			case '<':
    				{
    				alt1 = 10;
    				}
    				break;
    			default:
    				alt1=6;
    				break;

    			}

    			}
    			break;
    		case '>':
    			{
    			switch (input.LA(2))
    			{
    			case '=':
    				{
    				alt1 = 9;
    				}
    				break;
    			case '>':
    				{
    				alt1 = 11;
    				}
    				break;
    			default:
    				alt1=7;
    				break;

    			}

    			}
    			break;
    		case '^':
    			{
    			alt1 = 12;
    			}
    			break;
    		case '=':
    			{
    			alt1 = 13;
    			}
    			break;
    		case '!':
    			{
    			alt1 = 14;
    			}
    			break;
    		default:
    			{
    				NoViableAltException nvae = new NoViableAltException("", 1, 0, input, 1);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}

    		} finally { DebugExitDecision(1); }
    		switch (alt1)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// bek.g:269:7: '/'
    			{
    			DebugLocation(269, 7);
    			Match('/'); 

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// bek.g:270:7: '-'
    			{
    			DebugLocation(270, 7);
    			Match('-'); 

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// bek.g:271:7: '%'
    			{
    			DebugLocation(271, 7);
    			Match('%'); 

    			}
    			break;
    		case 4:
    			DebugEnterAlt(4);
    			// bek.g:272:7: '&'
    			{
    			DebugLocation(272, 7);
    			Match('&'); 

    			}
    			break;
    		case 5:
    			DebugEnterAlt(5);
    			// bek.g:273:7: '|'
    			{
    			DebugLocation(273, 7);
    			Match('|'); 

    			}
    			break;
    		case 6:
    			DebugEnterAlt(6);
    			// bek.g:274:7: '<'
    			{
    			DebugLocation(274, 7);
    			Match('<'); 

    			}
    			break;
    		case 7:
    			DebugEnterAlt(7);
    			// bek.g:275:7: '>'
    			{
    			DebugLocation(275, 7);
    			Match('>'); 

    			}
    			break;
    		case 8:
    			DebugEnterAlt(8);
    			// bek.g:276:7: '<='
    			{
    			DebugLocation(276, 7);
    			Match("<="); 


    			}
    			break;
    		case 9:
    			DebugEnterAlt(9);
    			// bek.g:277:7: '>='
    			{
    			DebugLocation(277, 7);
    			Match(">="); 


    			}
    			break;
    		case 10:
    			DebugEnterAlt(10);
    			// bek.g:278:7: '<<'
    			{
    			DebugLocation(278, 7);
    			Match("<<"); 


    			}
    			break;
    		case 11:
    			DebugEnterAlt(11);
    			// bek.g:279:7: '>>'
    			{
    			DebugLocation(279, 7);
    			Match(">>"); 


    			}
    			break;
    		case 12:
    			DebugEnterAlt(12);
    			// bek.g:280:7: '^'
    			{
    			DebugLocation(280, 7);
    			Match('^'); 

    			}
    			break;
    		case 13:
    			DebugEnterAlt(13);
    			// bek.g:281:7: '=='
    			{
    			DebugLocation(281, 7);
    			Match("=="); 


    			}
    			break;
    		case 14:
    			DebugEnterAlt(14);
    			// bek.g:282:7: '!='
    			{
    			DebugLocation(282, 7);
    			Match("!="); 


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INFIX_ARITHM_OP", 32);
    		LeaveRule("INFIX_ARITHM_OP", 32);
    		LeaveRule_INFIX_ARITHM_OP();
        }
    }
    // $ANTLR end "INFIX_ARITHM_OP"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_UNARY_OP() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_UNARY_OP() {}

    // $ANTLR start "UNARY_OP"
    [GrammarRule("UNARY_OP")]
    private void mUNARY_OP()
    {
    	EnterRule_UNARY_OP();
    	EnterRule("UNARY_OP", 33);
    	TraceIn("UNARY_OP", 33);
    		try
    		{
    		int _type = UNARY_OP;
    		int _channel = DefaultTokenChannel;
    		// bek.g:286:5: ( '!' | '~' )
    		DebugEnterAlt(1);
    		// bek.g:
    		{
    		DebugLocation(286, 5);
    		if (input.LA(1)=='!'||input.LA(1)=='~')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("UNARY_OP", 33);
    		LeaveRule("UNARY_OP", 33);
    		LeaveRule_UNARY_OP();
        }
    }
    // $ANTLR end "UNARY_OP"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ID() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ID() {}

    // $ANTLR start "ID"
    [GrammarRule("ID")]
    private void mID()
    {
    	EnterRule_ID();
    	EnterRule("ID", 34);
    	TraceIn("ID", 34);
    		try
    		{
    		int _type = ID;
    		int _channel = DefaultTokenChannel;
    		// bek.g:290:5: ( ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* | '#' ( '0' .. '9' )+ )
    		int alt4=2;
    		try { DebugEnterDecision(4, decisionCanBacktrack[4]);
    		int LA4_1 = input.LA(1);

    		if (((LA4_1>='A' && LA4_1<='Z')||LA4_1=='_'||(LA4_1>='a' && LA4_1<='z')))
    		{
    			alt4 = 1;
    		}
    		else if ((LA4_1=='#'))
    		{
    			alt4 = 2;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(4); }
    		switch (alt4)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// bek.g:290:7: ( 'a' .. 'z' | 'A' .. 'Z' | '_' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    			{
    			DebugLocation(290, 7);
    			input.Consume();

    			DebugLocation(290, 31);
    			// bek.g:290:31: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
    			try { DebugEnterSubRule(2);
    			while (true)
    			{
    				int alt2=2;
    				try { DebugEnterDecision(2, decisionCanBacktrack[2]);
    				int LA2_1 = input.LA(1);

    				if (((LA2_1>='0' && LA2_1<='9')||(LA2_1>='A' && LA2_1<='Z')||LA2_1=='_'||(LA2_1>='a' && LA2_1<='z')))
    				{
    					alt2 = 1;
    				}


    				} finally { DebugExitDecision(2); }
    				switch ( alt2 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// bek.g:
    					{
    					DebugLocation(290, 31);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop2;
    				}
    			}

    			loop2:
    				;

    			} finally { DebugExitSubRule(2); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// bek.g:291:8: '#' ( '0' .. '9' )+
    			{
    			DebugLocation(291, 8);
    			Match('#'); 
    			DebugLocation(291, 12);
    			// bek.g:291:12: ( '0' .. '9' )+
    			int cnt3=0;
    			try { DebugEnterSubRule(3);
    			while (true)
    			{
    				int alt3=2;
    				try { DebugEnterDecision(3, decisionCanBacktrack[3]);
    				int LA3_1 = input.LA(1);

    				if (((LA3_1>='0' && LA3_1<='9')))
    				{
    					alt3 = 1;
    				}


    				} finally { DebugExitDecision(3); }
    				switch (alt3)
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// bek.g:
    					{
    					DebugLocation(291, 12);
    					input.Consume();


    					}
    					break;

    				default:
    					if (cnt3 >= 1)
    						goto loop3;

    					EarlyExitException eee3 = new EarlyExitException( 3, input );
    					DebugRecognitionException(eee3);
    					throw eee3;
    				}
    				cnt3++;
    			}
    			loop3:
    				;

    			} finally { DebugExitSubRule(3); }


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("ID", 34);
    		LeaveRule("ID", 34);
    		LeaveRule_ID();
        }
    }
    // $ANTLR end "ID"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_INT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_INT() {}

    // $ANTLR start "INT"
    [GrammarRule("INT")]
    private void mINT()
    {
    	EnterRule_INT();
    	EnterRule("INT", 35);
    	TraceIn("INT", 35);
    		try
    		{
    		int _type = INT;
    		int _channel = DefaultTokenChannel;
    		// bek.g:294:5: ( '0' ( ( 'x' ( HEX_DIGIT )+ ) | ( '0' .. '9' )* ) | ( '1' .. '9' ) ( '0' .. '9' )* )
    		int alt9=2;
    		try { DebugEnterDecision(9, decisionCanBacktrack[9]);
    		int LA9_1 = input.LA(1);

    		if ((LA9_1=='0'))
    		{
    			alt9 = 1;
    		}
    		else if (((LA9_1>='1' && LA9_1<='9')))
    		{
    			alt9 = 2;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 9, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(9); }
    		switch (alt9)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// bek.g:294:7: '0' ( ( 'x' ( HEX_DIGIT )+ ) | ( '0' .. '9' )* )
    			{
    			DebugLocation(294, 7);
    			Match('0'); 
    			DebugLocation(294, 11);
    			// bek.g:294:11: ( ( 'x' ( HEX_DIGIT )+ ) | ( '0' .. '9' )* )
    			int alt7=2;
    			try { DebugEnterSubRule(7);
    			try { DebugEnterDecision(7, decisionCanBacktrack[7]);
    			int LA7_1 = input.LA(1);

    			if ((LA7_1=='x'))
    			{
    				alt7 = 1;
    			}
    			else
    			{
    				alt7 = 2;
    			}
    			} finally { DebugExitDecision(7); }
    			switch (alt7)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// bek.g:294:12: ( 'x' ( HEX_DIGIT )+ )
    				{
    				DebugLocation(294, 12);
    				// bek.g:294:12: ( 'x' ( HEX_DIGIT )+ )
    				DebugEnterAlt(1);
    				// bek.g:294:13: 'x' ( HEX_DIGIT )+
    				{
    				DebugLocation(294, 13);
    				Match('x'); 
    				DebugLocation(294, 17);
    				// bek.g:294:17: ( HEX_DIGIT )+
    				int cnt5=0;
    				try { DebugEnterSubRule(5);
    				while (true)
    				{
    					int alt5=2;
    					try { DebugEnterDecision(5, decisionCanBacktrack[5]);
    					int LA5_1 = input.LA(1);

    					if (((LA5_1>='0' && LA5_1<='9')||(LA5_1>='A' && LA5_1<='F')||(LA5_1>='a' && LA5_1<='f')))
    					{
    						alt5 = 1;
    					}


    					} finally { DebugExitDecision(5); }
    					switch (alt5)
    					{
    					case 1:
    						DebugEnterAlt(1);
    						// bek.g:
    						{
    						DebugLocation(294, 17);
    						input.Consume();


    						}
    						break;

    					default:
    						if (cnt5 >= 1)
    							goto loop5;

    						EarlyExitException eee5 = new EarlyExitException( 5, input );
    						DebugRecognitionException(eee5);
    						throw eee5;
    					}
    					cnt5++;
    				}
    				loop5:
    					;

    				} finally { DebugExitSubRule(5); }


    				}


    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// bek.g:294:33: ( '0' .. '9' )*
    				{
    				DebugLocation(294, 33);
    				// bek.g:294:33: ( '0' .. '9' )*
    				try { DebugEnterSubRule(6);
    				while (true)
    				{
    					int alt6=2;
    					try { DebugEnterDecision(6, decisionCanBacktrack[6]);
    					int LA6_1 = input.LA(1);

    					if (((LA6_1>='0' && LA6_1<='9')))
    					{
    						alt6 = 1;
    					}


    					} finally { DebugExitDecision(6); }
    					switch ( alt6 )
    					{
    					case 1:
    						DebugEnterAlt(1);
    						// bek.g:
    						{
    						DebugLocation(294, 33);
    						input.Consume();


    						}
    						break;

    					default:
    						goto loop6;
    					}
    				}

    				loop6:
    					;

    				} finally { DebugExitSubRule(6); }


    				}
    				break;

    			}
    			} finally { DebugExitSubRule(7); }


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// bek.g:295:4: ( '1' .. '9' ) ( '0' .. '9' )*
    			{
    			DebugLocation(295, 4);
    			input.Consume();

    			DebugLocation(295, 15);
    			// bek.g:295:15: ( '0' .. '9' )*
    			try { DebugEnterSubRule(8);
    			while (true)
    			{
    				int alt8=2;
    				try { DebugEnterDecision(8, decisionCanBacktrack[8]);
    				int LA8_1 = input.LA(1);

    				if (((LA8_1>='0' && LA8_1<='9')))
    				{
    					alt8 = 1;
    				}


    				} finally { DebugExitDecision(8); }
    				switch ( alt8 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// bek.g:
    					{
    					DebugLocation(295, 15);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop8;
    				}
    			}

    			loop8:
    				;

    			} finally { DebugExitSubRule(8); }


    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("INT", 35);
    		LeaveRule("INT", 35);
    		LeaveRule_INT();
        }
    }
    // $ANTLR end "INT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_COMMENT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_COMMENT() {}

    // $ANTLR start "COMMENT"
    [GrammarRule("COMMENT")]
    private void mCOMMENT()
    {
    	EnterRule_COMMENT();
    	EnterRule("COMMENT", 36);
    	TraceIn("COMMENT", 36);
    		try
    		{
    		int _type = COMMENT;
    		int _channel = DefaultTokenChannel;
    		// bek.g:303:5: ( '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n' | '/*' ( options {greedy=false; } : . )* '*/' )
    		int alt13=2;
    		try { DebugEnterDecision(13, decisionCanBacktrack[13]);
    		int LA13_1 = input.LA(1);

    		if ((LA13_1=='/'))
    		{
    			int LA13_2 = input.LA(2);

    			if ((LA13_2=='/'))
    			{
    				alt13 = 1;
    			}
    			else if ((LA13_2=='*'))
    			{
    				alt13 = 2;
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 13, 1, input, 2);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 13, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(13); }
    		switch (alt13)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// bek.g:303:9: '//' (~ ( '\\n' | '\\r' ) )* ( '\\r' )? '\\n'
    			{
    			DebugLocation(303, 9);
    			Match("//"); 

    			DebugLocation(303, 14);
    			// bek.g:303:14: (~ ( '\\n' | '\\r' ) )*
    			try { DebugEnterSubRule(10);
    			while (true)
    			{
    				int alt10=2;
    				try { DebugEnterDecision(10, decisionCanBacktrack[10]);
    				int LA10_1 = input.LA(1);

    				if (((LA10_1>='\u0000' && LA10_1<='\t')||(LA10_1>='\u000B' && LA10_1<='\f')||(LA10_1>='\u000E' && LA10_1<='\uFFFF')))
    				{
    					alt10 = 1;
    				}


    				} finally { DebugExitDecision(10); }
    				switch ( alt10 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// bek.g:
    					{
    					DebugLocation(303, 14);
    					input.Consume();


    					}
    					break;

    				default:
    					goto loop10;
    				}
    			}

    			loop10:
    				;

    			} finally { DebugExitSubRule(10); }

    			DebugLocation(303, 28);
    			// bek.g:303:28: ( '\\r' )?
    			int alt11=2;
    			try { DebugEnterSubRule(11);
    			try { DebugEnterDecision(11, decisionCanBacktrack[11]);
    			int LA11_1 = input.LA(1);

    			if ((LA11_1=='\r'))
    			{
    				alt11 = 1;
    			}
    			} finally { DebugExitDecision(11); }
    			switch (alt11)
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// bek.g:303:28: '\\r'
    				{
    				DebugLocation(303, 28);
    				Match('\r'); 

    				}
    				break;

    			}
    			} finally { DebugExitSubRule(11); }

    			DebugLocation(303, 34);
    			Match('\n'); 
    			DebugLocation(303, 39);
    			_channel=Hidden;

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// bek.g:304:9: '/*' ( options {greedy=false; } : . )* '*/'
    			{
    			DebugLocation(304, 9);
    			Match("/*"); 

    			DebugLocation(304, 14);
    			// bek.g:304:14: ( options {greedy=false; } : . )*
    			try { DebugEnterSubRule(12);
    			while (true)
    			{
    				int alt12=2;
    				try { DebugEnterDecision(12, decisionCanBacktrack[12]);
    				int LA12_1 = input.LA(1);

    				if ((LA12_1=='*'))
    				{
    					int LA12_2 = input.LA(2);

    					if ((LA12_2=='/'))
    					{
    						alt12 = 2;
    					}
    					else if (((LA12_2>='\u0000' && LA12_2<='.')||(LA12_2>='0' && LA12_2<='\uFFFF')))
    					{
    						alt12 = 1;
    					}


    				}
    				else if (((LA12_1>='\u0000' && LA12_1<=')')||(LA12_1>='+' && LA12_1<='\uFFFF')))
    				{
    					alt12 = 1;
    				}


    				} finally { DebugExitDecision(12); }
    				switch ( alt12 )
    				{
    				case 1:
    					DebugEnterAlt(1);
    					// bek.g:304:42: .
    					{
    					DebugLocation(304, 42);
    					MatchAny(); 

    					}
    					break;

    				default:
    					goto loop12;
    				}
    			}

    			loop12:
    				;

    			} finally { DebugExitSubRule(12); }

    			DebugLocation(304, 47);
    			Match("*/"); 

    			DebugLocation(304, 52);
    			_channel=Hidden;

    			}
    			break;

    		}
    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("COMMENT", 36);
    		LeaveRule("COMMENT", 36);
    		LeaveRule_COMMENT();
        }
    }
    // $ANTLR end "COMMENT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_WS() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_WS() {}

    // $ANTLR start "WS"
    [GrammarRule("WS")]
    private void mWS()
    {
    	EnterRule_WS();
    	EnterRule("WS", 37);
    	TraceIn("WS", 37);
    		try
    		{
    		int _type = WS;
    		int _channel = DefaultTokenChannel;
    		// bek.g:307:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
    		DebugEnterAlt(1);
    		// bek.g:307:9: ( ' ' | '\\t' | '\\r' | '\\n' )
    		{
    		DebugLocation(307, 9);
    		if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}

    		DebugLocation(311, 11);
    		_channel=Hidden;

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("WS", 37);
    		LeaveRule("WS", 37);
    		LeaveRule_WS();
        }
    }
    // $ANTLR end "WS"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_STRING() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_STRING() {}

    // $ANTLR start "STRING"
    [GrammarRule("STRING")]
    private void mSTRING()
    {
    	EnterRule_STRING();
    	EnterRule("STRING", 38);
    	TraceIn("STRING", 38);
    		try
    		{
    		int _type = STRING;
    		int _channel = DefaultTokenChannel;
    		// bek.g:315:5: ( '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"' )
    		DebugEnterAlt(1);
    		// bek.g:315:8: '\"' ( ESC_SEQ |~ ( '\\\\' | '\"' ) )* '\"'
    		{
    		DebugLocation(315, 8);
    		Match('\"'); 
    		DebugLocation(315, 12);
    		// bek.g:315:12: ( ESC_SEQ |~ ( '\\\\' | '\"' ) )*
    		try { DebugEnterSubRule(14);
    		while (true)
    		{
    			int alt14=3;
    			try { DebugEnterDecision(14, decisionCanBacktrack[14]);
    			int LA14_1 = input.LA(1);

    			if ((LA14_1=='\\'))
    			{
    				alt14 = 1;
    			}
    			else if (((LA14_1>='\u0000' && LA14_1<='!')||(LA14_1>='#' && LA14_1<='[')||(LA14_1>=']' && LA14_1<='\uFFFF')))
    			{
    				alt14 = 2;
    			}


    			} finally { DebugExitDecision(14); }
    			switch ( alt14 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// bek.g:315:14: ESC_SEQ
    				{
    				DebugLocation(315, 14);
    				mESC_SEQ(); 

    				}
    				break;
    			case 2:
    				DebugEnterAlt(2);
    				// bek.g:315:24: ~ ( '\\\\' | '\"' )
    				{
    				DebugLocation(315, 24);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop14;
    			}
    		}

    		loop14:
    			;

    		} finally { DebugExitSubRule(14); }

    		DebugLocation(315, 39);
    		Match('\"'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("STRING", 38);
    		LeaveRule("STRING", 38);
    		LeaveRule_STRING();
        }
    }
    // $ANTLR end "STRING"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_LSTRING() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_LSTRING() {}

    // $ANTLR start "LSTRING"
    [GrammarRule("LSTRING")]
    private void mLSTRING()
    {
    	EnterRule_LSTRING();
    	EnterRule("LSTRING", 39);
    	TraceIn("LSTRING", 39);
    		try
    		{
    		int _type = LSTRING;
    		int _channel = DefaultTokenChannel;
    		// bek.g:319:5: ( '@' '\"' (~ ( '\"' ) )* '\"' )
    		DebugEnterAlt(1);
    		// bek.g:319:8: '@' '\"' (~ ( '\"' ) )* '\"'
    		{
    		DebugLocation(319, 8);
    		Match('@'); 
    		DebugLocation(319, 12);
    		Match('\"'); 
    		DebugLocation(319, 16);
    		// bek.g:319:16: (~ ( '\"' ) )*
    		try { DebugEnterSubRule(15);
    		while (true)
    		{
    			int alt15=2;
    			try { DebugEnterDecision(15, decisionCanBacktrack[15]);
    			int LA15_1 = input.LA(1);

    			if (((LA15_1>='\u0000' && LA15_1<='!')||(LA15_1>='#' && LA15_1<='\uFFFF')))
    			{
    				alt15 = 1;
    			}


    			} finally { DebugExitDecision(15); }
    			switch ( alt15 )
    			{
    			case 1:
    				DebugEnterAlt(1);
    				// bek.g:
    				{
    				DebugLocation(319, 16);
    				input.Consume();


    				}
    				break;

    			default:
    				goto loop15;
    			}
    		}

    		loop15:
    			;

    		} finally { DebugExitSubRule(15); }

    		DebugLocation(319, 26);
    		Match('\"'); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("LSTRING", 39);
    		LeaveRule("LSTRING", 39);
    		LeaveRule_LSTRING();
        }
    }
    // $ANTLR end "LSTRING"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_CHAR() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_CHAR() {}

    // $ANTLR start "CHAR"
    [GrammarRule("CHAR")]
    private void mCHAR()
    {
    	EnterRule_CHAR();
    	EnterRule("CHAR", 40);
    	TraceIn("CHAR", 40);
    		try
    		{
    		int _type = CHAR;
    		int _channel = DefaultTokenChannel;
    		// bek.g:323:2: ( '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\'' )
    		DebugEnterAlt(1);
    		// bek.g:323:4: '\\'' ( ESC_SEQ |~ ( '\\'' | '\\\\' ) ) '\\''
    		{
    		DebugLocation(323, 4);
    		Match('\''); 
    		DebugLocation(323, 9);
    		// bek.g:323:9: ( ESC_SEQ |~ ( '\\'' | '\\\\' ) )
    		int alt16=2;
    		try { DebugEnterSubRule(16);
    		try { DebugEnterDecision(16, decisionCanBacktrack[16]);
    		int LA16_1 = input.LA(1);

    		if ((LA16_1=='\\'))
    		{
    			alt16 = 1;
    		}
    		else if (((LA16_1>='\u0000' && LA16_1<='&')||(LA16_1>='(' && LA16_1<='[')||(LA16_1>=']' && LA16_1<='\uFFFF')))
    		{
    			alt16 = 2;
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 16, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(16); }
    		switch (alt16)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// bek.g:323:11: ESC_SEQ
    			{
    			DebugLocation(323, 11);
    			mESC_SEQ(); 

    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// bek.g:323:21: ~ ( '\\'' | '\\\\' )
    			{
    			DebugLocation(323, 21);
    			input.Consume();


    			}
    			break;

    		}
    		} finally { DebugExitSubRule(16); }

    		DebugLocation(323, 37);
    		Match('\''); 

    		}

    		state.type = _type;
    		state.channel = _channel;
    	}
    	finally
    	{
    		TraceOut("CHAR", 40);
    		LeaveRule("CHAR", 40);
    		LeaveRule_CHAR();
        }
    }
    // $ANTLR end "CHAR"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_ESC_SEQ() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_ESC_SEQ() {}

    // $ANTLR start "ESC_SEQ"
    [GrammarRule("ESC_SEQ")]
    private void mESC_SEQ()
    {
    	EnterRule_ESC_SEQ();
    	EnterRule("ESC_SEQ", 41);
    	TraceIn("ESC_SEQ", 41);
    		try
    		{
    		// bek.g:329:5: ( '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' ) | UNICODE_ESC | HEX_SEQ )
    		int alt17=3;
    		try { DebugEnterDecision(17, decisionCanBacktrack[17]);
    		int LA17_1 = input.LA(1);

    		if ((LA17_1=='\\'))
    		{
    			switch (input.LA(2))
    			{
    			case '\"':
    			case '\'':
    			case '\\':
    			case 'b':
    			case 'f':
    			case 'n':
    			case 'r':
    			case 't':
    				{
    				alt17 = 1;
    				}
    				break;
    			case 'u':
    				{
    				alt17 = 2;
    				}
    				break;
    			case 'x':
    				{
    				alt17 = 3;
    				}
    				break;
    			default:
    				{
    					NoViableAltException nvae = new NoViableAltException("", 17, 1, input, 2);
    					DebugRecognitionException(nvae);
    					throw nvae;
    				}
    			}

    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 17, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(17); }
    		switch (alt17)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// bek.g:329:9: '\\\\' ( 'b' | 't' | 'n' | 'f' | 'r' | '\\\"' | '\\'' | '\\\\' )
    			{
    			DebugLocation(329, 9);
    			Match('\\'); 
    			DebugLocation(329, 14);
    			input.Consume();


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// bek.g:330:9: UNICODE_ESC
    			{
    			DebugLocation(330, 9);
    			mUNICODE_ESC(); 

    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// bek.g:331:6: HEX_SEQ
    			{
    			DebugLocation(331, 6);
    			mHEX_SEQ(); 

    			}
    			break;

    		}
    	}
    	finally
    	{
    		TraceOut("ESC_SEQ", 41);
    		LeaveRule("ESC_SEQ", 41);
    		LeaveRule_ESC_SEQ();
        }
    }
    // $ANTLR end "ESC_SEQ"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_HEX_DIGIT() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_HEX_DIGIT() {}

    // $ANTLR start "HEX_DIGIT"
    [GrammarRule("HEX_DIGIT")]
    private void mHEX_DIGIT()
    {
    	EnterRule_HEX_DIGIT();
    	EnterRule("HEX_DIGIT", 42);
    	TraceIn("HEX_DIGIT", 42);
    		try
    		{
    		// bek.g:335:11: ( ( '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' ) )
    		DebugEnterAlt(1);
    		// bek.g:
    		{
    		DebugLocation(335, 11);
    		if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='F')||(input.LA(1)>='a' && input.LA(1)<='f'))
    		{
    			input.Consume();
    		}
    		else
    		{
    			MismatchedSetException mse = new MismatchedSetException(null,input);
    			DebugRecognitionException(mse);
    			Recover(mse);
    			throw mse;
    		}


    		}

    	}
    	finally
    	{
    		TraceOut("HEX_DIGIT", 42);
    		LeaveRule("HEX_DIGIT", 42);
    		LeaveRule_HEX_DIGIT();
        }
    }
    // $ANTLR end "HEX_DIGIT"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_OCTAL_ESC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_OCTAL_ESC() {}

    // $ANTLR start "OCTAL_ESC"
    [GrammarRule("OCTAL_ESC")]
    private void mOCTAL_ESC()
    {
    	EnterRule_OCTAL_ESC();
    	EnterRule("OCTAL_ESC", 43);
    	TraceIn("OCTAL_ESC", 43);
    		try
    		{
    		// bek.g:340:5: ( '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) ( '0' .. '7' ) | '\\\\' ( '0' .. '7' ) )
    		int alt18=3;
    		try { DebugEnterDecision(18, decisionCanBacktrack[18]);
    		int LA18_1 = input.LA(1);

    		if ((LA18_1=='\\'))
    		{
    			int LA18_2 = input.LA(2);

    			if (((LA18_2>='0' && LA18_2<='3')))
    			{
    				int LA18_3 = input.LA(3);

    				if (((LA18_3>='0' && LA18_3<='7')))
    				{
    					int LA18_4 = input.LA(4);

    					if (((LA18_4>='0' && LA18_4<='7')))
    					{
    						alt18 = 1;
    					}
    					else
    					{
    						alt18 = 2;
    					}
    				}
    				else
    				{
    					alt18 = 3;
    				}
    			}
    			else if (((LA18_2>='4' && LA18_2<='7')))
    			{
    				int LA18_3 = input.LA(3);

    				if (((LA18_3>='0' && LA18_3<='7')))
    				{
    					alt18 = 2;
    				}
    				else
    				{
    					alt18 = 3;
    				}
    			}
    			else
    			{
    				NoViableAltException nvae = new NoViableAltException("", 18, 1, input, 2);
    				DebugRecognitionException(nvae);
    				throw nvae;
    			}
    		}
    		else
    		{
    			NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
    			DebugRecognitionException(nvae);
    			throw nvae;
    		}
    		} finally { DebugExitDecision(18); }
    		switch (alt18)
    		{
    		case 1:
    			DebugEnterAlt(1);
    			// bek.g:340:9: '\\\\' ( '0' .. '3' ) ( '0' .. '7' ) ( '0' .. '7' )
    			{
    			DebugLocation(340, 9);
    			Match('\\'); 
    			DebugLocation(340, 14);
    			input.Consume();

    			DebugLocation(340, 25);
    			input.Consume();

    			DebugLocation(340, 36);
    			input.Consume();


    			}
    			break;
    		case 2:
    			DebugEnterAlt(2);
    			// bek.g:341:9: '\\\\' ( '0' .. '7' ) ( '0' .. '7' )
    			{
    			DebugLocation(341, 9);
    			Match('\\'); 
    			DebugLocation(341, 14);
    			input.Consume();

    			DebugLocation(341, 25);
    			input.Consume();


    			}
    			break;
    		case 3:
    			DebugEnterAlt(3);
    			// bek.g:342:9: '\\\\' ( '0' .. '7' )
    			{
    			DebugLocation(342, 9);
    			Match('\\'); 
    			DebugLocation(342, 14);
    			input.Consume();


    			}
    			break;

    		}
    	}
    	finally
    	{
    		TraceOut("OCTAL_ESC", 43);
    		LeaveRule("OCTAL_ESC", 43);
    		LeaveRule_OCTAL_ESC();
        }
    }
    // $ANTLR end "OCTAL_ESC"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_UNICODE_ESC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_UNICODE_ESC() {}

    // $ANTLR start "UNICODE_ESC"
    [GrammarRule("UNICODE_ESC")]
    private void mUNICODE_ESC()
    {
    	EnterRule_UNICODE_ESC();
    	EnterRule("UNICODE_ESC", 44);
    	TraceIn("UNICODE_ESC", 44);
    		try
    		{
    		// bek.g:347:5: ( '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
    		DebugEnterAlt(1);
    		// bek.g:347:9: '\\\\' 'u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    		{
    		DebugLocation(347, 9);
    		Match('\\'); 
    		DebugLocation(347, 14);
    		Match('u'); 
    		DebugLocation(347, 18);
    		mHEX_DIGIT(); 
    		DebugLocation(347, 28);
    		mHEX_DIGIT(); 
    		DebugLocation(347, 38);
    		mHEX_DIGIT(); 
    		DebugLocation(347, 48);
    		mHEX_DIGIT(); 

    		}

    	}
    	finally
    	{
    		TraceOut("UNICODE_ESC", 44);
    		LeaveRule("UNICODE_ESC", 44);
    		LeaveRule_UNICODE_ESC();
        }
    }
    // $ANTLR end "UNICODE_ESC"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_BIG_UNICODE_ESC() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_BIG_UNICODE_ESC() {}

    // $ANTLR start "BIG_UNICODE_ESC"
    [GrammarRule("BIG_UNICODE_ESC")]
    private void mBIG_UNICODE_ESC()
    {
    	EnterRule_BIG_UNICODE_ESC();
    	EnterRule("BIG_UNICODE_ESC", 45);
    	TraceIn("BIG_UNICODE_ESC", 45);
    		try
    		{
    		// bek.g:352:5: ( '\\\\' 'U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT )
    		DebugEnterAlt(1);
    		// bek.g:352:9: '\\\\' 'U' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
    		{
    		DebugLocation(352, 9);
    		Match('\\'); 
    		DebugLocation(352, 14);
    		Match('U'); 
    		DebugLocation(352, 18);
    		mHEX_DIGIT(); 
    		DebugLocation(352, 28);
    		mHEX_DIGIT(); 
    		DebugLocation(352, 38);
    		mHEX_DIGIT(); 
    		DebugLocation(352, 48);
    		mHEX_DIGIT(); 
    		DebugLocation(352, 58);
    		mHEX_DIGIT(); 
    		DebugLocation(352, 68);
    		mHEX_DIGIT(); 
    		DebugLocation(352, 78);
    		mHEX_DIGIT(); 
    		DebugLocation(352, 88);
    		mHEX_DIGIT(); 

    		}

    	}
    	finally
    	{
    		TraceOut("BIG_UNICODE_ESC", 45);
    		LeaveRule("BIG_UNICODE_ESC", 45);
    		LeaveRule_BIG_UNICODE_ESC();
        }
    }
    // $ANTLR end "BIG_UNICODE_ESC"

    [Conditional("ANTLR_TRACE")]
    protected virtual void EnterRule_HEX_SEQ() {}
    [Conditional("ANTLR_TRACE")]
    protected virtual void LeaveRule_HEX_SEQ() {}

    // $ANTLR start "HEX_SEQ"
    [GrammarRule("HEX_SEQ")]
    private void mHEX_SEQ()
    {
    	EnterRule_HEX_SEQ();
    	EnterRule("HEX_SEQ", 46);
    	TraceIn("HEX_SEQ", 46);
    		try
    		{
    		// bek.g:357:2: ( '\\\\' 'x' HEX_DIGIT HEX_DIGIT )
    		DebugEnterAlt(1);
    		// bek.g:357:4: '\\\\' 'x' HEX_DIGIT HEX_DIGIT
    		{
    		DebugLocation(357, 4);
    		Match('\\'); 
    		DebugLocation(357, 9);
    		Match('x'); 
    		DebugLocation(357, 13);
    		mHEX_DIGIT(); 
    		DebugLocation(357, 23);
    		mHEX_DIGIT(); 

    		}

    	}
    	finally
    	{
    		TraceOut("HEX_SEQ", 46);
    		LeaveRule("HEX_SEQ", 46);
    		LeaveRule_HEX_SEQ();
        }
    }
    // $ANTLR end "HEX_SEQ"

    public override void mTokens()
    {
    	// bek.g:1:8: ( T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | INFIX_ARITHM_OP | UNARY_OP | ID | INT | COMMENT | WS | STRING | LSTRING | CHAR )
    	int alt19=40;
    	try { DebugEnterDecision(19, decisionCanBacktrack[19]);
    	try
    	{
    		alt19 = dfa19.Predict(input);
    	}
    	catch (NoViableAltException nvae)
    	{
    		DebugRecognitionException(nvae);
    		throw;
    	}
    	} finally { DebugExitDecision(19); }
    	switch (alt19)
    	{
    	case 1:
    		DebugEnterAlt(1);
    		// bek.g:1:10: T__19
    		{
    		DebugLocation(1, 10);
    		mT__19(); 

    		}
    		break;
    	case 2:
    		DebugEnterAlt(2);
    		// bek.g:1:16: T__20
    		{
    		DebugLocation(1, 16);
    		mT__20(); 

    		}
    		break;
    	case 3:
    		DebugEnterAlt(3);
    		// bek.g:1:22: T__21
    		{
    		DebugLocation(1, 22);
    		mT__21(); 

    		}
    		break;
    	case 4:
    		DebugEnterAlt(4);
    		// bek.g:1:28: T__22
    		{
    		DebugLocation(1, 28);
    		mT__22(); 

    		}
    		break;
    	case 5:
    		DebugEnterAlt(5);
    		// bek.g:1:34: T__23
    		{
    		DebugLocation(1, 34);
    		mT__23(); 

    		}
    		break;
    	case 6:
    		DebugEnterAlt(6);
    		// bek.g:1:40: T__24
    		{
    		DebugLocation(1, 40);
    		mT__24(); 

    		}
    		break;
    	case 7:
    		DebugEnterAlt(7);
    		// bek.g:1:46: T__25
    		{
    		DebugLocation(1, 46);
    		mT__25(); 

    		}
    		break;
    	case 8:
    		DebugEnterAlt(8);
    		// bek.g:1:52: T__26
    		{
    		DebugLocation(1, 52);
    		mT__26(); 

    		}
    		break;
    	case 9:
    		DebugEnterAlt(9);
    		// bek.g:1:58: T__27
    		{
    		DebugLocation(1, 58);
    		mT__27(); 

    		}
    		break;
    	case 10:
    		DebugEnterAlt(10);
    		// bek.g:1:64: T__28
    		{
    		DebugLocation(1, 64);
    		mT__28(); 

    		}
    		break;
    	case 11:
    		DebugEnterAlt(11);
    		// bek.g:1:70: T__29
    		{
    		DebugLocation(1, 70);
    		mT__29(); 

    		}
    		break;
    	case 12:
    		DebugEnterAlt(12);
    		// bek.g:1:76: T__30
    		{
    		DebugLocation(1, 76);
    		mT__30(); 

    		}
    		break;
    	case 13:
    		DebugEnterAlt(13);
    		// bek.g:1:82: T__31
    		{
    		DebugLocation(1, 82);
    		mT__31(); 

    		}
    		break;
    	case 14:
    		DebugEnterAlt(14);
    		// bek.g:1:88: T__32
    		{
    		DebugLocation(1, 88);
    		mT__32(); 

    		}
    		break;
    	case 15:
    		DebugEnterAlt(15);
    		// bek.g:1:94: T__33
    		{
    		DebugLocation(1, 94);
    		mT__33(); 

    		}
    		break;
    	case 16:
    		DebugEnterAlt(16);
    		// bek.g:1:100: T__34
    		{
    		DebugLocation(1, 100);
    		mT__34(); 

    		}
    		break;
    	case 17:
    		DebugEnterAlt(17);
    		// bek.g:1:106: T__35
    		{
    		DebugLocation(1, 106);
    		mT__35(); 

    		}
    		break;
    	case 18:
    		DebugEnterAlt(18);
    		// bek.g:1:112: T__36
    		{
    		DebugLocation(1, 112);
    		mT__36(); 

    		}
    		break;
    	case 19:
    		DebugEnterAlt(19);
    		// bek.g:1:118: T__37
    		{
    		DebugLocation(1, 118);
    		mT__37(); 

    		}
    		break;
    	case 20:
    		DebugEnterAlt(20);
    		// bek.g:1:124: T__38
    		{
    		DebugLocation(1, 124);
    		mT__38(); 

    		}
    		break;
    	case 21:
    		DebugEnterAlt(21);
    		// bek.g:1:130: T__39
    		{
    		DebugLocation(1, 130);
    		mT__39(); 

    		}
    		break;
    	case 22:
    		DebugEnterAlt(22);
    		// bek.g:1:136: T__40
    		{
    		DebugLocation(1, 136);
    		mT__40(); 

    		}
    		break;
    	case 23:
    		DebugEnterAlt(23);
    		// bek.g:1:142: T__41
    		{
    		DebugLocation(1, 142);
    		mT__41(); 

    		}
    		break;
    	case 24:
    		DebugEnterAlt(24);
    		// bek.g:1:148: T__42
    		{
    		DebugLocation(1, 148);
    		mT__42(); 

    		}
    		break;
    	case 25:
    		DebugEnterAlt(25);
    		// bek.g:1:154: T__43
    		{
    		DebugLocation(1, 154);
    		mT__43(); 

    		}
    		break;
    	case 26:
    		DebugEnterAlt(26);
    		// bek.g:1:160: T__44
    		{
    		DebugLocation(1, 160);
    		mT__44(); 

    		}
    		break;
    	case 27:
    		DebugEnterAlt(27);
    		// bek.g:1:166: T__45
    		{
    		DebugLocation(1, 166);
    		mT__45(); 

    		}
    		break;
    	case 28:
    		DebugEnterAlt(28);
    		// bek.g:1:172: T__46
    		{
    		DebugLocation(1, 172);
    		mT__46(); 

    		}
    		break;
    	case 29:
    		DebugEnterAlt(29);
    		// bek.g:1:178: T__47
    		{
    		DebugLocation(1, 178);
    		mT__47(); 

    		}
    		break;
    	case 30:
    		DebugEnterAlt(30);
    		// bek.g:1:184: T__48
    		{
    		DebugLocation(1, 184);
    		mT__48(); 

    		}
    		break;
    	case 31:
    		DebugEnterAlt(31);
    		// bek.g:1:190: T__49
    		{
    		DebugLocation(1, 190);
    		mT__49(); 

    		}
    		break;
    	case 32:
    		DebugEnterAlt(32);
    		// bek.g:1:196: INFIX_ARITHM_OP
    		{
    		DebugLocation(1, 196);
    		mINFIX_ARITHM_OP(); 

    		}
    		break;
    	case 33:
    		DebugEnterAlt(33);
    		// bek.g:1:212: UNARY_OP
    		{
    		DebugLocation(1, 212);
    		mUNARY_OP(); 

    		}
    		break;
    	case 34:
    		DebugEnterAlt(34);
    		// bek.g:1:221: ID
    		{
    		DebugLocation(1, 221);
    		mID(); 

    		}
    		break;
    	case 35:
    		DebugEnterAlt(35);
    		// bek.g:1:224: INT
    		{
    		DebugLocation(1, 224);
    		mINT(); 

    		}
    		break;
    	case 36:
    		DebugEnterAlt(36);
    		// bek.g:1:228: COMMENT
    		{
    		DebugLocation(1, 228);
    		mCOMMENT(); 

    		}
    		break;
    	case 37:
    		DebugEnterAlt(37);
    		// bek.g:1:236: WS
    		{
    		DebugLocation(1, 236);
    		mWS(); 

    		}
    		break;
    	case 38:
    		DebugEnterAlt(38);
    		// bek.g:1:239: STRING
    		{
    		DebugLocation(1, 239);
    		mSTRING(); 

    		}
    		break;
    	case 39:
    		DebugEnterAlt(39);
    		// bek.g:1:246: LSTRING
    		{
    		DebugLocation(1, 246);
    		mLSTRING(); 

    		}
    		break;
    	case 40:
    		DebugEnterAlt(40);
    		// bek.g:1:254: CHAR
    		{
    		DebugLocation(1, 254);
    		mCHAR(); 

    		}
    		break;

    	}

    }


	#region DFA
	DFA19 dfa19;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa19 = new DFA19(this);
	}

	private class DFA19 : DFA
	{
		private const string DFA19_eotS =
			"\x1\xFFFF\x1\x19\x5\xFFFF\x1\x24\x1\xFFFF\x1\x26\x2\xFFFF\x9\x1C\x1\xFFFF"+
			"\x1\x19\x1\xFFFF\x1\x19\x1\xFFFF\x1\x1B\xA\xFFFF\x1\x19\x1\xFFFF\x5\x1C"+
			"\x1\x3D\x1\x3E\x7\x1C\x3\xFFFF\x2\x1C\x1\x49\x2\x1C\x2\xFFFF\x8\x1C\x1"+
			"\x54\x1\x55\x1\xFFFF\x2\x1C\x1\x58\x4\x1C\x1\x5D\x1\x5E\x1\x1C\x2\xFFFF"+
			"\x1\x60\x1\x1C\x1\xFFFF\x1\x1C\x1\x63\x2\x1C\x2\xFFFF\x1\x66\x1\xFFFF"+
			"\x2\x1C\x1\xFFFF\x1\x1C\x1\x6A\x1\xFFFF\x1\x1C\x1\x6C\x1\x6D\x1\xFFFF"+
			"\x1\x6E\x3\xFFFF";
		private const string DFA19_eofS =
			"\x6F\xFFFF";
		private const string DFA19_minS =
			"\x1\x9\x1\x26\x5\xFFFF\x1\x3D\x1\xFFFF\x1\x3D\x2\xFFFF\x1\x61\x1\x6C"+
			"\x1\x61\x1\x66\x1\x72\x1\x61\x1\x6B\x1\x72\x1\x69\x1\xFFFF\x1\x7C\x1"+
			"\xFFFF\x1\x2A\x1\xFFFF\x1\x3D\xA\xFFFF\x1\x3E\x1\xFFFF\x2\x73\x1\x64"+
			"\x1\x6C\x1\x6E\x2\x30\x1\x65\x1\x6F\x1\x69\x1\x70\x1\x69\x1\x75\x1\x65"+
			"\x3\xFFFF\x2\x65\x1\x30\x1\x73\x1\x63\x2\xFFFF\x1\x72\x1\x67\x1\x73\x1"+
			"\x6C\x1\x75\x1\x70\x1\x65\x1\x6C\x2\x30\x1\xFFFF\x1\x65\x1\x74\x1\x30"+
			"\x1\x72\x1\x65\x1\x61\x1\x72\x2\x30\x1\x64\x2\xFFFF\x1\x30\x1\x69\x1"+
			"\xFFFF\x1\x61\x1\x30\x1\x63\x1\x6E\x2\xFFFF\x1\x30\x1\xFFFF\x1\x6F\x1"+
			"\x6D\x1\xFFFF\x1\x65\x1\x30\x1\xFFFF\x1\x6E\x2\x30\x1\xFFFF\x1\x30\x3"+
			"\xFFFF";
		private const string DFA19_maxS =
			"\x1\x7E\x1\x26\x5\xFFFF\x1\x3D\x1\xFFFF\x1\x3D\x2\xFFFF\x1\x61\x1\x6E"+
			"\x1\x75\x1\x74\x1\x72\x1\x65\x1\x6B\x1\x72\x1\x69\x1\xFFFF\x1\x7C\x1"+
			"\xFFFF\x1\x2F\x1\xFFFF\x1\x3D\xA\xFFFF\x1\x3E\x1\xFFFF\x2\x73\x1\x64"+
			"\x1\x6C\x1\x6E\x2\x7A\x1\x65\x1\x6F\x1\x69\x1\x74\x1\x69\x1\x75\x1\x65"+
			"\x3\xFFFF\x2\x65\x1\x7A\x1\x73\x1\x63\x2\xFFFF\x1\x72\x1\x67\x1\x73\x1"+
			"\x6C\x1\x75\x1\x70\x1\x65\x1\x6C\x2\x7A\x1\xFFFF\x1\x65\x1\x74\x1\x7A"+
			"\x1\x72\x1\x65\x1\x61\x1\x72\x2\x7A\x1\x64\x2\xFFFF\x1\x7A\x1\x69\x1"+
			"\xFFFF\x1\x61\x1\x7A\x1\x63\x1\x6E\x2\xFFFF\x1\x7A\x1\xFFFF\x1\x6F\x1"+
			"\x6D\x1\xFFFF\x1\x65\x1\x7A\x1\xFFFF\x1\x6E\x2\x7A\x1\xFFFF\x1\x7A\x3"+
			"\xFFFF";
		private const string DFA19_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\xFFFF\x1\x9\x1\xFFFF\x1\xC"+
			"\x1\xD\x9\xFFFF\x1\x1D\x1\xFFFF\x1\x1F\x1\xFFFF\x1\x20\x1\xFFFF\x1\x21"+
			"\x1\x22\x1\x23\x1\x25\x1\x26\x1\x27\x1\x28\x1\x1\x1\x8\x1\x7\x1\xFFFF"+
			"\x1\xA\xE\xFFFF\x1\x1E\x1\x24\x1\xB\x5\xFFFF\x1\x13\x1\x14\xA\xFFFF\x1"+
			"\x10\xA\xFFFF\x1\xE\x1\xF\x2\xFFFF\x1\x15\x4\xFFFF\x1\x1A\x1\x1B\x1\xFFFF"+
			"\x1\x11\x2\xFFFF\x1\x17\x2\xFFFF\x1\x1C\x3\xFFFF\x1\x19\x1\xFFFF\x1\x16"+
			"\x1\x18\x1\x12";
		private const string DFA19_specialS =
			"\x6F\xFFFF}>";
		private static readonly string[] DFA19_transitionS =
			{
				"\x2\x1E\x2\xFFFF\x1\x1E\x12\xFFFF\x1\x1E\x1\x1A\x1\x1F\x1\x1C\x1\xFFFF"+
				"\x1\x19\x1\x1\x1\x21\x1\x2\x1\x3\x1\x4\x1\x5\x1\x6\x1\x19\x1\xFFFF\x1"+
				"\x18\xA\x1D\x1\x7\x1\x8\x1\x19\x1\x9\x1\x19\x1\xFFFF\x1\x20\x1A\x1C"+
				"\x1\xA\x1\xFFFF\x1\xB\x1\x19\x1\x1C\x1\xFFFF\x2\x1C\x1\xC\x1\x1C\x1"+
				"\xD\x1\xE\x2\x1C\x1\xF\x6\x1C\x1\x10\x1\x1C\x1\x11\x1\x12\x1\x13\x4"+
				"\x1C\x1\x14\x1\x1C\x1\x15\x1\x16\x1\x17\x1\x1B",
				"\x1\x22",
				"",
				"",
				"",
				"",
				"",
				"\x1\x23",
				"",
				"\x1\x25",
				"",
				"",
				"\x1\x27",
				"\x1\x28\x1\xFFFF\x1\x29",
				"\x1\x2A\x13\xFFFF\x1\x2B",
				"\x1\x2C\x7\xFFFF\x1\x2D\x5\xFFFF\x1\x2E",
				"\x1\x2F",
				"\x1\x30\x3\xFFFF\x1\x31",
				"\x1\x32",
				"\x1\x33",
				"\x1\x34",
				"",
				"\x1\x35",
				"",
				"\x1\x36\x4\xFFFF\x1\x36",
				"",
				"\x1\x19",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x37",
				"",
				"\x1\x38",
				"\x1\x39",
				"\x1\x3A",
				"\x1\x3B",
				"\x1\x3C",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x3F",
				"\x1\x40",
				"\x1\x41",
				"\x1\x42\x3\xFFFF\x1\x43",
				"\x1\x44",
				"\x1\x45",
				"\x1\x46",
				"",
				"",
				"",
				"\x1\x47",
				"\x1\x48",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x4A",
				"\x1\x4B",
				"",
				"",
				"\x1\x4C",
				"\x1\x4D",
				"\x1\x4E",
				"\x1\x4F",
				"\x1\x50",
				"\x1\x51",
				"\x1\x52",
				"\x1\x53",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"\x1\x56",
				"\x1\x57",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x59",
				"\x1\x5A",
				"\x1\x5B",
				"\x1\x5C",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x5F",
				"",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x61",
				"",
				"\x1\x62",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\x1\x64",
				"\x1\x65",
				"",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"\x1\x67",
				"\x1\x68",
				"",
				"\x1\x69",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"\x1\x6B",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"\xA\x1C\x7\xFFFF\x1A\x1C\x4\xFFFF\x1\x1C\x1\xFFFF\x1A\x1C",
				"",
				"",
				""
			};

		private static readonly short[] DFA19_eot = DFA.UnpackEncodedString(DFA19_eotS);
		private static readonly short[] DFA19_eof = DFA.UnpackEncodedString(DFA19_eofS);
		private static readonly char[] DFA19_min = DFA.UnpackEncodedStringToUnsignedChars(DFA19_minS);
		private static readonly char[] DFA19_max = DFA.UnpackEncodedStringToUnsignedChars(DFA19_maxS);
		private static readonly short[] DFA19_accept = DFA.UnpackEncodedString(DFA19_acceptS);
		private static readonly short[] DFA19_special = DFA.UnpackEncodedString(DFA19_specialS);
		private static readonly short[][] DFA19_transition;

		static DFA19()
		{
			int numStates = DFA19_transitionS.Length;
			DFA19_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA19_transition[i] = DFA.UnpackEncodedString(DFA19_transitionS[i]);
			}
		}

		public DFA19( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 19;
			this.eot = DFA19_eot;
			this.eof = DFA19_eof;
			this.min = DFA19_min;
			this.max = DFA19_max;
			this.accept = DFA19_accept;
			this.special = DFA19_special;
			this.transition = DFA19_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( T__19 | T__20 | T__21 | T__22 | T__23 | T__24 | T__25 | T__26 | T__27 | T__28 | T__29 | T__30 | T__31 | T__32 | T__33 | T__34 | T__35 | T__36 | T__37 | T__38 | T__39 | T__40 | T__41 | T__42 | T__43 | T__44 | T__45 | T__46 | T__47 | T__48 | T__49 | INFIX_ARITHM_OP | UNARY_OP | ID | INT | COMMENT | WS | STRING | LSTRING | CHAR );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace Microsoft.Bek.Frontend.ParserImpl
