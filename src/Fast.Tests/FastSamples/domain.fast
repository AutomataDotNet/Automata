Alphabet A[r:real]{Z(0),B(2)}

Public Lang l1 : A {
     Z() where (r < 3.0)
   | B(x,y) where (r < 3.0) given (l2 x) (l2 y)
} 

Lang l2 : A {
     Z() where (r < 3.0)
   | B(x,y) where (r < 3.0) given (l1 x) (l1 y)
} 

Public Trans t1 : A -> A {
	 Z() where (r < 3.0) to (Z [(r - 0.5)])
   | B(x,y) where (r < 3.0) to (B [(r - 0.5)] (t2 x) (t2 y))      
}
 
Trans t2 : A -> A {
	 Z() where (r < 3.0) to (Z [(r - 0.5)])
   | B(x,y) where (r < 3.0) to (B [(r - 0.5)] (t1 x) (t1 y)) 
}

Def d_t : A := (domain t1)

Tree t_1 : A := (B [1.5] (Z [1.2]) (Z [1.4]))

Print(contains l1 t_1)

Print(contains d_t t_1)


Tree t_2 : A := (B [3.0] (Z [1.2]) (Z [1.4]))

Print(contains l1 t_2)

Print(contains d_t t_2)