Fun even (i:int) : bool := ((i mod 2) == 0)
Fun odd (i:int) : bool := (not (even i))
Alphabet BT [i:int] {Nil(0),Bin(2)}

Lang evenTree : BT {
     Nil()    where (even i)
   | Bin(l,r) where (even i) given (evenTree l) (evenTree r)
} 

Lang oddTree : BT {
     Nil()    where (odd i)
   | Bin(l,r) where (odd i) given (oddTree l) (oddTree r)
}

Public Trans mapInc : BT -> BT {
     Nil()    to    (Nil [(i + 1)])
   | Bin(l,r) to (Bin [(i + 1)] (mapInc l) (mapInc r))   
} 

Public Trans mapIncBuggy : BT -> BT {
     Nil()    to    (Nil [(i + 1)])
   | Bin(l,r) to (Bin [(i + 1)] (mapInc l) r)   
} 

AssertFalse (is_empty_lang evenTree)

AssertTrue (typecheck evenTree mapInc oddTree)
AssertFalse (typecheck evenTree mapIncBuggy oddTree)
AssertTrue (typecheck oddTree mapInc evenTree)
AssertFalse (typecheck oddTree mapIncBuggy evenTree)


