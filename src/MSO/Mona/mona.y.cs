// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  MARGUS-X1
// DateTime: 5/18/2016 1:40:54 PM
// UserName: margus
// Input file <mona.y - 5/18/2016 1:49:57 AM>

// options: babel lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Microsoft.Automata.MSO.Mona
{
public enum Tokens {
    error=1,EOF=2,WS1S=3,WS2S=4,M2LSTR=5,M2LTREE=6,
    LT=7,GT=8,LE=9,GE=10,EQ=11,NE=12,
    PLUS=13,MINUS=14,TIMES=15,DIV=16,MOD=17,SETMINUS=18,
    TRUE=19,FALSE=20,NOT=21,AND=22,OR=23,IMPLIES=24,
    EQUIV=25,IN=26,NOTIN=27,SUBSET=28,EMPTY=29,RESTRICT=30,
    EX0=31,EX1=32,EX2=33,ALL0=34,ALL1=35,ALL2=36,
    LET0=37,LET1=38,LET2=39,VAR0=40,VAR1=41,VAR2=42,
    UNIVERSE=43,WHERE=44,PREFIX=45,MAX=46,MIN=47,PCONST=48,
    UNION=49,INTER=50,ARROW=51,NAME=52,NUMBER=53,LBRACKET=54,
    RBRACKET=55,LBRACE=56,RBRACE=57,LPAR=58,RPAR=59,COMMA=60,
    COLON=61,SEMICOLON=62,DOT=63,UP=64,BADCHAR=65,maxParseToken=66,
    COMMENT=67};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<object,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }

  protected abstract int CurrentSc { get; set; }
  //
  // Override the virtual EolState property if the scanner state is more
  // complicated then a simple copy of the current start state ordinal
  //
  public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

// Interface class for 'colorizing' scanners
public interface IColorScan {
  void SetSource(string source, int offset);
  int GetNext(ref int state, out int start, out int end);
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public object yylval;
  public LexLocation yylloc;
  public ScanObj( int t, object val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public partial class MonaParser: ShiftReduceParser<object, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[71];
  private static State[] states = new State[135];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "header", "decls", "decl", "decls_", "var_decl", 
      "formula", "term", "q0", "names", "q", "univs", "vars", "exps", "exp", 
      "names_", "univs_", "var_kind", };

  static MonaParser() {
    states[0] = new State(new int[]{3,130,4,131,5,132,6,133,41,127,42,128,19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-1,1,-3,3,-4,134,-5,6,-7,13,-19,14,-8,129,-10,86,-12,91,-9,101});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{62,4});
    states[4] = new State(new int[]{41,127,42,128,19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-4,5,-5,6,-7,13,-19,14,-8,129,-10,86,-12,91,-9,101});
    states[5] = new State(-2);
    states[6] = new State(new int[]{62,7});
    states[7] = new State(new int[]{2,9,41,127,42,128,19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-6,8,-5,10,-7,13,-19,14,-8,129,-10,86,-12,91,-9,101});
    states[8] = new State(-8);
    states[9] = new State(-9);
    states[10] = new State(new int[]{62,11});
    states[11] = new State(new int[]{2,9,41,127,42,128,19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-6,12,-5,10,-7,13,-19,14,-8,129,-10,86,-12,91,-9,101});
    states[12] = new State(-10);
    states[13] = new State(-11);
    states[14] = new State(new int[]{54,15,52,18},new int[]{-14,126});
    states[15] = new State(new int[]{52,111},new int[]{-13,16});
    states[16] = new State(new int[]{52,18},new int[]{-14,17});
    states[17] = new State(-67);
    states[18] = new State(new int[]{60,19,44,21,62,-56,61,-56});
    states[19] = new State(new int[]{52,18},new int[]{-14,20});
    states[20] = new State(-53);
    states[21] = new State(new int[]{19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-8,22,-10,86,-12,91,-9,101});
    states[22] = new State(new int[]{60,23,22,25,23,27,24,29,25,31,62,-55,61,-55});
    states[23] = new State(new int[]{52,18},new int[]{-14,24});
    states[24] = new State(-54);
    states[25] = new State(new int[]{19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-8,26,-10,86,-12,91,-9,101});
    states[26] = new State(-22);
    states[27] = new State(new int[]{19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-8,28,-10,86,-12,91,-9,101});
    states[28] = new State(new int[]{22,25,23,-23,24,-23,25,-23,62,-23,60,-23,61,-23,59,-23});
    states[29] = new State(new int[]{19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-8,30,-10,86,-12,91,-9,101});
    states[30] = new State(new int[]{22,25,23,27,24,29,25,-24,62,-24,60,-24,61,-24,59,-24});
    states[31] = new State(new int[]{19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-8,32,-10,86,-12,91,-9,101});
    states[32] = new State(new int[]{22,25,23,27,24,29,25,31,62,-25,60,-25,61,-25,59,-25});
    states[33] = new State(-13);
    states[34] = new State(-14);
    states[35] = new State(new int[]{19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-8,36,-9,38,-10,86,-12,91});
    states[36] = new State(new int[]{59,37,22,25,23,27,24,29,25,31});
    states[37] = new State(-15);
    states[38] = new State(new int[]{59,39,11,40,13,42,14,44,15,46,16,48,17,50,12,60,8,62,10,64,7,66,9,68,26,70,27,72,28,74});
    states[39] = new State(-59);
    states[40] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,41});
    states[41] = new State(new int[]{13,42,14,44,15,46,16,48,17,50,22,-26,23,-26,24,-26,25,-26,62,-26,60,-26,61,-26,59,-26});
    states[42] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,43});
    states[43] = new State(new int[]{13,-60,14,-60,15,46,16,48,17,50,11,-60,12,-60,8,-60,10,-60,7,-60,9,-60,26,-60,27,-60,28,-60,59,-60,22,-60,23,-60,24,-60,25,-60,62,-60,60,-60,61,-60});
    states[44] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,45});
    states[45] = new State(new int[]{13,-61,14,-61,15,46,16,48,17,50,11,-61,12,-61,8,-61,10,-61,7,-61,9,-61,26,-61,27,-61,28,-61,59,-61,22,-61,23,-61,24,-61,25,-61,62,-61,60,-61,61,-61});
    states[46] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,47});
    states[47] = new State(-62);
    states[48] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,49});
    states[49] = new State(-63);
    states[50] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,51});
    states[51] = new State(-64);
    states[52] = new State(-57);
    states[53] = new State(-58);
    states[54] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,55});
    states[55] = new State(new int[]{59,39,13,42,14,44,15,46,16,48,17,50});
    states[56] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,57});
    states[57] = new State(new int[]{13,42,14,44,15,46,16,48,17,50,11,-65,12,-65,8,-65,10,-65,7,-65,9,-65,26,-65,27,-65,28,-65,59,-65,22,-65,23,-65,24,-65,25,-65,62,-65,60,-65,61,-65});
    states[58] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,59});
    states[59] = new State(new int[]{13,42,14,44,15,46,16,48,17,50,11,-66,12,-66,8,-66,10,-66,7,-66,9,-66,26,-66,27,-66,28,-66,59,-66,22,-66,23,-66,24,-66,25,-66,62,-66,60,-66,61,-66});
    states[60] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,61});
    states[61] = new State(new int[]{13,42,14,44,15,46,16,48,17,50,22,-27,23,-27,24,-27,25,-27,62,-27,60,-27,61,-27,59,-27});
    states[62] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,63});
    states[63] = new State(new int[]{13,42,14,44,15,46,16,48,17,50,22,-28,23,-28,24,-28,25,-28,62,-28,60,-28,61,-28,59,-28});
    states[64] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,65});
    states[65] = new State(new int[]{13,42,14,44,15,46,16,48,17,50,22,-29,23,-29,24,-29,25,-29,62,-29,60,-29,61,-29,59,-29});
    states[66] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,67});
    states[67] = new State(new int[]{13,42,14,44,15,46,16,48,17,50,22,-30,23,-30,24,-30,25,-30,62,-30,60,-30,61,-30,59,-30});
    states[68] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,69});
    states[69] = new State(new int[]{13,42,14,44,15,46,16,48,17,50,22,-31,23,-31,24,-31,25,-31,62,-31,60,-31,61,-31,59,-31});
    states[70] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,71});
    states[71] = new State(new int[]{13,42,14,44,15,46,16,48,17,50,22,-32,23,-32,24,-32,25,-32,62,-32,60,-32,61,-32,59,-32});
    states[72] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,73});
    states[73] = new State(new int[]{13,42,14,44,15,46,16,48,17,50,22,-33,23,-33,24,-33,25,-33,62,-33,60,-33,61,-33,59,-33});
    states[74] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,75});
    states[75] = new State(new int[]{13,42,14,44,15,46,16,48,17,50,22,-34,23,-34,24,-34,25,-34,62,-34,60,-34,61,-34,59,-34});
    states[76] = new State(new int[]{19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-8,77,-10,86,-12,91,-9,101});
    states[77] = new State(-16);
    states[78] = new State(new int[]{58,79});
    states[79] = new State(new int[]{19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-8,80,-10,86,-12,91,-9,101});
    states[80] = new State(new int[]{59,81,22,25,23,27,24,29,25,31});
    states[81] = new State(-17);
    states[82] = new State(new int[]{58,83});
    states[83] = new State(new int[]{52,52,53,53,58,54,47,56,46,58},new int[]{-9,84});
    states[84] = new State(new int[]{59,85,13,42,14,44,15,46,16,48,17,50});
    states[85] = new State(-18);
    states[86] = new State(new int[]{52,120},new int[]{-11,87});
    states[87] = new State(new int[]{19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-8,88,-10,86,-12,91,-9,101});
    states[88] = new State(new int[]{22,25,23,27,24,29,25,31,62,-19,60,-19,61,-19,59,-19});
    states[89] = new State(-41);
    states[90] = new State(-42);
    states[91] = new State(new int[]{55,92,52,18},new int[]{-14,117});
    states[92] = new State(new int[]{52,111},new int[]{-13,93});
    states[93] = new State(new int[]{52,18},new int[]{-14,94});
    states[94] = new State(new int[]{61,95});
    states[95] = new State(new int[]{19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-8,96,-10,86,-12,91,-9,101});
    states[96] = new State(new int[]{22,25,23,27,24,29,25,31,62,-20,60,-20,61,-20,59,-20});
    states[97] = new State(-37);
    states[98] = new State(-38);
    states[99] = new State(-39);
    states[100] = new State(-40);
    states[101] = new State(new int[]{11,40,13,42,14,44,15,46,16,48,17,50,12,60,8,62,10,64,7,66,9,68,26,70,27,72,28,74});
    states[102] = new State(new int[]{58,103,11,-57,13,-57,14,-57,15,-57,16,-57,17,-57,12,-57,8,-57,10,-57,7,-57,9,-57,26,-57,27,-57,28,-57,59,-36,60,-36,22,-36,23,-36,24,-36,25,-36,62,-36,61,-36});
    states[103] = new State(new int[]{59,105,60,106},new int[]{-15,104});
    states[104] = new State(-35);
    states[105] = new State(-43);
    states[106] = new State(new int[]{52,102,53,53,58,35,47,56,46,58,19,33,20,34,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100},new int[]{-16,107,-9,109,-8,110,-10,86,-12,91});
    states[107] = new State(new int[]{59,105,60,106},new int[]{-15,108});
    states[108] = new State(-44);
    states[109] = new State(new int[]{13,42,14,44,15,46,16,48,17,50,11,40,12,60,8,62,10,64,7,66,9,68,26,70,27,72,28,74,59,-48,60,-48});
    states[110] = new State(new int[]{22,25,23,27,24,29,25,31,59,-49,60,-49});
    states[111] = new State(new int[]{55,113,60,114},new int[]{-18,112});
    states[112] = new State(-50);
    states[113] = new State(-51);
    states[114] = new State(new int[]{52,115});
    states[115] = new State(new int[]{55,113,60,114},new int[]{-18,116});
    states[116] = new State(-52);
    states[117] = new State(new int[]{61,118});
    states[118] = new State(new int[]{19,33,20,34,58,35,21,76,30,78,29,82,31,89,34,90,32,97,33,98,35,99,36,100,52,102,53,53,47,56,46,58},new int[]{-8,119,-10,86,-12,91,-9,101});
    states[119] = new State(new int[]{22,25,23,27,24,29,25,31,62,-21,60,-21,61,-21,59,-21});
    states[120] = new State(new int[]{61,122,60,123},new int[]{-17,121});
    states[121] = new State(-45);
    states[122] = new State(-46);
    states[123] = new State(new int[]{52,124});
    states[124] = new State(new int[]{61,122,60,123},new int[]{-17,125});
    states[125] = new State(-47);
    states[126] = new State(-68);
    states[127] = new State(-69);
    states[128] = new State(-70);
    states[129] = new State(new int[]{22,25,23,27,24,29,25,31,62,-12});
    states[130] = new State(-4);
    states[131] = new State(-5);
    states[132] = new State(-6);
    states[133] = new State(-7);
    states[134] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3,62,-4});
    rules[3] = new Rule(-1, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{3});
    rules[5] = new Rule(-3, new int[]{4});
    rules[6] = new Rule(-3, new int[]{5});
    rules[7] = new Rule(-3, new int[]{6});
    rules[8] = new Rule(-4, new int[]{-5,62,-6});
    rules[9] = new Rule(-6, new int[]{2});
    rules[10] = new Rule(-6, new int[]{-5,62,-6});
    rules[11] = new Rule(-5, new int[]{-7});
    rules[12] = new Rule(-5, new int[]{-8});
    rules[13] = new Rule(-8, new int[]{19});
    rules[14] = new Rule(-8, new int[]{20});
    rules[15] = new Rule(-8, new int[]{58,-8,59});
    rules[16] = new Rule(-8, new int[]{21,-8});
    rules[17] = new Rule(-8, new int[]{30,58,-8,59});
    rules[18] = new Rule(-8, new int[]{29,58,-9,59});
    rules[19] = new Rule(-8, new int[]{-10,-11,-8});
    rules[20] = new Rule(-8, new int[]{-12,55,-13,-14,61,-8});
    rules[21] = new Rule(-8, new int[]{-12,-14,61,-8});
    rules[22] = new Rule(-8, new int[]{-8,22,-8});
    rules[23] = new Rule(-8, new int[]{-8,23,-8});
    rules[24] = new Rule(-8, new int[]{-8,24,-8});
    rules[25] = new Rule(-8, new int[]{-8,25,-8});
    rules[26] = new Rule(-8, new int[]{-9,11,-9});
    rules[27] = new Rule(-8, new int[]{-9,12,-9});
    rules[28] = new Rule(-8, new int[]{-9,8,-9});
    rules[29] = new Rule(-8, new int[]{-9,10,-9});
    rules[30] = new Rule(-8, new int[]{-9,7,-9});
    rules[31] = new Rule(-8, new int[]{-9,9,-9});
    rules[32] = new Rule(-8, new int[]{-9,26,-9});
    rules[33] = new Rule(-8, new int[]{-9,27,-9});
    rules[34] = new Rule(-8, new int[]{-9,28,-9});
    rules[35] = new Rule(-8, new int[]{52,58,-15});
    rules[36] = new Rule(-8, new int[]{52});
    rules[37] = new Rule(-12, new int[]{32});
    rules[38] = new Rule(-12, new int[]{33});
    rules[39] = new Rule(-12, new int[]{35});
    rules[40] = new Rule(-12, new int[]{36});
    rules[41] = new Rule(-10, new int[]{31});
    rules[42] = new Rule(-10, new int[]{34});
    rules[43] = new Rule(-15, new int[]{59});
    rules[44] = new Rule(-15, new int[]{60,-16,-15});
    rules[45] = new Rule(-11, new int[]{52,-17});
    rules[46] = new Rule(-17, new int[]{61});
    rules[47] = new Rule(-17, new int[]{60,52,-17});
    rules[48] = new Rule(-16, new int[]{-9});
    rules[49] = new Rule(-16, new int[]{-8});
    rules[50] = new Rule(-13, new int[]{52,-18});
    rules[51] = new Rule(-18, new int[]{55});
    rules[52] = new Rule(-18, new int[]{60,52,-18});
    rules[53] = new Rule(-14, new int[]{52,60,-14});
    rules[54] = new Rule(-14, new int[]{52,44,-8,60,-14});
    rules[55] = new Rule(-14, new int[]{52,44,-8});
    rules[56] = new Rule(-14, new int[]{52});
    rules[57] = new Rule(-9, new int[]{52});
    rules[58] = new Rule(-9, new int[]{53});
    rules[59] = new Rule(-9, new int[]{58,-9,59});
    rules[60] = new Rule(-9, new int[]{-9,13,-9});
    rules[61] = new Rule(-9, new int[]{-9,14,-9});
    rules[62] = new Rule(-9, new int[]{-9,15,-9});
    rules[63] = new Rule(-9, new int[]{-9,16,-9});
    rules[64] = new Rule(-9, new int[]{-9,17,-9});
    rules[65] = new Rule(-9, new int[]{47,-9});
    rules[66] = new Rule(-9, new int[]{46,-9});
    rules[67] = new Rule(-7, new int[]{-19,54,-13,-14});
    rules[68] = new Rule(-7, new int[]{-19,-14});
    rules[69] = new Rule(-19, new int[]{41});
    rules[70] = new Rule(-19, new int[]{42});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> header, SEMICOLON, decls
#line 42 "mona.y"
{ CurrentSemanticValue = MkProgram(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 3: // program -> decls
#line 43 "mona.y"
{ CurrentSemanticValue = MkProgram(ValueStack[ValueStack.Depth-1]); }
        break;
      case 8: // decls -> decl, SEMICOLON, decls_
#line 51 "mona.y"
{ CurrentSemanticValue = MkDeclarations(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 9: // decls_ -> EOF
#line 55 "mona.y"
{ CurrentSemanticValue = MkDeclarations(); }
        break;
      case 10: // decls_ -> decl, SEMICOLON, decls_
#line 56 "mona.y"
{ CurrentSemanticValue = MkDeclarations(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 13: // formula -> TRUE
#line 65 "mona.y"
{ CurrentSemanticValue = MkBooleanFormula(ValueStack[ValueStack.Depth-1]) ; }
        break;
      case 14: // formula -> FALSE
#line 66 "mona.y"
{ CurrentSemanticValue = MkBooleanFormula(ValueStack[ValueStack.Depth-1]) ; }
        break;
      case 15: // formula -> LPAR, formula, RPAR
#line 67 "mona.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 16: // formula -> NOT, formula
#line 68 "mona.y"
{ CurrentSemanticValue = MkBooleanFormula(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 17: // formula -> RESTRICT, LPAR, formula, RPAR
#line 69 "mona.y"
{ CurrentSemanticValue = MkBooleanFormula(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 18: // formula -> EMPTY, LPAR, term, RPAR
#line 70 "mona.y"
{ CurrentSemanticValue = MkAtom(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 19: // formula -> q0, names, formula
#line 71 "mona.y"
{ CurrentSemanticValue = MkQ0Formula(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 20: // formula -> q, RBRACKET, univs, vars, COLON, formula
#line 72 "mona.y"
{ CurrentSemanticValue = MkQFormula(ValueStack[ValueStack.Depth-6], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-4]); }
        break;
      case 21: // formula -> q, vars, COLON, formula
#line 73 "mona.y"
{ CurrentSemanticValue = MkQFormula(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 22: // formula -> formula, AND, formula
#line 74 "mona.y"
{ CurrentSemanticValue = MkBooleanFormula(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 23: // formula -> formula, OR, formula
#line 75 "mona.y"
{ CurrentSemanticValue = MkBooleanFormula(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 24: // formula -> formula, IMPLIES, formula
#line 76 "mona.y"
{ CurrentSemanticValue = MkBooleanFormula(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 25: // formula -> formula, EQUIV, formula
#line 77 "mona.y"
{ CurrentSemanticValue = MkBooleanFormula(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 26: // formula -> term, EQ, term
#line 78 "mona.y"
{ CurrentSemanticValue = MkAtom(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 27: // formula -> term, NE, term
#line 79 "mona.y"
{ CurrentSemanticValue = MkAtom(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 28: // formula -> term, GT, term
#line 80 "mona.y"
{ CurrentSemanticValue = MkAtom(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 29: // formula -> term, GE, term
#line 81 "mona.y"
{ CurrentSemanticValue = MkAtom(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 30: // formula -> term, LT, term
#line 82 "mona.y"
{ CurrentSemanticValue = MkAtom(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 31: // formula -> term, LE, term
#line 83 "mona.y"
{ CurrentSemanticValue = MkAtom(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 32: // formula -> term, IN, term
#line 84 "mona.y"
{ CurrentSemanticValue = MkAtom(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 33: // formula -> term, NOTIN, term
#line 85 "mona.y"
{ CurrentSemanticValue = MkAtom(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 34: // formula -> term, SUBSET, term
#line 86 "mona.y"
{ CurrentSemanticValue = MkAtom(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 35: // formula -> NAME, LPAR, exps
#line 87 "mona.y"
{ CurrentSemanticValue = MkPredApp(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 36: // formula -> NAME
#line 88 "mona.y"
{ CurrentSemanticValue = MkBooleanFormula(ValueStack[ValueStack.Depth-1]); }
        break;
      case 43: // exps -> RPAR
#line 100 "mona.y"
{ CurrentSemanticValue = MkList<Expression>();}
        break;
      case 44: // exps -> COMMA, exp, exps
#line 101 "mona.y"
{ CurrentSemanticValue = MkList<Expression>(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]);}
        break;
      case 45: // names -> NAME, names_
#line 105 "mona.y"
{ CurrentSemanticValue = MkList<Token>(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 46: // names_ -> COLON
#line 108 "mona.y"
{ CurrentSemanticValue = MkList<Token>(); }
        break;
      case 47: // names_ -> COMMA, NAME, names_
#line 109 "mona.y"
{ CurrentSemanticValue = MkList<Token>(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 50: // univs -> NAME, univs_
#line 118 "mona.y"
{ CurrentSemanticValue = MkList<Token>(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 51: // univs_ -> RBRACKET
#line 121 "mona.y"
{ CurrentSemanticValue = MkList<Token>(); }
        break;
      case 52: // univs_ -> COMMA, NAME, univs_
#line 122 "mona.y"
{ CurrentSemanticValue = MkList<Token>(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 53: // vars -> NAME, COMMA, vars
#line 126 "mona.y"
{ CurrentSemanticValue = MkList<VarWhere>(MkVar(ValueStack[ValueStack.Depth-3]), ValueStack[ValueStack.Depth-1]); }
        break;
      case 54: // vars -> NAME, WHERE, formula, COMMA, vars
#line 127 "mona.y"
{ CurrentSemanticValue = MkList<VarWhere>(MkVar(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3]), ValueStack[ValueStack.Depth-2]); }
        break;
      case 55: // vars -> NAME, WHERE, formula
#line 128 "mona.y"
{ CurrentSemanticValue = MkList<VarWhere>(MkVar(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]), MkList<VarWhere>()); }
        break;
      case 56: // vars -> NAME
#line 129 "mona.y"
{ CurrentSemanticValue = MkList<VarWhere>(MkVar(ValueStack[ValueStack.Depth-1]), MkList<VarWhere>()); }
        break;
      case 57: // term -> NAME
#line 133 "mona.y"
{ CurrentSemanticValue = MkName(ValueStack[ValueStack.Depth-1]); }
        break;
      case 58: // term -> NUMBER
#line 134 "mona.y"
{ CurrentSemanticValue = MkInt(ValueStack[ValueStack.Depth-1]); }
        break;
      case 59: // term -> LPAR, term, RPAR
#line 135 "mona.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 60: // term -> term, PLUS, term
#line 136 "mona.y"
{ CurrentSemanticValue = MkFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 61: // term -> term, MINUS, term
#line 137 "mona.y"
{ CurrentSemanticValue = MkFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 62: // term -> term, TIMES, term
#line 138 "mona.y"
{ CurrentSemanticValue = MkFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 63: // term -> term, DIV, term
#line 139 "mona.y"
{ CurrentSemanticValue = MkFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 64: // term -> term, MOD, term
#line 140 "mona.y"
{ CurrentSemanticValue = MkFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 65: // term -> MIN, term
#line 141 "mona.y"
{ CurrentSemanticValue = MkFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 66: // term -> MAX, term
#line 142 "mona.y"
{ CurrentSemanticValue = MkFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 67: // var_decl -> var_kind, LBRACKET, univs, vars
#line 146 "mona.y"
{ CurrentSemanticValue = MkVarDecl(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
        break;
      case 68: // var_decl -> var_kind, vars
#line 147 "mona.y"
{ CurrentSemanticValue = MkVarDecl(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
