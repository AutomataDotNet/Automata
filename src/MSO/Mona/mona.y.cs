// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  MARGUS-X1
// DateTime: 5/24/2016 1:18:21 AM
// UserName: margus
// Input file <mona.y - 5/24/2016 1:16:39 AM>

// options: babel conflicts lines diagnose & report gplex conflicts

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace Microsoft.Automata.MSO.Mona
{
public enum Tokens {
    error=1,EOF=2,WS1S=3,WS2S=4,M2LSTR=5,M2LTREE=6,
    LT=7,GT=8,LE=9,GE=10,EQ=11,NE=12,
    PLUS=13,MINUS=14,TIMES=15,DIV=16,MOD=17,SETMINUS=18,
    TRUE=19,FALSE=20,NOT=21,AND=22,OR=23,IMPLIES=24,
    EQUIV=25,IN=26,NOTIN=27,SUBSET=28,EMPTY=29,RESTRICT=30,
    EX0=31,EX1=32,EX2=33,ALL0=34,ALL1=35,ALL2=36,
    LET0=37,LET1=38,LET2=39,VAR0=40,VAR1=41,VAR2=42,
    WHERE=43,PREFIX=44,MAX=45,MIN=46,PCONST=47,UNION=48,
    INTER=49,GUIDE=50,UNIVERSE=51,INCLUDE=52,ASSERT=53,EXECUTE=54,
    CONST=55,DEFAULTWHERE1=56,DEFAULTWHERE2=57,TREE=58,MACRO=59,PRED=60,
    ALLPOS=61,TYPE=62,ARROW=63,NAME=64,NUMBER=65,LBRACKET=66,
    RBRACKET=67,LBRACE=68,RBRACE=69,LPAR=70,RPAR=71,COMMA=72,
    COLON=73,SEMICOLON=74,RANGE=75,DOT=76,UP=77,BADCHAR=78,
    maxParseToken=79,COMMENT=80};

// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<object,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }

  protected abstract int CurrentSc { get; set; }
  //
  // Override the virtual EolState property if the scanner state is more
  // complicated then a simple copy of the current start state ordinal
  //
  public virtual int EolState { get { return CurrentSc; } set { CurrentSc = value; } }
}

// Interface class for 'colorizing' scanners
public interface IColorScan {
  void SetSource(string source, int offset);
  int GetNext(ref int state, out int start, out int end);
}

// Utility class for encapsulating token information
public class ScanObj {
  public int token;
  public object yylval;
  public LexLocation yylloc;
  public ScanObj( int t, object val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

public partial class MonaParser: ShiftReduceParser<object, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[144];
  private static State[] states = new State[323];
  private static string[] nonTerms = new string[] {
      "program", "$accept", "header", "decls", "decl", "formula", "univargs", 
      "intterm", "names", "univs", "vws", "parameters", "params0", "params1", 
      "params2", "univarg", "term2", "Q0", "Q", "exprs", "term", "term1", "expr", 
      "univs_", "elemslist", "elems", };

  static MonaParser() {
    states[0] = new State(new int[]{3,318,4,319,5,320,6,321,19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82,51,168,53,177,54,179,55,181,56,185,57,191,40,197,41,199,42,203,58,207,59,211,60,310},new int[]{-1,1,-3,3,-4,322,-5,6,-6,10,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{74,4});
    states[4] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82,51,168,53,177,54,179,55,181,56,185,57,191,40,197,41,199,42,203,58,207,59,211,60,310},new int[]{-4,5,-5,6,-6,10,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[5] = new State(-2);
    states[6] = new State(new int[]{74,7});
    states[7] = new State(new int[]{2,8,19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82,51,168,53,177,54,179,55,181,56,185,57,191,40,197,41,199,42,203,58,207,59,211,60,310},new int[]{-4,9,-5,6,-6,10,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[8] = new State(-8);
    states[9] = new State(-9);
    states[10] = new State(new int[]{22,11,23,13,24,15,25,17,74,-10});
    states[11] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,12,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[12] = new State(-88);
    states[13] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,14,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[14] = new State(new int[]{22,11,23,-89,24,-89,25,-89,74,-89,71,-89,72,-89,73,-89});
    states[15] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,16,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[16] = new State(new int[]{22,11,23,13,24,15,25,-90,74,-90,71,-90,72,-90,73,-90});
    states[17] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,18,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[18] = new State(new int[]{22,11,23,13,24,15,25,17,74,-91,71,-91,72,-91,73,-91});
    states[19] = new State(-78);
    states[20] = new State(-79);
    states[21] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,22,-22,24,-17,100,-18,113,-19,119,-21,147});
    states[22] = new State(new int[]{71,23,22,11,23,13,24,15,25,17});
    states[23] = new State(-80);
    states[24] = new State(new int[]{71,25,13,26,14,28,15,30,16,32,17,34,8,88,10,90,7,92,9,94,26,96,27,98,11,-112,12,-112});
    states[25] = new State(-120);
    states[26] = new State(new int[]{65,36,70,37,46,39,45,79,64,87},new int[]{-22,27});
    states[27] = new State(new int[]{13,-121,14,-121,15,30,16,32,17,34,8,-121,10,-121,7,-121,9,-121,26,-121,27,-121,11,-121,12,-121,71,-121,75,-121,69,-121,72,-121,22,-121,23,-121,24,-121,25,-121,74,-121,73,-121});
    states[28] = new State(new int[]{65,36,70,37,46,39,45,79,64,87},new int[]{-22,29});
    states[29] = new State(new int[]{13,-122,14,-122,15,30,16,32,17,34,8,-122,10,-122,7,-122,9,-122,26,-122,27,-122,11,-122,12,-122,71,-122,75,-122,69,-122,72,-122,22,-122,23,-122,24,-122,25,-122,74,-122,73,-122});
    states[30] = new State(new int[]{65,36,70,37,46,39,45,79,64,87},new int[]{-22,31});
    states[31] = new State(-123);
    states[32] = new State(new int[]{65,36,70,37,46,39,45,79,64,87},new int[]{-22,33});
    states[33] = new State(-124);
    states[34] = new State(new int[]{65,36,70,37,46,39,45,79,64,87},new int[]{-22,35});
    states[35] = new State(-125);
    states[36] = new State(-119);
    states[37] = new State(new int[]{65,36,70,37,46,39,45,79,64,87},new int[]{-22,38});
    states[38] = new State(new int[]{71,25,13,26,14,28,15,30,16,32,17,34});
    states[39] = new State(new int[]{70,66,68,69,29,81,47,82,64,86},new int[]{-17,40});
    states[40] = new State(new int[]{48,41,49,43,18,45,13,47,14,64,15,-126,16,-126,17,-126,8,-126,10,-126,7,-126,9,-126,26,-126,27,-126,11,-126,12,-126,71,-126,75,-126,69,-126,72,-126,22,-126,23,-126,24,-126,25,-126,74,-126,73,-126});
    states[41] = new State(new int[]{70,66,68,69,29,81,47,82,64,86},new int[]{-17,42});
    states[42] = new State(new int[]{48,-133,49,43,18,45,13,47,14,64,28,-133,11,-133,12,-133,71,-133,15,-133,16,-133,17,-133,8,-133,10,-133,7,-133,9,-133,26,-133,27,-133,75,-133,69,-133,72,-133,22,-133,23,-133,24,-133,25,-133,74,-133,73,-133});
    states[43] = new State(new int[]{70,66,68,69,29,81,47,82,64,86},new int[]{-17,44});
    states[44] = new State(new int[]{48,-134,49,-134,18,45,13,47,14,64,28,-134,11,-134,12,-134,71,-134,15,-134,16,-134,17,-134,8,-134,10,-134,7,-134,9,-134,26,-134,27,-134,75,-134,69,-134,72,-134,22,-134,23,-134,24,-134,25,-134,74,-134,73,-134});
    states[45] = new State(new int[]{70,66,68,69,29,81,47,82,64,86},new int[]{-17,46});
    states[46] = new State(new int[]{48,-135,49,-135,18,-135,13,47,14,64,28,-135,11,-135,12,-135,71,-135,15,-135,16,-135,17,-135,8,-135,10,-135,7,-135,9,-135,26,-135,27,-135,75,-135,69,-135,72,-135,22,-135,23,-135,24,-135,25,-135,74,-135,73,-135});
    states[47] = new State(new int[]{70,59,64,62,65,63},new int[]{-8,48});
    states[48] = new State(new int[]{13,-136,14,-136,15,53,16,55,17,57,48,-136,49,-136,18,-136,28,-136,11,-136,12,-136,71,-136,8,-136,10,-136,7,-136,9,-136,26,-136,27,-136,75,-136,69,-136,72,-136,22,-136,23,-136,24,-136,25,-136,74,-136,73,-136});
    states[49] = new State(new int[]{70,59,64,62,65,63},new int[]{-8,50});
    states[50] = new State(new int[]{13,-62,14,-62,15,53,16,55,17,57,48,-62,49,-62,18,-62,28,-62,11,-62,12,-62,71,-62,8,-62,10,-62,7,-62,9,-62,26,-62,27,-62,75,-62,69,-62,72,-62,22,-62,23,-62,24,-62,25,-62,74,-62,73,-62});
    states[51] = new State(new int[]{70,59,64,62,65,63},new int[]{-8,52});
    states[52] = new State(new int[]{13,-63,14,-63,15,53,16,55,17,57,48,-63,49,-63,18,-63,28,-63,11,-63,12,-63,71,-63,8,-63,10,-63,7,-63,9,-63,26,-63,27,-63,75,-63,69,-63,72,-63,22,-63,23,-63,24,-63,25,-63,74,-63,73,-63});
    states[53] = new State(new int[]{70,59,64,62,65,63},new int[]{-8,54});
    states[54] = new State(-64);
    states[55] = new State(new int[]{70,59,64,62,65,63},new int[]{-8,56});
    states[56] = new State(-65);
    states[57] = new State(new int[]{70,59,64,62,65,63},new int[]{-8,58});
    states[58] = new State(-66);
    states[59] = new State(new int[]{70,59,64,62,65,63},new int[]{-8,60});
    states[60] = new State(new int[]{71,61,13,49,14,51,15,53,16,55,17,57});
    states[61] = new State(-61);
    states[62] = new State(-67);
    states[63] = new State(-68);
    states[64] = new State(new int[]{70,59,64,62,65,63},new int[]{-8,65});
    states[65] = new State(new int[]{13,-137,14,-137,15,53,16,55,17,57,48,-137,49,-137,18,-137,28,-137,11,-137,12,-137,71,-137,8,-137,10,-137,7,-137,9,-137,26,-137,27,-137,75,-137,69,-137,72,-137,22,-137,23,-137,24,-137,25,-137,74,-137,73,-137});
    states[66] = new State(new int[]{70,66,68,69,29,81,47,82,64,86},new int[]{-17,67});
    states[67] = new State(new int[]{71,68,48,41,49,43,18,45,13,47,14,64});
    states[68] = new State(-129);
    states[69] = new State(new int[]{69,71,65,36,70,37,46,39,45,79,64,87},new int[]{-25,70,-26,72,-22,76});
    states[70] = new State(-130);
    states[71] = new State(-139);
    states[72] = new State(new int[]{69,73,72,74});
    states[73] = new State(-140);
    states[74] = new State(new int[]{69,71,65,36,70,37,46,39,45,79,64,87},new int[]{-25,75,-26,72,-22,76});
    states[75] = new State(-141);
    states[76] = new State(new int[]{75,77,13,26,14,28,15,30,16,32,17,34,69,-143,72,-143});
    states[77] = new State(new int[]{65,36,70,37,46,39,45,79,64,87},new int[]{-22,78});
    states[78] = new State(new int[]{13,26,14,28,15,30,16,32,17,34,69,-142,72,-142});
    states[79] = new State(new int[]{70,66,68,69,29,81,47,82,64,86},new int[]{-17,80});
    states[80] = new State(new int[]{48,41,49,43,18,45,13,47,14,64,15,-127,16,-127,17,-127,8,-127,10,-127,7,-127,9,-127,26,-127,27,-127,11,-127,12,-127,71,-127,75,-127,69,-127,72,-127,22,-127,23,-127,24,-127,25,-127,74,-127,73,-127});
    states[81] = new State(-131);
    states[82] = new State(new int[]{70,83});
    states[83] = new State(new int[]{70,59,64,62,65,63},new int[]{-8,84});
    states[84] = new State(new int[]{71,85,13,49,14,51,15,53,16,55,17,57});
    states[85] = new State(-132);
    states[86] = new State(-138);
    states[87] = new State(-128);
    states[88] = new State(new int[]{65,36,70,37,46,39,45,79,64,87},new int[]{-22,89});
    states[89] = new State(new int[]{13,26,14,28,15,30,16,32,17,34,22,-94,23,-94,24,-94,25,-94,74,-94,71,-94,72,-94,73,-94});
    states[90] = new State(new int[]{65,36,70,37,46,39,45,79,64,87},new int[]{-22,91});
    states[91] = new State(new int[]{13,26,14,28,15,30,16,32,17,34,22,-95,23,-95,24,-95,25,-95,74,-95,71,-95,72,-95,73,-95});
    states[92] = new State(new int[]{65,36,70,37,46,39,45,79,64,87},new int[]{-22,93});
    states[93] = new State(new int[]{13,26,14,28,15,30,16,32,17,34,22,-96,23,-96,24,-96,25,-96,74,-96,71,-96,72,-96,73,-96});
    states[94] = new State(new int[]{65,36,70,37,46,39,45,79,64,87},new int[]{-22,95});
    states[95] = new State(new int[]{13,26,14,28,15,30,16,32,17,34,22,-97,23,-97,24,-97,25,-97,74,-97,71,-97,72,-97,73,-97});
    states[96] = new State(new int[]{70,66,68,69,29,81,47,82,64,86},new int[]{-17,97});
    states[97] = new State(new int[]{48,41,49,43,18,45,13,47,14,64,22,-98,23,-98,24,-98,25,-98,74,-98,71,-98,72,-98,73,-98});
    states[98] = new State(new int[]{70,66,68,69,29,81,47,82,64,86},new int[]{-17,99});
    states[99] = new State(new int[]{48,41,49,43,18,45,13,47,14,64,22,-99,23,-99,24,-99,25,-99,74,-99,71,-99,72,-99,73,-99});
    states[100] = new State(new int[]{71,68,48,41,49,43,18,45,13,47,14,64,28,101,11,-113,12,-113});
    states[101] = new State(new int[]{70,66,68,69,29,81,47,82,64,86},new int[]{-17,102});
    states[102] = new State(new int[]{48,41,49,43,18,45,13,47,14,64,22,-100,23,-100,24,-100,25,-100,74,-100,71,-100,72,-100,73,-100});
    states[103] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,104,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[104] = new State(-81);
    states[105] = new State(new int[]{70,106});
    states[106] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,107,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[107] = new State(new int[]{71,108,22,11,23,13,24,15,25,17});
    states[108] = new State(-82);
    states[109] = new State(new int[]{70,110,48,-131,49,-131,18,-131,13,-131,14,-131,28,-131,11,-131,12,-131,71,-131,72,-131});
    states[110] = new State(new int[]{70,66,68,69,29,81,47,82,64,86},new int[]{-17,111});
    states[111] = new State(new int[]{71,112,48,41,49,43,18,45,13,47,14,64});
    states[112] = new State(-83);
    states[113] = new State(new int[]{64,165},new int[]{-9,114});
    states[114] = new State(new int[]{73,115});
    states[115] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,116,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[116] = new State(new int[]{22,11,23,13,24,15,25,17,74,-84,71,-84,72,-84,73,-84});
    states[117] = new State(-106);
    states[118] = new State(-107);
    states[119] = new State(new int[]{66,158,64,148},new int[]{-10,120,-11,155});
    states[120] = new State(new int[]{64,148},new int[]{-11,121});
    states[121] = new State(new int[]{73,122});
    states[122] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,123,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[123] = new State(new int[]{22,11,23,13,24,15,25,17,74,-85,71,-85,72,-85,73,-85});
    states[124] = new State(-102);
    states[125] = new State(-103);
    states[126] = new State(-104);
    states[127] = new State(-105);
    states[128] = new State(new int[]{70,129,13,-128,14,-128,15,-128,16,-128,17,-128,8,-128,10,-128,7,-128,9,-128,26,-128,27,-128,11,-128,12,-128,71,-101,72,-101,48,-138,49,-138,18,-138,28,-138,22,-101,23,-101,24,-101,25,-101,74,-101,73,-101});
    states[129] = new State(new int[]{65,36,70,21,46,39,45,79,64,128,68,69,29,109,47,82,19,19,20,20,21,103,30,105,31,117,34,118,32,124,33,125,35,126,36,127},new int[]{-20,130,-23,132,-21,135,-22,144,-17,145,-6,146,-18,113,-19,119});
    states[130] = new State(new int[]{71,131});
    states[131] = new State(-87);
    states[132] = new State(new int[]{72,133,71,-109});
    states[133] = new State(new int[]{65,36,70,21,46,39,45,79,64,128,68,69,29,109,47,82,19,19,20,20,21,103,30,105,31,117,34,118,32,124,33,125,35,126,36,127},new int[]{-20,134,-23,132,-21,135,-22,144,-17,145,-6,146,-18,113,-19,119});
    states[134] = new State(-108);
    states[135] = new State(new int[]{11,136,12,142,72,-110,71,-110});
    states[136] = new State(new int[]{65,36,70,139,46,39,45,79,64,140,68,69,29,81,47,82},new int[]{-21,137,-22,138,-17,141});
    states[137] = new State(-92);
    states[138] = new State(new int[]{13,26,14,28,15,30,16,32,17,34,22,-112,23,-112,24,-112,25,-112,74,-112,71,-112,72,-112,73,-112});
    states[139] = new State(new int[]{65,36,70,139,46,39,45,79,64,140,68,69,29,81,47,82},new int[]{-22,38,-17,67});
    states[140] = new State(new int[]{13,-128,14,-128,15,-128,16,-128,17,-128,22,-128,23,-128,24,-128,25,-128,74,-128,71,-128,72,-128,73,-128,48,-138,49,-138,18,-138});
    states[141] = new State(new int[]{48,41,49,43,18,45,13,47,14,64,22,-113,23,-113,24,-113,25,-113,74,-113,71,-113,72,-113,73,-113});
    states[142] = new State(new int[]{65,36,70,139,46,39,45,79,64,140,68,69,29,81,47,82},new int[]{-21,143,-22,138,-17,141});
    states[143] = new State(-93);
    states[144] = new State(new int[]{13,26,14,28,15,30,16,32,17,34,8,88,10,90,7,92,9,94,26,96,27,98,11,-112,12,-112,72,-112,71,-112});
    states[145] = new State(new int[]{48,41,49,43,18,45,13,47,14,64,28,101,11,-113,12,-113,72,-113,71,-113});
    states[146] = new State(new int[]{22,11,23,13,24,15,25,17,72,-111,71,-111});
    states[147] = new State(new int[]{11,136,12,142});
    states[148] = new State(new int[]{72,149,43,151,73,-77,74,-77});
    states[149] = new State(new int[]{64,148},new int[]{-11,150});
    states[150] = new State(-74);
    states[151] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,152,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[152] = new State(new int[]{72,153,22,11,23,13,24,15,25,17,73,-76,74,-76});
    states[153] = new State(new int[]{64,148},new int[]{-11,154});
    states[154] = new State(-75);
    states[155] = new State(new int[]{73,156});
    states[156] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,157,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[157] = new State(new int[]{22,11,23,13,24,15,25,17,74,-86,71,-86,72,-86,73,-86});
    states[158] = new State(new int[]{64,159});
    states[159] = new State(new int[]{67,161,72,162},new int[]{-24,160});
    states[160] = new State(-116);
    states[161] = new State(-117);
    states[162] = new State(new int[]{64,163});
    states[163] = new State(new int[]{67,161,72,162},new int[]{-24,164});
    states[164] = new State(-118);
    states[165] = new State(new int[]{72,166,73,-115,74,-115});
    states[166] = new State(new int[]{64,165},new int[]{-9,167});
    states[167] = new State(-114);
    states[168] = new State(new int[]{64,173},new int[]{-7,169,-16,170});
    states[169] = new State(-11);
    states[170] = new State(new int[]{72,171,74,-70});
    states[171] = new State(new int[]{64,173},new int[]{-7,172,-16,170});
    states[172] = new State(-69);
    states[173] = new State(new int[]{73,174,72,-73,74,-73});
    states[174] = new State(new int[]{64,175,65,176});
    states[175] = new State(-71);
    states[176] = new State(-72);
    states[177] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,178,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[178] = new State(new int[]{22,11,23,13,24,15,25,17,74,-12});
    states[179] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,180,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[180] = new State(new int[]{22,11,23,13,24,15,25,17,74,-13});
    states[181] = new State(new int[]{64,182});
    states[182] = new State(new int[]{11,183});
    states[183] = new State(new int[]{70,59,64,62,65,63},new int[]{-8,184});
    states[184] = new State(new int[]{13,49,14,51,15,53,16,55,17,57,74,-14});
    states[185] = new State(new int[]{70,186});
    states[186] = new State(new int[]{64,187});
    states[187] = new State(new int[]{71,188});
    states[188] = new State(new int[]{11,189});
    states[189] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,190,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[190] = new State(new int[]{22,11,23,13,24,15,25,17,74,-15});
    states[191] = new State(new int[]{70,192});
    states[192] = new State(new int[]{64,193});
    states[193] = new State(new int[]{71,194});
    states[194] = new State(new int[]{11,195});
    states[195] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,196,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[196] = new State(new int[]{22,11,23,13,24,15,25,17,74,-16});
    states[197] = new State(new int[]{64,165},new int[]{-9,198});
    states[198] = new State(-17);
    states[199] = new State(new int[]{66,158,64,148},new int[]{-10,200,-11,202});
    states[200] = new State(new int[]{64,148},new int[]{-11,201});
    states[201] = new State(-18);
    states[202] = new State(-21);
    states[203] = new State(new int[]{66,158,64,148},new int[]{-10,204,-11,206});
    states[204] = new State(new int[]{64,148},new int[]{-11,205});
    states[205] = new State(-19);
    states[206] = new State(-22);
    states[207] = new State(new int[]{66,158,64,148},new int[]{-10,208,-11,210});
    states[208] = new State(new int[]{64,148},new int[]{-11,209});
    states[209] = new State(-20);
    states[210] = new State(-23);
    states[211] = new State(new int[]{64,212});
    states[212] = new State(new int[]{11,213,70,215});
    states[213] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,214,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[214] = new State(new int[]{22,11,23,13,24,15,25,17,74,-24});
    states[215] = new State(new int[]{71,219,40,220,51,271,41,274,42,280},new int[]{-12,216});
    states[216] = new State(new int[]{11,217});
    states[217] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,218,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[218] = new State(new int[]{22,11,23,13,24,15,25,17,74,-25});
    states[219] = new State(-28);
    states[220] = new State(new int[]{64,221});
    states[221] = new State(new int[]{71,223,72,224},new int[]{-13,222});
    states[222] = new State(-29);
    states[223] = new State(-35);
    states[224] = new State(new int[]{40,225,41,228,42,299,51,305,64,308});
    states[225] = new State(new int[]{64,226});
    states[226] = new State(new int[]{71,223,72,224},new int[]{-13,227});
    states[227] = new State(-36);
    states[228] = new State(new int[]{64,229});
    states[229] = new State(new int[]{43,231,71,234,72,235},new int[]{-14,230});
    states[230] = new State(-37);
    states[231] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,232,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[232] = new State(new int[]{22,11,23,13,24,15,25,17,71,234,72,235},new int[]{-14,233});
    states[233] = new State(-38);
    states[234] = new State(-43);
    states[235] = new State(new int[]{40,236,41,239,42,245,51,291,64,294});
    states[236] = new State(new int[]{64,237});
    states[237] = new State(new int[]{71,223,72,224},new int[]{-13,238});
    states[238] = new State(-44);
    states[239] = new State(new int[]{64,240});
    states[240] = new State(new int[]{43,242,71,234,72,235},new int[]{-14,241});
    states[241] = new State(-45);
    states[242] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,243,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[243] = new State(new int[]{22,11,23,13,24,15,25,17,71,234,72,235},new int[]{-14,244});
    states[244] = new State(-46);
    states[245] = new State(new int[]{64,246});
    states[246] = new State(new int[]{43,248,71,251,72,252},new int[]{-15,247});
    states[247] = new State(-47);
    states[248] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,249,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[249] = new State(new int[]{22,11,23,13,24,15,25,17,71,251,72,252},new int[]{-15,250});
    states[250] = new State(-48);
    states[251] = new State(-52);
    states[252] = new State(new int[]{40,253,41,256,42,262,51,268,64,286});
    states[253] = new State(new int[]{64,254});
    states[254] = new State(new int[]{71,223,72,224},new int[]{-13,255});
    states[255] = new State(-53);
    states[256] = new State(new int[]{64,257});
    states[257] = new State(new int[]{43,259,71,234,72,235},new int[]{-14,258});
    states[258] = new State(-54);
    states[259] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,260,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[260] = new State(new int[]{22,11,23,13,24,15,25,17,71,234,72,235},new int[]{-14,261});
    states[261] = new State(-55);
    states[262] = new State(new int[]{64,263});
    states[263] = new State(new int[]{43,265,71,251,72,252},new int[]{-15,264});
    states[264] = new State(-56);
    states[265] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,266,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[266] = new State(new int[]{22,11,23,13,24,15,25,17,71,251,72,252},new int[]{-15,267});
    states[267] = new State(-57);
    states[268] = new State(new int[]{64,269});
    states[269] = new State(new int[]{71,219,40,220,51,271,41,274,42,280},new int[]{-12,270});
    states[270] = new State(-58);
    states[271] = new State(new int[]{64,272});
    states[272] = new State(new int[]{71,219,40,220,51,271,41,274,42,280},new int[]{-12,273});
    states[273] = new State(-30);
    states[274] = new State(new int[]{64,275});
    states[275] = new State(new int[]{43,277,71,234,72,235},new int[]{-14,276});
    states[276] = new State(-31);
    states[277] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,278,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[278] = new State(new int[]{22,11,23,13,24,15,25,17,71,234,72,235},new int[]{-14,279});
    states[279] = new State(-32);
    states[280] = new State(new int[]{64,281});
    states[281] = new State(new int[]{43,283,71,251,72,252},new int[]{-15,282});
    states[282] = new State(-33);
    states[283] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,284,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[284] = new State(new int[]{22,11,23,13,24,15,25,17,71,251,72,252},new int[]{-15,285});
    states[285] = new State(-34);
    states[286] = new State(new int[]{43,288,71,251,72,252},new int[]{-15,287});
    states[287] = new State(-59);
    states[288] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,289,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[289] = new State(new int[]{22,11,23,13,24,15,25,17,71,251,72,252},new int[]{-15,290});
    states[290] = new State(-60);
    states[291] = new State(new int[]{64,292});
    states[292] = new State(new int[]{71,219,40,220,51,271,41,274,42,280},new int[]{-12,293});
    states[293] = new State(-49);
    states[294] = new State(new int[]{43,296,71,234,72,235},new int[]{-14,295});
    states[295] = new State(-50);
    states[296] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,297,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[297] = new State(new int[]{22,11,23,13,24,15,25,17,71,234,72,235},new int[]{-14,298});
    states[298] = new State(-51);
    states[299] = new State(new int[]{64,300});
    states[300] = new State(new int[]{43,302,71,251,72,252},new int[]{-15,301});
    states[301] = new State(-39);
    states[302] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,303,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[303] = new State(new int[]{22,11,23,13,24,15,25,17,71,251,72,252},new int[]{-15,304});
    states[304] = new State(-40);
    states[305] = new State(new int[]{64,306});
    states[306] = new State(new int[]{71,219,40,220,51,271,41,274,42,280},new int[]{-12,307});
    states[307] = new State(-41);
    states[308] = new State(new int[]{71,223,72,224},new int[]{-13,309});
    states[309] = new State(-42);
    states[310] = new State(new int[]{64,311});
    states[311] = new State(new int[]{11,312,70,314});
    states[312] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,313,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[313] = new State(new int[]{22,11,23,13,24,15,25,17,74,-26});
    states[314] = new State(new int[]{71,219,40,220,51,271,41,274,42,280},new int[]{-12,315});
    states[315] = new State(new int[]{11,316});
    states[316] = new State(new int[]{19,19,20,20,70,21,21,103,30,105,29,109,31,117,34,118,32,124,33,125,35,126,36,127,64,128,65,36,46,39,45,79,68,69,47,82},new int[]{-6,317,-18,113,-19,119,-21,147,-22,144,-17,145});
    states[317] = new State(new int[]{22,11,23,13,24,15,25,17,74,-27});
    states[318] = new State(-4);
    states[319] = new State(-5);
    states[320] = new State(-6);
    states[321] = new State(-7);
    states[322] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3,74,-4});
    rules[3] = new Rule(-1, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{3});
    rules[5] = new Rule(-3, new int[]{4});
    rules[6] = new Rule(-3, new int[]{5});
    rules[7] = new Rule(-3, new int[]{6});
    rules[8] = new Rule(-4, new int[]{-5,74,2});
    rules[9] = new Rule(-4, new int[]{-5,74,-4});
    rules[10] = new Rule(-5, new int[]{-6});
    rules[11] = new Rule(-5, new int[]{51,-7});
    rules[12] = new Rule(-5, new int[]{53,-6});
    rules[13] = new Rule(-5, new int[]{54,-6});
    rules[14] = new Rule(-5, new int[]{55,64,11,-8});
    rules[15] = new Rule(-5, new int[]{56,70,64,71,11,-6});
    rules[16] = new Rule(-5, new int[]{57,70,64,71,11,-6});
    rules[17] = new Rule(-5, new int[]{40,-9});
    rules[18] = new Rule(-5, new int[]{41,-10,-11});
    rules[19] = new Rule(-5, new int[]{42,-10,-11});
    rules[20] = new Rule(-5, new int[]{58,-10,-11});
    rules[21] = new Rule(-5, new int[]{41,-11});
    rules[22] = new Rule(-5, new int[]{42,-11});
    rules[23] = new Rule(-5, new int[]{58,-11});
    rules[24] = new Rule(-5, new int[]{59,64,11,-6});
    rules[25] = new Rule(-5, new int[]{59,64,70,-12,11,-6});
    rules[26] = new Rule(-5, new int[]{60,64,11,-6});
    rules[27] = new Rule(-5, new int[]{60,64,70,-12,11,-6});
    rules[28] = new Rule(-12, new int[]{71});
    rules[29] = new Rule(-12, new int[]{40,64,-13});
    rules[30] = new Rule(-12, new int[]{51,64,-12});
    rules[31] = new Rule(-12, new int[]{41,64,-14});
    rules[32] = new Rule(-12, new int[]{41,64,43,-6,-14});
    rules[33] = new Rule(-12, new int[]{42,64,-15});
    rules[34] = new Rule(-12, new int[]{42,64,43,-6,-15});
    rules[35] = new Rule(-13, new int[]{71});
    rules[36] = new Rule(-13, new int[]{72,40,64,-13});
    rules[37] = new Rule(-13, new int[]{72,41,64,-14});
    rules[38] = new Rule(-13, new int[]{72,41,64,43,-6,-14});
    rules[39] = new Rule(-13, new int[]{72,42,64,-15});
    rules[40] = new Rule(-13, new int[]{72,42,64,43,-6,-15});
    rules[41] = new Rule(-13, new int[]{72,51,64,-12});
    rules[42] = new Rule(-13, new int[]{72,64,-13});
    rules[43] = new Rule(-14, new int[]{71});
    rules[44] = new Rule(-14, new int[]{72,40,64,-13});
    rules[45] = new Rule(-14, new int[]{72,41,64,-14});
    rules[46] = new Rule(-14, new int[]{72,41,64,43,-6,-14});
    rules[47] = new Rule(-14, new int[]{72,42,64,-15});
    rules[48] = new Rule(-14, new int[]{72,42,64,43,-6,-15});
    rules[49] = new Rule(-14, new int[]{72,51,64,-12});
    rules[50] = new Rule(-14, new int[]{72,64,-14});
    rules[51] = new Rule(-14, new int[]{72,64,43,-6,-14});
    rules[52] = new Rule(-15, new int[]{71});
    rules[53] = new Rule(-15, new int[]{72,40,64,-13});
    rules[54] = new Rule(-15, new int[]{72,41,64,-14});
    rules[55] = new Rule(-15, new int[]{72,41,64,43,-6,-14});
    rules[56] = new Rule(-15, new int[]{72,42,64,-15});
    rules[57] = new Rule(-15, new int[]{72,42,64,43,-6,-15});
    rules[58] = new Rule(-15, new int[]{72,51,64,-12});
    rules[59] = new Rule(-15, new int[]{72,64,-15});
    rules[60] = new Rule(-15, new int[]{72,64,43,-6,-15});
    rules[61] = new Rule(-8, new int[]{70,-8,71});
    rules[62] = new Rule(-8, new int[]{-8,13,-8});
    rules[63] = new Rule(-8, new int[]{-8,14,-8});
    rules[64] = new Rule(-8, new int[]{-8,15,-8});
    rules[65] = new Rule(-8, new int[]{-8,16,-8});
    rules[66] = new Rule(-8, new int[]{-8,17,-8});
    rules[67] = new Rule(-8, new int[]{64});
    rules[68] = new Rule(-8, new int[]{65});
    rules[69] = new Rule(-7, new int[]{-16,72,-7});
    rules[70] = new Rule(-7, new int[]{-16});
    rules[71] = new Rule(-16, new int[]{64,73,64});
    rules[72] = new Rule(-16, new int[]{64,73,65});
    rules[73] = new Rule(-16, new int[]{64});
    rules[74] = new Rule(-11, new int[]{64,72,-11});
    rules[75] = new Rule(-11, new int[]{64,43,-6,72,-11});
    rules[76] = new Rule(-11, new int[]{64,43,-6});
    rules[77] = new Rule(-11, new int[]{64});
    rules[78] = new Rule(-6, new int[]{19});
    rules[79] = new Rule(-6, new int[]{20});
    rules[80] = new Rule(-6, new int[]{70,-6,71});
    rules[81] = new Rule(-6, new int[]{21,-6});
    rules[82] = new Rule(-6, new int[]{30,70,-6,71});
    rules[83] = new Rule(-6, new int[]{29,70,-17,71});
    rules[84] = new Rule(-6, new int[]{-18,-9,73,-6});
    rules[85] = new Rule(-6, new int[]{-19,-10,-11,73,-6});
    rules[86] = new Rule(-6, new int[]{-19,-11,73,-6});
    rules[87] = new Rule(-6, new int[]{64,70,-20,71});
    rules[88] = new Rule(-6, new int[]{-6,22,-6});
    rules[89] = new Rule(-6, new int[]{-6,23,-6});
    rules[90] = new Rule(-6, new int[]{-6,24,-6});
    rules[91] = new Rule(-6, new int[]{-6,25,-6});
    rules[92] = new Rule(-6, new int[]{-21,11,-21});
    rules[93] = new Rule(-6, new int[]{-21,12,-21});
    rules[94] = new Rule(-6, new int[]{-22,8,-22});
    rules[95] = new Rule(-6, new int[]{-22,10,-22});
    rules[96] = new Rule(-6, new int[]{-22,7,-22});
    rules[97] = new Rule(-6, new int[]{-22,9,-22});
    rules[98] = new Rule(-6, new int[]{-22,26,-17});
    rules[99] = new Rule(-6, new int[]{-22,27,-17});
    rules[100] = new Rule(-6, new int[]{-17,28,-17});
    rules[101] = new Rule(-6, new int[]{64});
    rules[102] = new Rule(-19, new int[]{32});
    rules[103] = new Rule(-19, new int[]{33});
    rules[104] = new Rule(-19, new int[]{35});
    rules[105] = new Rule(-19, new int[]{36});
    rules[106] = new Rule(-18, new int[]{31});
    rules[107] = new Rule(-18, new int[]{34});
    rules[108] = new Rule(-20, new int[]{-23,72,-20});
    rules[109] = new Rule(-20, new int[]{-23});
    rules[110] = new Rule(-23, new int[]{-21});
    rules[111] = new Rule(-23, new int[]{-6});
    rules[112] = new Rule(-21, new int[]{-22});
    rules[113] = new Rule(-21, new int[]{-17});
    rules[114] = new Rule(-9, new int[]{64,72,-9});
    rules[115] = new Rule(-9, new int[]{64});
    rules[116] = new Rule(-10, new int[]{66,64,-24});
    rules[117] = new Rule(-24, new int[]{67});
    rules[118] = new Rule(-24, new int[]{72,64,-24});
    rules[119] = new Rule(-22, new int[]{65});
    rules[120] = new Rule(-22, new int[]{70,-22,71});
    rules[121] = new Rule(-22, new int[]{-22,13,-22});
    rules[122] = new Rule(-22, new int[]{-22,14,-22});
    rules[123] = new Rule(-22, new int[]{-22,15,-22});
    rules[124] = new Rule(-22, new int[]{-22,16,-22});
    rules[125] = new Rule(-22, new int[]{-22,17,-22});
    rules[126] = new Rule(-22, new int[]{46,-17});
    rules[127] = new Rule(-22, new int[]{45,-17});
    rules[128] = new Rule(-22, new int[]{64});
    rules[129] = new Rule(-17, new int[]{70,-17,71});
    rules[130] = new Rule(-17, new int[]{68,-25});
    rules[131] = new Rule(-17, new int[]{29});
    rules[132] = new Rule(-17, new int[]{47,70,-8,71});
    rules[133] = new Rule(-17, new int[]{-17,48,-17});
    rules[134] = new Rule(-17, new int[]{-17,49,-17});
    rules[135] = new Rule(-17, new int[]{-17,18,-17});
    rules[136] = new Rule(-17, new int[]{-17,13,-8});
    rules[137] = new Rule(-17, new int[]{-17,14,-8});
    rules[138] = new Rule(-17, new int[]{64});
    rules[139] = new Rule(-25, new int[]{69});
    rules[140] = new Rule(-25, new int[]{-26,69});
    rules[141] = new Rule(-25, new int[]{-26,72,-25});
    rules[142] = new Rule(-26, new int[]{-22,75,-22});
    rules[143] = new Rule(-26, new int[]{-22});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // program -> header, SEMICOLON, decls
#line 44 "mona.y"
{ CurrentSemanticValue = MkProgram(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 3: // program -> decls
#line 45 "mona.y"
{ CurrentSemanticValue = MkProgram(ValueStack[ValueStack.Depth-1]); }
        break;
      case 8: // decls -> decl, SEMICOLON, EOF
#line 53 "mona.y"
{ CurrentSemanticValue = MkList<Decl>(ValueStack[ValueStack.Depth-3], MkList<Decl>()); }
        break;
      case 9: // decls -> decl, SEMICOLON, decls
#line 54 "mona.y"
{ CurrentSemanticValue = MkList<Decl>(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 10: // decl -> formula
#line 58 "mona.y"
{ CurrentSemanticValue = MkFormulaDecl(ValueStack[ValueStack.Depth-1]); }
        break;
      case 11: // decl -> UNIVERSE, univargs
#line 59 "mona.y"
{ CurrentSemanticValue = MkUnivDecl(ValueStack[ValueStack.Depth-1]); }
        break;
      case 12: // decl -> ASSERT, formula
#line 60 "mona.y"
{ CurrentSemanticValue = MkAssertDecl(ValueStack[ValueStack.Depth-1]); }
        break;
      case 13: // decl -> EXECUTE, formula
#line 61 "mona.y"
{ CurrentSemanticValue = MkExecuteDecl(ValueStack[ValueStack.Depth-1]); }
        break;
      case 14: // decl -> CONST, NAME, EQ, intterm
#line 62 "mona.y"
{ CurrentSemanticValue = MkConstDecl(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 15: // decl -> DEFAULTWHERE1, LPAR, NAME, RPAR, EQ, formula
#line 63 "mona.y"
{ CurrentSemanticValue = MkDefaultWhere1Decl(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-1]); }
        break;
      case 16: // decl -> DEFAULTWHERE2, LPAR, NAME, RPAR, EQ, formula
#line 64 "mona.y"
{ CurrentSemanticValue = MkDefaultWhere2Decl(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-1]); }
        break;
      case 17: // decl -> VAR0, names
#line 65 "mona.y"
{ CurrentSemanticValue = MkVar0Decl(ValueStack[ValueStack.Depth-1]); }
        break;
      case 18: // decl -> VAR1, univs, vws
#line 66 "mona.y"
{ CurrentSemanticValue = MkVar1Decl(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
        break;
      case 19: // decl -> VAR2, univs, vws
#line 67 "mona.y"
{ CurrentSemanticValue = MkVar2Decl(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
        break;
      case 20: // decl -> TREE, univs, vws
#line 68 "mona.y"
{ CurrentSemanticValue = MkTreeDecl(ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-2]); }
        break;
      case 21: // decl -> VAR1, vws
#line 69 "mona.y"
{ CurrentSemanticValue = MkVar1Decl(ValueStack[ValueStack.Depth-1], null); }
        break;
      case 22: // decl -> VAR2, vws
#line 70 "mona.y"
{ CurrentSemanticValue = MkVar2Decl(ValueStack[ValueStack.Depth-1], null); }
        break;
      case 23: // decl -> TREE, vws
#line 71 "mona.y"
{ CurrentSemanticValue = MkTreeDecl(ValueStack[ValueStack.Depth-1], null); }
        break;
      case 24: // decl -> MACRO, NAME, EQ, formula
#line 72 "mona.y"
{ CurrentSemanticValue = MkPredDecl(ValueStack[ValueStack.Depth-3], null, ValueStack[ValueStack.Depth-1], true); }
        break;
      case 25: // decl -> MACRO, NAME, LPAR, parameters, EQ, formula
#line 73 "mona.y"
{ CurrentSemanticValue = MkPredDecl(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1], true); }
        break;
      case 26: // decl -> PRED, NAME, EQ, formula
#line 74 "mona.y"
{ CurrentSemanticValue = MkPredDecl(ValueStack[ValueStack.Depth-3], null, ValueStack[ValueStack.Depth-1], false); }
        break;
      case 27: // decl -> PRED, NAME, LPAR, parameters, EQ, formula
#line 75 "mona.y"
{ CurrentSemanticValue = MkPredDecl(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1], false); }
        break;
      case 28: // parameters -> RPAR
#line 79 "mona.y"
{ CurrentSemanticValue = MkList<Param>(); }
        break;
      case 29: // parameters -> VAR0, NAME, params0
#line 80 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar0Param(ValueStack[ValueStack.Depth-2]), ValueStack[ValueStack.Depth-1]); }
        break;
      case 30: // parameters -> UNIVERSE, NAME, parameters
#line 81 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkUniverseParam(ValueStack[ValueStack.Depth-2]), ValueStack[ValueStack.Depth-1]); }
        break;
      case 31: // parameters -> VAR1, NAME, params1
#line 82 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar1Param(MkVarWhere(ValueStack[ValueStack.Depth-2], null)), ValueStack[ValueStack.Depth-1]); }
        break;
      case 32: // parameters -> VAR1, NAME, WHERE, formula, params1
#line 83 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar1Param(MkVarWhere(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2])), ValueStack[ValueStack.Depth-1]); }
        break;
      case 33: // parameters -> VAR2, NAME, params2
#line 84 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar2Param(MkVarWhere(ValueStack[ValueStack.Depth-2], null)), ValueStack[ValueStack.Depth-1]); }
        break;
      case 34: // parameters -> VAR2, NAME, WHERE, formula, params2
#line 85 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar2Param(MkVarWhere(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2])), ValueStack[ValueStack.Depth-1]); }
        break;
      case 35: // params0 -> RPAR
#line 89 "mona.y"
{ CurrentSemanticValue = MkList<Param>(); }
        break;
      case 36: // params0 -> COMMA, VAR0, NAME, params0
#line 90 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar0Param(ValueStack[ValueStack.Depth-2]), ValueStack[ValueStack.Depth-1]); }
        break;
      case 37: // params0 -> COMMA, VAR1, NAME, params1
#line 91 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar1Param(MkVarWhere(ValueStack[ValueStack.Depth-2], null)), ValueStack[ValueStack.Depth-1]); }
        break;
      case 38: // params0 -> COMMA, VAR1, NAME, WHERE, formula, params1
#line 92 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar1Param(MkVarWhere(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2])), ValueStack[ValueStack.Depth-1]); }
        break;
      case 39: // params0 -> COMMA, VAR2, NAME, params2
#line 93 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar2Param(MkVarWhere(ValueStack[ValueStack.Depth-2], null)), ValueStack[ValueStack.Depth-1]); }
        break;
      case 40: // params0 -> COMMA, VAR2, NAME, WHERE, formula, params2
#line 94 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar2Param(MkVarWhere(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2])), ValueStack[ValueStack.Depth-1]); }
        break;
      case 41: // params0 -> COMMA, UNIVERSE, NAME, parameters
#line 95 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkUniverseParam(ValueStack[ValueStack.Depth-2]), ValueStack[ValueStack.Depth-1]); }
        break;
      case 42: // params0 -> COMMA, NAME, params0
#line 96 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar0Param(ValueStack[ValueStack.Depth-2]), ValueStack[ValueStack.Depth-1]); }
        break;
      case 43: // params1 -> RPAR
#line 100 "mona.y"
{ CurrentSemanticValue = MkList<Param>(); }
        break;
      case 44: // params1 -> COMMA, VAR0, NAME, params0
#line 101 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar0Param(ValueStack[ValueStack.Depth-2]), ValueStack[ValueStack.Depth-1]); }
        break;
      case 45: // params1 -> COMMA, VAR1, NAME, params1
#line 102 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar1Param(MkVarWhere(ValueStack[ValueStack.Depth-2], null)), ValueStack[ValueStack.Depth-1]); }
        break;
      case 46: // params1 -> COMMA, VAR1, NAME, WHERE, formula, params1
#line 103 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar1Param(MkVarWhere(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2])), ValueStack[ValueStack.Depth-1]); }
        break;
      case 47: // params1 -> COMMA, VAR2, NAME, params2
#line 104 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar2Param(MkVarWhere(ValueStack[ValueStack.Depth-2], null)), ValueStack[ValueStack.Depth-1]); }
        break;
      case 48: // params1 -> COMMA, VAR2, NAME, WHERE, formula, params2
#line 105 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar2Param(MkVarWhere(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2])), ValueStack[ValueStack.Depth-1]); }
        break;
      case 49: // params1 -> COMMA, UNIVERSE, NAME, parameters
#line 106 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkUniverseParam(ValueStack[ValueStack.Depth-2]), ValueStack[ValueStack.Depth-1]); }
        break;
      case 50: // params1 -> COMMA, NAME, params1
#line 107 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar1Param(MkVarWhere(ValueStack[ValueStack.Depth-2], null)), ValueStack[ValueStack.Depth-1]); }
        break;
      case 51: // params1 -> COMMA, NAME, WHERE, formula, params1
#line 108 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar1Param(MkVarWhere(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2])), ValueStack[ValueStack.Depth-1]); }
        break;
      case 52: // params2 -> RPAR
#line 112 "mona.y"
{ CurrentSemanticValue = MkList<Param>(); }
        break;
      case 53: // params2 -> COMMA, VAR0, NAME, params0
#line 113 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar0Param(ValueStack[ValueStack.Depth-2]), ValueStack[ValueStack.Depth-1]); }
        break;
      case 54: // params2 -> COMMA, VAR1, NAME, params1
#line 114 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar1Param(MkVarWhere(ValueStack[ValueStack.Depth-2], null)), ValueStack[ValueStack.Depth-1]); }
        break;
      case 55: // params2 -> COMMA, VAR1, NAME, WHERE, formula, params1
#line 115 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar1Param(MkVarWhere(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2])), ValueStack[ValueStack.Depth-1]); }
        break;
      case 56: // params2 -> COMMA, VAR2, NAME, params2
#line 116 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar2Param(MkVarWhere(ValueStack[ValueStack.Depth-2], null)), ValueStack[ValueStack.Depth-1]); }
        break;
      case 57: // params2 -> COMMA, VAR2, NAME, WHERE, formula, params2
#line 117 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar2Param(MkVarWhere(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2])), ValueStack[ValueStack.Depth-1]); }
        break;
      case 58: // params2 -> COMMA, UNIVERSE, NAME, parameters
#line 118 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkUniverseParam(ValueStack[ValueStack.Depth-2]), ValueStack[ValueStack.Depth-1]); }
        break;
      case 59: // params2 -> COMMA, NAME, params2
#line 119 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar2Param(MkVarWhere(ValueStack[ValueStack.Depth-2], null)), ValueStack[ValueStack.Depth-1]); }
        break;
      case 60: // params2 -> COMMA, NAME, WHERE, formula, params2
#line 120 "mona.y"
{ CurrentSemanticValue = MkList<Param>(MkVar2Param(MkVarWhere(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2])), ValueStack[ValueStack.Depth-1]); }
        break;
      case 61: // intterm -> LPAR, intterm, RPAR
#line 124 "mona.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 62: // intterm -> intterm, PLUS, intterm
#line 125 "mona.y"
{ CurrentSemanticValue = MkArithmFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 63: // intterm -> intterm, MINUS, intterm
#line 126 "mona.y"
{ CurrentSemanticValue = MkArithmFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 64: // intterm -> intterm, TIMES, intterm
#line 127 "mona.y"
{ CurrentSemanticValue = MkArithmFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 65: // intterm -> intterm, DIV, intterm
#line 128 "mona.y"
{ CurrentSemanticValue = MkArithmFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 66: // intterm -> intterm, MOD, intterm
#line 129 "mona.y"
{ CurrentSemanticValue = MkArithmFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 67: // intterm -> NAME
#line 130 "mona.y"
{ CurrentSemanticValue = MkConstRef(ValueStack[ValueStack.Depth-1]); }
        break;
      case 68: // intterm -> NUMBER
#line 131 "mona.y"
{ CurrentSemanticValue = MkInt(ValueStack[ValueStack.Depth-1]); }
        break;
      case 69: // univargs -> univarg, COMMA, univargs
#line 135 "mona.y"
{ CurrentSemanticValue = MkList<UnivArg>(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 70: // univargs -> univarg
#line 136 "mona.y"
{ CurrentSemanticValue = MkList<UnivArg>(ValueStack[ValueStack.Depth-1], MkList<UnivArg>()); }
        break;
      case 71: // univarg -> NAME, COLON, NAME
#line 140 "mona.y"
{ CurrentSemanticValue = MkUnivArgWithType(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 72: // univarg -> NAME, COLON, NUMBER
#line 141 "mona.y"
{ CurrentSemanticValue = MkUnivArgWithSucc(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 73: // univarg -> NAME
#line 142 "mona.y"
{ CurrentSemanticValue = MkUnivArg(ValueStack[ValueStack.Depth-1]); }
        break;
      case 74: // vws -> NAME, COMMA, vws
#line 146 "mona.y"
{ CurrentSemanticValue = MkList<VarWhere>(MkVarWhere(ValueStack[ValueStack.Depth-3], null), ValueStack[ValueStack.Depth-1]); }
        break;
      case 75: // vws -> NAME, WHERE, formula, COMMA, vws
#line 147 "mona.y"
{ CurrentSemanticValue = MkList<VarWhere>(MkVarWhere(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3]), ValueStack[ValueStack.Depth-2]); }
        break;
      case 76: // vws -> NAME, WHERE, formula
#line 148 "mona.y"
{ CurrentSemanticValue = MkList<VarWhere>(MkVarWhere(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]), MkList<VarWhere>()); }
        break;
      case 77: // vws -> NAME
#line 149 "mona.y"
{ CurrentSemanticValue = MkList<VarWhere>(MkVarWhere(ValueStack[ValueStack.Depth-1], null), MkList<VarWhere>()); }
        break;
      case 78: // formula -> TRUE
#line 153 "mona.y"
{ CurrentSemanticValue = MkBooleanConstant(ValueStack[ValueStack.Depth-1]) ; }
        break;
      case 79: // formula -> FALSE
#line 154 "mona.y"
{ CurrentSemanticValue = MkBooleanConstant(ValueStack[ValueStack.Depth-1]) ; }
        break;
      case 80: // formula -> LPAR, formula, RPAR
#line 155 "mona.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 81: // formula -> NOT, formula
#line 156 "mona.y"
{ CurrentSemanticValue = MkBooleanFormula(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 82: // formula -> RESTRICT, LPAR, formula, RPAR
#line 157 "mona.y"
{ CurrentSemanticValue = MkRestrict(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 83: // formula -> EMPTY, LPAR, term2, RPAR
#line 158 "mona.y"
{ CurrentSemanticValue = MkIsEmpty(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 84: // formula -> Q0, names, COLON, formula
#line 159 "mona.y"
{ CurrentSemanticValue = MkQ0Formula(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 85: // formula -> Q, univs, vws, COLON, formula
#line 160 "mona.y"
{ CurrentSemanticValue = MkQFormula(ValueStack[ValueStack.Depth-5], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1], ValueStack[ValueStack.Depth-4]); }
        break;
      case 86: // formula -> Q, vws, COLON, formula
#line 161 "mona.y"
{ CurrentSemanticValue = MkQFormula(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 87: // formula -> NAME, LPAR, exprs, RPAR
#line 162 "mona.y"
{ CurrentSemanticValue = MkPredApp(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 88: // formula -> formula, AND, formula
#line 163 "mona.y"
{ CurrentSemanticValue = MkBooleanFormula(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 89: // formula -> formula, OR, formula
#line 164 "mona.y"
{ CurrentSemanticValue = MkBooleanFormula(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 90: // formula -> formula, IMPLIES, formula
#line 165 "mona.y"
{ CurrentSemanticValue = MkBooleanFormula(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 91: // formula -> formula, EQUIV, formula
#line 166 "mona.y"
{ CurrentSemanticValue = MkBooleanFormula(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 92: // formula -> term, EQ, term
#line 167 "mona.y"
{ CurrentSemanticValue = MkAtom2(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 93: // formula -> term, NE, term
#line 168 "mona.y"
{ CurrentSemanticValue = MkAtom2(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 94: // formula -> term1, GT, term1
#line 169 "mona.y"
{ CurrentSemanticValue = MkAtom2(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 95: // formula -> term1, GE, term1
#line 170 "mona.y"
{ CurrentSemanticValue = MkAtom2(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 96: // formula -> term1, LT, term1
#line 171 "mona.y"
{ CurrentSemanticValue = MkAtom2(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 97: // formula -> term1, LE, term1
#line 172 "mona.y"
{ CurrentSemanticValue = MkAtom2(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 98: // formula -> term1, IN, term2
#line 173 "mona.y"
{ CurrentSemanticValue = MkAtom2(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 99: // formula -> term1, NOTIN, term2
#line 174 "mona.y"
{ CurrentSemanticValue = MkAtom2(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 100: // formula -> term2, SUBSET, term2
#line 175 "mona.y"
{ CurrentSemanticValue = MkAtom2(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 101: // formula -> NAME
#line 176 "mona.y"
{ CurrentSemanticValue = MkName(ValueStack[ValueStack.Depth-1]); }
        break;
      case 108: // exprs -> expr, COMMA, exprs
#line 188 "mona.y"
{ CurrentSemanticValue = MkList<Expr>(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 109: // exprs -> expr
#line 189 "mona.y"
{ CurrentSemanticValue = MkList<Expr>(ValueStack[ValueStack.Depth-1],  MkList<Expr>()); }
        break;
      case 114: // names -> NAME, COMMA, names
#line 203 "mona.y"
{ CurrentSemanticValue = MkList<Token>(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 115: // names -> NAME
#line 204 "mona.y"
{ CurrentSemanticValue = MkList<Token>(ValueStack[ValueStack.Depth-1], MkList<Token>()); }
        break;
      case 116: // univs -> LBRACKET, NAME, univs_
#line 208 "mona.y"
{ CurrentSemanticValue = MkList<Token>(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-2]); }
        break;
      case 117: // univs_ -> RBRACKET
#line 211 "mona.y"
{ CurrentSemanticValue = MkList<Token>(); }
        break;
      case 118: // univs_ -> COMMA, NAME, univs_
#line 212 "mona.y"
{ CurrentSemanticValue = MkList<Token>(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 119: // term1 -> NUMBER
#line 216 "mona.y"
{ CurrentSemanticValue = MkInt(ValueStack[ValueStack.Depth-1]); }
        break;
      case 120: // term1 -> LPAR, term1, RPAR
#line 217 "mona.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 121: // term1 -> term1, PLUS, term1
#line 218 "mona.y"
{ CurrentSemanticValue = MkArithmFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 122: // term1 -> term1, MINUS, term1
#line 219 "mona.y"
{ CurrentSemanticValue = MkArithmFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 123: // term1 -> term1, TIMES, term1
#line 220 "mona.y"
{ CurrentSemanticValue = MkArithmFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 124: // term1 -> term1, DIV, term1
#line 221 "mona.y"
{ CurrentSemanticValue = MkArithmFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 125: // term1 -> term1, MOD, term1
#line 222 "mona.y"
{ CurrentSemanticValue = MkArithmFuncApp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 126: // term1 -> MIN, term2
#line 223 "mona.y"
{ CurrentSemanticValue = MkMinOrMax(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 127: // term1 -> MAX, term2
#line 224 "mona.y"
{ CurrentSemanticValue = MkMinOrMax(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 128: // term1 -> NAME
#line 225 "mona.y"
{ CurrentSemanticValue = MkName(ValueStack[ValueStack.Depth-1]); }
        break;
      case 129: // term2 -> LPAR, term2, RPAR
#line 229 "mona.y"
{ CurrentSemanticValue = ValueStack[ValueStack.Depth-2]; }
        break;
      case 130: // term2 -> LBRACE, elemslist
#line 230 "mona.y"
{ CurrentSemanticValue = MkSet(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-1]); }
        break;
      case 131: // term2 -> EMPTY
#line 231 "mona.y"
{ CurrentSemanticValue = MkSet(ValueStack[ValueStack.Depth-1]); }
        break;
      case 132: // term2 -> PCONST, LPAR, intterm, RPAR
#line 232 "mona.y"
{ CurrentSemanticValue = MkPconst(ValueStack[ValueStack.Depth-4], ValueStack[ValueStack.Depth-2]); }
        break;
      case 133: // term2 -> term2, UNION, term2
#line 233 "mona.y"
{ CurrentSemanticValue = MkSetOp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 134: // term2 -> term2, INTER, term2
#line 234 "mona.y"
{ CurrentSemanticValue = MkSetOp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 135: // term2 -> term2, SETMINUS, term2
#line 235 "mona.y"
{ CurrentSemanticValue = MkSetOp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 136: // term2 -> term2, PLUS, intterm
#line 236 "mona.y"
{ CurrentSemanticValue = MkSetOp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 137: // term2 -> term2, MINUS, intterm
#line 237 "mona.y"
{ CurrentSemanticValue = MkSetOp(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 138: // term2 -> NAME
#line 238 "mona.y"
{ CurrentSemanticValue = MkName(ValueStack[ValueStack.Depth-1]); }
        break;
      case 139: // elemslist -> RBRACE
#line 242 "mona.y"
{ CurrentSemanticValue = MkList<Expr>(); }
        break;
      case 140: // elemslist -> elems, RBRACE
#line 243 "mona.y"
{ CurrentSemanticValue = MkList<Expr>(ValueStack[ValueStack.Depth-2], MkList<Expr>()); }
        break;
      case 141: // elemslist -> elems, COMMA, elemslist
#line 244 "mona.y"
{ CurrentSemanticValue = MkList<Expr>(ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
      case 142: // elems -> term1, RANGE, term1
#line 248 "mona.y"
{ CurrentSemanticValue = MkRange(ValueStack[ValueStack.Depth-2], ValueStack[ValueStack.Depth-3], ValueStack[ValueStack.Depth-1]); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
